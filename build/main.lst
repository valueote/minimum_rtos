ARM GAS  /tmp//ccXIGliI.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.global	huart1
  19              		.section	.bss.huart1,"aw",%nobits
  20              		.align	2
  23              	huart1:
  24 0000 00000000 		.space	72
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              		.section	.text.led_right,"ax",%progbits
  26              		.align	1
  27              		.global	led_right
  28              		.syntax unified
  29              		.thumb
  30              		.thumb_func
  32              	led_right:
  33              	.LFB65:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****  ******************************************************************************
   4:Core/Src/main.c ****  * @file           : main.c
   5:Core/Src/main.c ****  * @brief          : Main program body
   6:Core/Src/main.c ****  ******************************************************************************
   7:Core/Src/main.c ****  * @attention
   8:Core/Src/main.c ****  *
   9:Core/Src/main.c ****  * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****  * All rights reserved.
  11:Core/Src/main.c ****  *
  12:Core/Src/main.c ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****  * in the root directory of this software component.
  14:Core/Src/main.c ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****  *
  16:Core/Src/main.c ****  ******************************************************************************
  17:Core/Src/main.c ****  */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "stm32f1xx_hal_gpio.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
ARM GAS  /tmp//ccXIGliI.s 			page 2


  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** UART_HandleTypeDef huart1;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE BEGIN PV */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE END PV */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  51:Core/Src/main.c **** void SystemClock_Config(void);
  52:Core/Src/main.c **** static void MX_GPIO_Init(void);
  53:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  54:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  55:Core/Src/main.c **** #include "core_cm3.h"
  56:Core/Src/main.c **** #include "mem.h"
  57:Core/Src/main.c **** #include "task.h"
  58:Core/Src/main.c **** #include <stdint.h>
  59:Core/Src/main.c **** /* USER CODE END PFP */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  62:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** void led_right() {
  34              		.loc 1 64 18
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38 0000 80B5     		push	{r7, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 00AF     		add	r7, sp, #0
  44              	.LCFI1:
  45              		.cfi_def_cfa_register 7
  46              	.L2:
  65:Core/Src/main.c ****   while (1) {
  66:Core/Src/main.c ****     HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
  47              		.loc 1 66 5
ARM GAS  /tmp//ccXIGliI.s 			page 3


  48 0004 2021     		movs	r1, #32
  49 0006 0448     		ldr	r0, .L3
  50 0008 FFF7FEFF 		bl	HAL_GPIO_TogglePin
  67:Core/Src/main.c ****     //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
  68:Core/Src/main.c ****     task_delay(1000);
  51              		.loc 1 68 5 discriminator 1
  52 000c 4FF47A70 		mov	r0, #1000
  53 0010 FFF7FEFF 		bl	task_delay
  66:Core/Src/main.c ****     //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
  54              		.loc 1 66 5
  55 0014 00BF     		nop
  56 0016 F5E7     		b	.L2
  57              	.L4:
  58              		.align	2
  59              	.L3:
  60 0018 000C0140 		.word	1073810432
  61              		.cfi_endproc
  62              	.LFE65:
  64              		.section	.text.led_close,"ax",%progbits
  65              		.align	1
  66              		.global	led_close
  67              		.syntax unified
  68              		.thumb
  69              		.thumb_func
  71              	led_close:
  72              	.LFB66:
  69:Core/Src/main.c ****   }
  70:Core/Src/main.c **** }
  71:Core/Src/main.c **** void led_close() {
  73              		.loc 1 71 18
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 1, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  78 0000 80B4     		push	{r7}
  79              	.LCFI2:
  80              		.cfi_def_cfa_offset 4
  81              		.cfi_offset 7, -4
  82 0002 00AF     		add	r7, sp, #0
  83              	.LCFI3:
  84              		.cfi_def_cfa_register 7
  85              	.L6:
  72:Core/Src/main.c ****   while (1) {
  86              		.loc 1 72 9
  87 0004 00BF     		nop
  88 0006 FDE7     		b	.L6
  89              		.cfi_endproc
  90              	.LFE66:
  92              		.section	.text.main,"ax",%progbits
  93              		.align	1
  94              		.global	main
  95              		.syntax unified
  96              		.thumb
  97              		.thumb_func
  99              	main:
 100              	.LFB67:
  73:Core/Src/main.c ****     //do noting
ARM GAS  /tmp//ccXIGliI.s 			page 4


  74:Core/Src/main.c ****   }
  75:Core/Src/main.c **** }
  76:Core/Src/main.c **** /* USER CODE END 0 */
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** /**
  79:Core/Src/main.c ****  * @brief  The application entry point.
  80:Core/Src/main.c ****  * @retval int
  81:Core/Src/main.c ****  */
  82:Core/Src/main.c **** int main(void) {
 101              		.loc 1 82 16
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 8
 104              		@ frame_needed = 1, uses_anonymous_args = 0
 105 0000 80B5     		push	{r7, lr}
 106              	.LCFI4:
 107              		.cfi_def_cfa_offset 8
 108              		.cfi_offset 7, -8
 109              		.cfi_offset 14, -4
 110 0002 84B0     		sub	sp, sp, #16
 111              	.LCFI5:
 112              		.cfi_def_cfa_offset 24
 113 0004 02AF     		add	r7, sp, #8
 114              	.LCFI6:
 115              		.cfi_def_cfa 7, 16
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* USER CODE END 1 */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick.
  91:Core/Src/main.c ****    */
  92:Core/Src/main.c ****   HAL_Init();
 116              		.loc 1 92 3
 117 0006 FFF7FEFF 		bl	HAL_Init
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* USER CODE END Init */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* Configure the system clock */
  99:Core/Src/main.c ****   SystemClock_Config();
 118              		.loc 1 99 3
 119 000a FFF7FEFF 		bl	SystemClock_Config
 100:Core/Src/main.c **** 
 101:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   /* USER CODE END SysInit */
 104:Core/Src/main.c **** 
 105:Core/Src/main.c ****   /* Initialize all configured peripherals */
 106:Core/Src/main.c ****   MX_GPIO_Init();
 120              		.loc 1 106 3
 121 000e FFF7FEFF 		bl	MX_GPIO_Init
 107:Core/Src/main.c ****   MX_USART1_UART_Init();
 122              		.loc 1 107 3
 123 0012 FFF7FEFF 		bl	MX_USART1_UART_Init
ARM GAS  /tmp//ccXIGliI.s 			page 5


 108:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 109:Core/Src/main.c ****   scheduler_init();
 124              		.loc 1 109 3
 125 0016 FFF7FEFF 		bl	scheduler_init
 110:Core/Src/main.c ****   task_handler_t led_right_handler = NULL;
 126              		.loc 1 110 18
 127 001a 0023     		movs	r3, #0
 128 001c 7B60     		str	r3, [r7, #4]
 111:Core/Src/main.c ****   task_handler_t led_close_handler = NULL;
 129              		.loc 1 111 18
 130 001e 0023     		movs	r3, #0
 131 0020 3B60     		str	r3, [r7]
 112:Core/Src/main.c ****   task_create(led_right, NULL, 32, 2, &led_right_handler);
 132              		.loc 1 112 3
 133 0022 3B1D     		adds	r3, r7, #4
 134 0024 0093     		str	r3, [sp]
 135 0026 0223     		movs	r3, #2
 136 0028 2022     		movs	r2, #32
 137 002a 0021     		movs	r1, #0
 138 002c 0748     		ldr	r0, .L9
 139 002e FFF7FEFF 		bl	task_create
 113:Core/Src/main.c ****   task_create(led_close, NULL, 32, 1, &led_close_handler);
 140              		.loc 1 113 3
 141 0032 3B46     		mov	r3, r7
 142 0034 0093     		str	r3, [sp]
 143 0036 0123     		movs	r3, #1
 144 0038 2022     		movs	r2, #32
 145 003a 0021     		movs	r1, #0
 146 003c 0448     		ldr	r0, .L9+4
 147 003e FFF7FEFF 		bl	task_create
 114:Core/Src/main.c ****   scheduler_start();
 148              		.loc 1 114 3
 149 0042 FFF7FEFF 		bl	scheduler_start
 150              	.L8:
 115:Core/Src/main.c ****   /* USER CODE END 2 */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   /* Infinite loop */
 118:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 119:Core/Src/main.c ****   while (1) {
 151              		.loc 1 119 9
 152 0046 00BF     		nop
 153 0048 FDE7     		b	.L8
 154              	.L10:
 155 004a 00BF     		.align	2
 156              	.L9:
 157 004c 00000000 		.word	led_right
 158 0050 00000000 		.word	led_close
 159              		.cfi_endproc
 160              	.LFE67:
 162              		.section	.text.SystemClock_Config,"ax",%progbits
 163              		.align	1
 164              		.global	SystemClock_Config
 165              		.syntax unified
 166              		.thumb
 167              		.thumb_func
 169              	SystemClock_Config:
 170              	.LFB68:
ARM GAS  /tmp//ccXIGliI.s 			page 6


 120:Core/Src/main.c ****     /* USER CODE END WHILE */
 121:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 122:Core/Src/main.c ****   }
 123:Core/Src/main.c ****   /* USER CODE END 3 */
 124:Core/Src/main.c **** }
 125:Core/Src/main.c **** 
 126:Core/Src/main.c **** /**
 127:Core/Src/main.c ****  * @brief System Clock Configuration
 128:Core/Src/main.c ****  * @retval None
 129:Core/Src/main.c ****  */
 130:Core/Src/main.c **** void SystemClock_Config(void) {
 171              		.loc 1 130 31
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 64
 174              		@ frame_needed = 1, uses_anonymous_args = 0
 175 0000 80B5     		push	{r7, lr}
 176              	.LCFI7:
 177              		.cfi_def_cfa_offset 8
 178              		.cfi_offset 7, -8
 179              		.cfi_offset 14, -4
 180 0002 90B0     		sub	sp, sp, #64
 181              	.LCFI8:
 182              		.cfi_def_cfa_offset 72
 183 0004 00AF     		add	r7, sp, #0
 184              	.LCFI9:
 185              		.cfi_def_cfa_register 7
 131:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 186              		.loc 1 131 22
 187 0006 07F11803 		add	r3, r7, #24
 188 000a 2822     		movs	r2, #40
 189 000c 0021     		movs	r1, #0
 190 000e 1846     		mov	r0, r3
 191 0010 FFF7FEFF 		bl	memset
 132:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 192              		.loc 1 132 22
 193 0014 3B1D     		adds	r3, r7, #4
 194 0016 0022     		movs	r2, #0
 195 0018 1A60     		str	r2, [r3]
 196 001a 5A60     		str	r2, [r3, #4]
 197 001c 9A60     		str	r2, [r3, #8]
 198 001e DA60     		str	r2, [r3, #12]
 199 0020 1A61     		str	r2, [r3, #16]
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 135:Core/Src/main.c ****    * in the RCC_OscInitTypeDef structure.
 136:Core/Src/main.c ****    */
 137:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 200              		.loc 1 137 36
 201 0022 0123     		movs	r3, #1
 202 0024 BB61     		str	r3, [r7, #24]
 138:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 203              		.loc 1 138 30
 204 0026 4FF48033 		mov	r3, #65536
 205 002a FB61     		str	r3, [r7, #28]
 139:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 206              		.loc 1 139 36
 207 002c 0023     		movs	r3, #0
ARM GAS  /tmp//ccXIGliI.s 			page 7


 208 002e 3B62     		str	r3, [r7, #32]
 140:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 209              		.loc 1 140 30
 210 0030 0123     		movs	r3, #1
 211 0032 BB62     		str	r3, [r7, #40]
 141:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 212              		.loc 1 141 34
 213 0034 0223     		movs	r3, #2
 214 0036 7B63     		str	r3, [r7, #52]
 142:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 215              		.loc 1 142 35
 216 0038 4FF48033 		mov	r3, #65536
 217 003c BB63     		str	r3, [r7, #56]
 143:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 218              		.loc 1 143 32
 219 003e 4FF4E013 		mov	r3, #1835008
 220 0042 FB63     		str	r3, [r7, #60]
 144:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 221              		.loc 1 144 7
 222 0044 07F11803 		add	r3, r7, #24
 223 0048 1846     		mov	r0, r3
 224 004a FFF7FEFF 		bl	HAL_RCC_OscConfig
 225 004e 0346     		mov	r3, r0
 226              		.loc 1 144 6 discriminator 1
 227 0050 002B     		cmp	r3, #0
 228 0052 01D0     		beq	.L12
 145:Core/Src/main.c ****     Error_Handler();
 229              		.loc 1 145 5
 230 0054 FFF7FEFF 		bl	Error_Handler
 231              	.L12:
 146:Core/Src/main.c ****   }
 147:Core/Src/main.c **** 
 148:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 149:Core/Src/main.c ****    */
 150:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 232              		.loc 1 150 31
 233 0058 0F23     		movs	r3, #15
 234 005a 7B60     		str	r3, [r7, #4]
 151:Core/Src/main.c ****                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 152:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 235              		.loc 1 152 34
 236 005c 0223     		movs	r3, #2
 237 005e BB60     		str	r3, [r7, #8]
 153:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 238              		.loc 1 153 35
 239 0060 0023     		movs	r3, #0
 240 0062 FB60     		str	r3, [r7, #12]
 154:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 241              		.loc 1 154 36
 242 0064 4FF48063 		mov	r3, #1024
 243 0068 3B61     		str	r3, [r7, #16]
 155:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 244              		.loc 1 155 36
 245 006a 0023     		movs	r3, #0
 246 006c 7B61     		str	r3, [r7, #20]
 156:Core/Src/main.c **** 
 157:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
ARM GAS  /tmp//ccXIGliI.s 			page 8


 247              		.loc 1 157 7
 248 006e 3B1D     		adds	r3, r7, #4
 249 0070 0221     		movs	r1, #2
 250 0072 1846     		mov	r0, r3
 251 0074 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 252 0078 0346     		mov	r3, r0
 253              		.loc 1 157 6 discriminator 1
 254 007a 002B     		cmp	r3, #0
 255 007c 01D0     		beq	.L14
 158:Core/Src/main.c ****     Error_Handler();
 256              		.loc 1 158 5
 257 007e FFF7FEFF 		bl	Error_Handler
 258              	.L14:
 159:Core/Src/main.c ****   }
 160:Core/Src/main.c **** }
 259              		.loc 1 160 1
 260 0082 00BF     		nop
 261 0084 4037     		adds	r7, r7, #64
 262              	.LCFI10:
 263              		.cfi_def_cfa_offset 8
 264 0086 BD46     		mov	sp, r7
 265              	.LCFI11:
 266              		.cfi_def_cfa_register 13
 267              		@ sp needed
 268 0088 80BD     		pop	{r7, pc}
 269              		.cfi_endproc
 270              	.LFE68:
 272              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 273              		.align	1
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 278              	MX_USART1_UART_Init:
 279              	.LFB69:
 161:Core/Src/main.c **** 
 162:Core/Src/main.c **** /**
 163:Core/Src/main.c ****  * @brief USART1 Initialization Function
 164:Core/Src/main.c ****  * @param None
 165:Core/Src/main.c ****  * @retval None
 166:Core/Src/main.c ****  */
 167:Core/Src/main.c **** static void MX_USART1_UART_Init(void) {
 280              		.loc 1 167 39
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 1, uses_anonymous_args = 0
 284 0000 80B5     		push	{r7, lr}
 285              	.LCFI12:
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 7, -8
 288              		.cfi_offset 14, -4
 289 0002 00AF     		add	r7, sp, #0
 290              	.LCFI13:
 291              		.cfi_def_cfa_register 7
 168:Core/Src/main.c **** 
 169:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 170:Core/Src/main.c **** 
 171:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
ARM GAS  /tmp//ccXIGliI.s 			page 9


 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 176:Core/Src/main.c ****   huart1.Instance = USART1;
 292              		.loc 1 176 19
 293 0004 114B     		ldr	r3, .L18
 294 0006 124A     		ldr	r2, .L18+4
 295 0008 1A60     		str	r2, [r3]
 177:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 296              		.loc 1 177 24
 297 000a 104B     		ldr	r3, .L18
 298 000c 4FF4E132 		mov	r2, #115200
 299 0010 5A60     		str	r2, [r3, #4]
 178:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 300              		.loc 1 178 26
 301 0012 0E4B     		ldr	r3, .L18
 302 0014 0022     		movs	r2, #0
 303 0016 9A60     		str	r2, [r3, #8]
 179:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 304              		.loc 1 179 24
 305 0018 0C4B     		ldr	r3, .L18
 306 001a 0022     		movs	r2, #0
 307 001c DA60     		str	r2, [r3, #12]
 180:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 308              		.loc 1 180 22
 309 001e 0B4B     		ldr	r3, .L18
 310 0020 0022     		movs	r2, #0
 311 0022 1A61     		str	r2, [r3, #16]
 181:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 312              		.loc 1 181 20
 313 0024 094B     		ldr	r3, .L18
 314 0026 0C22     		movs	r2, #12
 315 0028 5A61     		str	r2, [r3, #20]
 182:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 316              		.loc 1 182 25
 317 002a 084B     		ldr	r3, .L18
 318 002c 0022     		movs	r2, #0
 319 002e 9A61     		str	r2, [r3, #24]
 183:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 320              		.loc 1 183 28
 321 0030 064B     		ldr	r3, .L18
 322 0032 0022     		movs	r2, #0
 323 0034 DA61     		str	r2, [r3, #28]
 184:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK) {
 324              		.loc 1 184 7
 325 0036 0548     		ldr	r0, .L18
 326 0038 FFF7FEFF 		bl	HAL_UART_Init
 327 003c 0346     		mov	r3, r0
 328              		.loc 1 184 6 discriminator 1
 329 003e 002B     		cmp	r3, #0
 330 0040 01D0     		beq	.L17
 185:Core/Src/main.c ****     Error_Handler();
 331              		.loc 1 185 5
 332 0042 FFF7FEFF 		bl	Error_Handler
 333              	.L17:
 186:Core/Src/main.c ****   }
ARM GAS  /tmp//ccXIGliI.s 			page 10


 187:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 190:Core/Src/main.c **** }
 334              		.loc 1 190 1
 335 0046 00BF     		nop
 336 0048 80BD     		pop	{r7, pc}
 337              	.L19:
 338 004a 00BF     		.align	2
 339              	.L18:
 340 004c 00000000 		.word	huart1
 341 0050 00380140 		.word	1073821696
 342              		.cfi_endproc
 343              	.LFE69:
 345              		.section	.text.MX_GPIO_Init,"ax",%progbits
 346              		.align	1
 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 351              	MX_GPIO_Init:
 352              	.LFB70:
 191:Core/Src/main.c **** 
 192:Core/Src/main.c **** /**
 193:Core/Src/main.c ****  * @brief GPIO Initialization Function
 194:Core/Src/main.c ****  * @param None
 195:Core/Src/main.c ****  * @retval None
 196:Core/Src/main.c ****  */
 197:Core/Src/main.c **** static void MX_GPIO_Init(void) {
 353              		.loc 1 197 32
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 24
 356              		@ frame_needed = 1, uses_anonymous_args = 0
 357 0000 80B5     		push	{r7, lr}
 358              	.LCFI14:
 359              		.cfi_def_cfa_offset 8
 360              		.cfi_offset 7, -8
 361              		.cfi_offset 14, -4
 362 0002 86B0     		sub	sp, sp, #24
 363              	.LCFI15:
 364              		.cfi_def_cfa_offset 32
 365 0004 00AF     		add	r7, sp, #0
 366              	.LCFI16:
 367              		.cfi_def_cfa_register 7
 198:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 368              		.loc 1 198 20
 369 0006 07F10803 		add	r3, r7, #8
 370 000a 0022     		movs	r2, #0
 371 000c 1A60     		str	r2, [r3]
 372 000e 5A60     		str	r2, [r3, #4]
 373 0010 9A60     		str	r2, [r3, #8]
 374 0012 DA60     		str	r2, [r3, #12]
 375              	.LBB4:
 199:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 200:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 203:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
ARM GAS  /tmp//ccXIGliI.s 			page 11


 376              		.loc 1 203 3
 377 0014 174B     		ldr	r3, .L21
 378 0016 9B69     		ldr	r3, [r3, #24]
 379 0018 164A     		ldr	r2, .L21
 380 001a 43F00403 		orr	r3, r3, #4
 381 001e 9361     		str	r3, [r2, #24]
 382 0020 144B     		ldr	r3, .L21
 383 0022 9B69     		ldr	r3, [r3, #24]
 384 0024 03F00403 		and	r3, r3, #4
 385 0028 7B60     		str	r3, [r7, #4]
 386 002a 7B68     		ldr	r3, [r7, #4]
 387              	.LBE4:
 388              	.LBB5:
 204:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 389              		.loc 1 204 3
 390 002c 114B     		ldr	r3, .L21
 391 002e 9B69     		ldr	r3, [r3, #24]
 392 0030 104A     		ldr	r2, .L21
 393 0032 43F00803 		orr	r3, r3, #8
 394 0036 9361     		str	r3, [r2, #24]
 395 0038 0E4B     		ldr	r3, .L21
 396 003a 9B69     		ldr	r3, [r3, #24]
 397 003c 03F00803 		and	r3, r3, #8
 398 0040 3B60     		str	r3, [r7]
 399 0042 3B68     		ldr	r3, [r7]
 400              	.LBE5:
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 207:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 401              		.loc 1 207 3
 402 0044 0122     		movs	r2, #1
 403 0046 2021     		movs	r1, #32
 404 0048 0B48     		ldr	r0, .L21+4
 405 004a FFF7FEFF 		bl	HAL_GPIO_WritePin
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   /*Configure GPIO pin : PB5 */
 210:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_5;
 406              		.loc 1 210 23
 407 004e 2023     		movs	r3, #32
 408 0050 BB60     		str	r3, [r7, #8]
 211:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 409              		.loc 1 211 24
 410 0052 0123     		movs	r3, #1
 411 0054 FB60     		str	r3, [r7, #12]
 212:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 412              		.loc 1 212 24
 413 0056 0023     		movs	r3, #0
 414 0058 3B61     		str	r3, [r7, #16]
 213:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 415              		.loc 1 213 25
 416 005a 0223     		movs	r3, #2
 417 005c 7B61     		str	r3, [r7, #20]
 214:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 418              		.loc 1 214 3
 419 005e 07F10803 		add	r3, r7, #8
 420 0062 1946     		mov	r1, r3
 421 0064 0448     		ldr	r0, .L21+4
ARM GAS  /tmp//ccXIGliI.s 			page 12


 422 0066 FFF7FEFF 		bl	HAL_GPIO_Init
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 217:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 218:Core/Src/main.c **** }
 423              		.loc 1 218 1
 424 006a 00BF     		nop
 425 006c 1837     		adds	r7, r7, #24
 426              	.LCFI17:
 427              		.cfi_def_cfa_offset 8
 428 006e BD46     		mov	sp, r7
 429              	.LCFI18:
 430              		.cfi_def_cfa_register 13
 431              		@ sp needed
 432 0070 80BD     		pop	{r7, pc}
 433              	.L22:
 434 0072 00BF     		.align	2
 435              	.L21:
 436 0074 00100240 		.word	1073876992
 437 0078 000C0140 		.word	1073810432
 438              		.cfi_endproc
 439              	.LFE70:
 441              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 442              		.align	1
 443              		.global	HAL_TIM_PeriodElapsedCallback
 444              		.syntax unified
 445              		.thumb
 446              		.thumb_func
 448              	HAL_TIM_PeriodElapsedCallback:
 449              	.LFB71:
 219:Core/Src/main.c **** 
 220:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 221:Core/Src/main.c **** 
 222:Core/Src/main.c **** /* USER CODE END 4 */
 223:Core/Src/main.c **** 
 224:Core/Src/main.c **** /**
 225:Core/Src/main.c ****  * @brief  Period elapsed callback in non blocking mode
 226:Core/Src/main.c ****  * @note   This function is called  when TIM1 interrupt took place, inside
 227:Core/Src/main.c ****  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 228:Core/Src/main.c ****  * a global variable "uwTick" used as application time base.
 229:Core/Src/main.c ****  * @param  htim : TIM handle
 230:Core/Src/main.c ****  * @retval None
 231:Core/Src/main.c ****  */
 232:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 450              		.loc 1 232 61
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 8
 453              		@ frame_needed = 1, uses_anonymous_args = 0
 454 0000 80B5     		push	{r7, lr}
 455              	.LCFI19:
 456              		.cfi_def_cfa_offset 8
 457              		.cfi_offset 7, -8
 458              		.cfi_offset 14, -4
 459 0002 82B0     		sub	sp, sp, #8
 460              	.LCFI20:
 461              		.cfi_def_cfa_offset 16
 462 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp//ccXIGliI.s 			page 13


 463              	.LCFI21:
 464              		.cfi_def_cfa_register 7
 465 0006 7860     		str	r0, [r7, #4]
 233:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 234:Core/Src/main.c **** 
 235:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 236:Core/Src/main.c ****   if (htim->Instance == TIM1) {
 466              		.loc 1 236 11
 467 0008 7B68     		ldr	r3, [r7, #4]
 468 000a 1B68     		ldr	r3, [r3]
 469              		.loc 1 236 6
 470 000c 044A     		ldr	r2, .L26
 471 000e 9342     		cmp	r3, r2
 472 0010 01D1     		bne	.L25
 237:Core/Src/main.c ****     HAL_IncTick();
 473              		.loc 1 237 5
 474 0012 FFF7FEFF 		bl	HAL_IncTick
 475              	.L25:
 238:Core/Src/main.c ****   }
 239:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 240:Core/Src/main.c **** 
 241:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 242:Core/Src/main.c **** }
 476              		.loc 1 242 1
 477 0016 00BF     		nop
 478 0018 0837     		adds	r7, r7, #8
 479              	.LCFI22:
 480              		.cfi_def_cfa_offset 8
 481 001a BD46     		mov	sp, r7
 482              	.LCFI23:
 483              		.cfi_def_cfa_register 13
 484              		@ sp needed
 485 001c 80BD     		pop	{r7, pc}
 486              	.L27:
 487 001e 00BF     		.align	2
 488              	.L26:
 489 0020 002C0140 		.word	1073818624
 490              		.cfi_endproc
 491              	.LFE71:
 493              		.section	.text.Error_Handler,"ax",%progbits
 494              		.align	1
 495              		.global	Error_Handler
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 500              	Error_Handler:
 501              	.LFB72:
 243:Core/Src/main.c **** 
 244:Core/Src/main.c **** /**
 245:Core/Src/main.c ****  * @brief  This function is executed in case of error occurrence.
 246:Core/Src/main.c ****  * @retval None
 247:Core/Src/main.c ****  */
 248:Core/Src/main.c **** void Error_Handler(void) {
 502              		.loc 1 248 26
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 0
 505              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp//ccXIGliI.s 			page 14


 506              		@ link register save eliminated.
 507 0000 80B4     		push	{r7}
 508              	.LCFI24:
 509              		.cfi_def_cfa_offset 4
 510              		.cfi_offset 7, -4
 511 0002 00AF     		add	r7, sp, #0
 512              	.LCFI25:
 513              		.cfi_def_cfa_register 7
 514              	.LBB6:
 515              	.LBB7:
 516              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
ARM GAS  /tmp//ccXIGliI.s 			page 15


  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  /tmp//ccXIGliI.s 			page 16


 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 517              		.loc 2 142 3
 518              		.syntax unified
 519              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 520 0004 72B6     		cpsid i
 521              	@ 0 "" 2
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 522              		.loc 2 143 1
 523              		.thumb
 524              		.syntax unified
 525 0006 00BF     		nop
 526              	.L29:
 527              	.LBE7:
 528              	.LBE6:
 249:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 250:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 251:Core/Src/main.c ****   __disable_irq();
 252:Core/Src/main.c ****   while (1) {
 529              		.loc 1 252 9
ARM GAS  /tmp//ccXIGliI.s 			page 17


 530 0008 00BF     		nop
 531 000a FDE7     		b	.L29
 532              		.cfi_endproc
 533              	.LFE72:
 535              		.text
 536              	.Letext0:
 537              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 538              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 539              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 540              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 541              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 542              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 543              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 544              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 545              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 546              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 547              		.file 13 "Core/Inc/task.h"
 548              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp//ccXIGliI.s 			page 18


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    /tmp//ccXIGliI.s:23     .bss.huart1:00000000 huart1
    /tmp//ccXIGliI.s:20     .bss.huart1:00000000 $d
    /tmp//ccXIGliI.s:26     .text.led_right:00000000 $t
    /tmp//ccXIGliI.s:32     .text.led_right:00000000 led_right
    /tmp//ccXIGliI.s:60     .text.led_right:00000018 $d
    /tmp//ccXIGliI.s:65     .text.led_close:00000000 $t
    /tmp//ccXIGliI.s:71     .text.led_close:00000000 led_close
    /tmp//ccXIGliI.s:93     .text.main:00000000 $t
    /tmp//ccXIGliI.s:99     .text.main:00000000 main
    /tmp//ccXIGliI.s:169    .text.SystemClock_Config:00000000 SystemClock_Config
    /tmp//ccXIGliI.s:351    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
    /tmp//ccXIGliI.s:278    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
    /tmp//ccXIGliI.s:157    .text.main:0000004c $d
    /tmp//ccXIGliI.s:163    .text.SystemClock_Config:00000000 $t
    /tmp//ccXIGliI.s:500    .text.Error_Handler:00000000 Error_Handler
    /tmp//ccXIGliI.s:273    .text.MX_USART1_UART_Init:00000000 $t
    /tmp//ccXIGliI.s:340    .text.MX_USART1_UART_Init:0000004c $d
    /tmp//ccXIGliI.s:346    .text.MX_GPIO_Init:00000000 $t
    /tmp//ccXIGliI.s:436    .text.MX_GPIO_Init:00000074 $d
    /tmp//ccXIGliI.s:442    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
    /tmp//ccXIGliI.s:448    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
    /tmp//ccXIGliI.s:489    .text.HAL_TIM_PeriodElapsedCallback:00000020 $d
    /tmp//ccXIGliI.s:494    .text.Error_Handler:00000000 $t

UNDEFINED SYMBOLS
HAL_GPIO_TogglePin
task_delay
HAL_Init
scheduler_init
task_create
scheduler_start
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_UART_Init
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_IncTick
