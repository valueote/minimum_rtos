ARM GAS  /tmp//ccIUEYTF.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"task.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/task.c"
  18              		.section	.text.task_exit_error,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	task_exit_error:
  25              	.LFB2:
   1:Core/Src/task.c **** #include "task.h"
   2:Core/Src/task.c **** #include "config.h"
   3:Core/Src/task.c **** 
   4:Core/Src/task.c **** __attribute__((used)) volatile tcb_t* current_tcb = NULL;
   5:Core/Src/task.c **** 
   6:Core/Src/task.c **** __attribute__((naked)) void xPortPendSVHandler( void )
   7:Core/Src/task.c **** {
   8:Core/Src/task.c ****     /* This is a naked function. */
   9:Core/Src/task.c ****     __asm volatile
  10:Core/Src/task.c ****     (
  11:Core/Src/task.c ****         "   mrs r0, psp                         \n"
  12:Core/Src/task.c ****         "   isb                                 \n"
  13:Core/Src/task.c ****         "                                       \n"
  14:Core/Src/task.c ****         "   ldr r3, pxCurrentTCBConst           \n"
  15:Core/Src/task.c ****         "   ldr r2, [r3]                        \n"
  16:Core/Src/task.c ****         "                                       \n"
  17:Core/Src/task.c ****         "   stmdb r0!, {r4-r11}                 \n"
  18:Core/Src/task.c ****         "   str r0, [r2]                        \n"
  19:Core/Src/task.c ****         "                                       \n"
  20:Core/Src/task.c ****         "   stmdb sp!, {r3, r14}                \n"
  21:Core/Src/task.c ****         "   mov r0, %0                          \n"
  22:Core/Src/task.c ****         "   msr basepri, r0                     \n"
  23:Core/Src/task.c ****         "   bl vTaskSwitchContext               \n"
  24:Core/Src/task.c ****         "   mov r0, #0                          \n"
  25:Core/Src/task.c ****         "   msr basepri, r0                     \n"
  26:Core/Src/task.c ****         "   ldmia sp!, {r3, r14}                \n"
  27:Core/Src/task.c ****         "                                       \n"
  28:Core/Src/task.c ****         "   ldr r1, [r3]                        \n"
  29:Core/Src/task.c ****         "   ldr r0, [r1]                        \n"
  30:Core/Src/task.c ****         "   ldmia r0!, {r4-r11}                 \n"
  31:Core/Src/task.c ****         "   msr psp, r0                         \n"
  32:Core/Src/task.c ****         "   isb                                 \n"
  33:Core/Src/task.c ****         "   bx r14                              \n"
ARM GAS  /tmp//ccIUEYTF.s 			page 2


  34:Core/Src/task.c ****         "                                       \n"
  35:Core/Src/task.c ****         "   .align 4                            \n"
  36:Core/Src/task.c ****         "pxCurrentTCBConst: .word current_tcb  \n"
  37:Core/Src/task.c ****         ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
  38:Core/Src/task.c ****     );
  39:Core/Src/task.c **** }
  40:Core/Src/task.c **** 
  41:Core/Src/task.c **** void create_task(task_func_t func, void* func_parameters, uint32_t stack_depth,
  42:Core/Src/task.c ****                  uint32_t priority, task_handler_t* handler) {
  43:Core/Src/task.c ****     tcb_t* new_tcb;
  44:Core/Src/task.c ****     uint32_t* stack_top;
  45:Core/Src/task.c ****     //allocate memory for the tcb and stack
  46:Core/Src/task.c ****     new_tcb = (tcb_t*)halloc(sizeof(tcb_t));
  47:Core/Src/task.c ****     new_tcb->stack= (uint32_t*)halloc((size_t)stack_depth * sizeof(uint32_t));
  48:Core/Src/task.c ****     //get the stack top addresss and align
  49:Core/Src/task.c ****     stack_top = new_tcb->stack + (stack_depth - (uint32_t)1);
  50:Core/Src/task.c ****     stack_top = (uint32_t*)((uint32_t)stack_top & ~(uint32_t)(alignment_byte));
  51:Core/Src/task.c ****     //initialize the stack
  52:Core/Src/task.c ****     new_tcb->stack_top = initialize_stack(stack_top, func, func_parameters);
  53:Core/Src/task.c ****     //set the task handler
  54:Core/Src/task.c ****     *handler = (task_handler_t)new_tcb;
  55:Core/Src/task.c **** }
  56:Core/Src/task.c **** 
  57:Core/Src/task.c **** static void task_exit_error(){
  26              		.loc 1 57 30 view -0
  27              		.cfi_startproc
  28              		@ Volatile: function does not return.
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.L2:
  58:Core/Src/task.c ****     while(1){
  33              		.loc 1 58 5 view .LVU1
  59:Core/Src/task.c ****     }
  34              		.loc 1 59 5 view .LVU2
  58:Core/Src/task.c ****     while(1){
  35              		.loc 1 58 10 view .LVU3
  36 0000 FEE7     		b	.L2
  37              		.cfi_endproc
  38              	.LFE2:
  40              		.section	.text.PendSV_Handler,"ax",%progbits
  41              		.align	1
  42              		.global	PendSV_Handler
  43              		.syntax unified
  44              		.thumb
  45              		.thumb_func
  47              	PendSV_Handler:
  48              	.LFB0:
   7:Core/Src/task.c ****     /* This is a naked function. */
  49              		.loc 1 7 1 view -0
  50              		.cfi_startproc
  51              		@ Naked Function: prologue and epilogue provided by programmer.
  52              		@ args = 0, pretend = 0, frame = 0
  53              		@ frame_needed = 0, uses_anonymous_args = 0
   9:Core/Src/task.c ****     (
  54              		.loc 1 9 5 view .LVU5
  55              		.syntax unified
ARM GAS  /tmp//ccIUEYTF.s 			page 3


  56              	@ 9 "Core/Src/task.c" 1
  57 0000 EFF30980 		   mrs r0, psp                         
  58 0004 BFF36F8F 	   isb                                 
  59              	                                       
  60 0008 0D4B     	   ldr r3, pxCurrentTCBConst           
  61 000a 1A68     	   ldr r2, [r3]                        
  62              	                                       
  63 000c 20E9F00F 	   stmdb r0!, {r4-r11}                 
  64 0010 1060     	   str r0, [r2]                        
  65              	                                       
  66 0012 2DE90840 	   stmdb sp!, {r3, r14}                
  67 0016 4FF00000 	   mov r0, #0                          
  68 001a 80F31188 	   msr basepri, r0                     
  69 001e FFF7FEFF 	   bl vTaskSwitchContext               
  70 0022 4FF00000 	   mov r0, #0                          
  71 0026 80F31188 	   msr basepri, r0                     
  72 002a BDE80840 	   ldmia sp!, {r3, r14}                
  73              	                                       
  74 002e 1968     	   ldr r1, [r3]                        
  75 0030 0868     	   ldr r0, [r1]                        
  76 0032 B0E8F00F 	   ldmia r0!, {r4-r11}                 
  77 0036 80F30988 	   msr psp, r0                         
  78 003a BFF36F8F 	   isb                                 
  79 003e 7047     	   bx r14                              
  80              	                                       
  81              	   .align 4                            
  82 0040 00000000 	pxCurrentTCBConst: .word current_tcb  
  83              	
  84              	@ 0 "" 2
  39:Core/Src/task.c **** 
  85              		.loc 1 39 1 is_stmt 0 view .LVU6
  86              		.thumb
  87              		.syntax unified
  88              		.cfi_endproc
  89              	.LFE0:
  91              		.section	.text.initialize_stack,"ax",%progbits
  92              		.align	1
  93              		.global	initialize_stack
  94              		.syntax unified
  95              		.thumb
  96              		.thumb_func
  98              	initialize_stack:
  99              	.LVL0:
 100              	.LFB3:
  60:Core/Src/task.c **** }
  61:Core/Src/task.c **** 
  62:Core/Src/task.c **** uint32_t* initialize_stack(uint32_t* stack_top, task_func_t func,void* parameters){
 101              		.loc 1 62 83 is_stmt 1 view -0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              		@ link register save eliminated.
  63:Core/Src/task.c ****     //set the XPSR
  64:Core/Src/task.c ****     stack_top--;
 106              		.loc 1 64 5 view .LVU8
  65:Core/Src/task.c ****     *stack_top = INITIAL_XPSR;
 107              		.loc 1 65 5 view .LVU9
ARM GAS  /tmp//ccIUEYTF.s 			page 4


 108              		.loc 1 65 16 is_stmt 0 view .LVU10
 109 0000 4FF08073 		mov	r3, #16777216
 110 0004 40F8043C 		str	r3, [r0, #-4]
  66:Core/Src/task.c ****     //set the task func
  67:Core/Src/task.c ****     stack_top--;
 111              		.loc 1 67 5 is_stmt 1 view .LVU11
 112              	.LVL1:
  68:Core/Src/task.c ****     *stack_top = (uint32_t)func & (uint32_t)START_ADDRESS_MASK;
 113              		.loc 1 68 5 view .LVU12
 114              		.loc 1 68 33 is_stmt 0 view .LVU13
 115 0008 21F00101 		bic	r1, r1, #1
 116              	.LVL2:
 117              		.loc 1 68 16 view .LVU14
 118 000c 40F8081C 		str	r1, [r0, #-8]
  69:Core/Src/task.c ****     //set the error handler
  70:Core/Src/task.c ****     stack_top--;
 119              		.loc 1 70 5 is_stmt 1 view .LVU15
 120              	.LVL3:
  71:Core/Src/task.c ****     *stack_top = (uint32_t)task_exit_error;
 121              		.loc 1 71 5 view .LVU16
 122              		.loc 1 71 18 is_stmt 0 view .LVU17
 123 0010 034B     		ldr	r3, .L5
 124              		.loc 1 71 16 view .LVU18
 125 0012 40F80C3C 		str	r3, [r0, #-12]
  72:Core/Src/task.c ****     //set the r12, r1-3 to zero, and set r0 to parameters
  73:Core/Src/task.c ****     stack_top -= 5;
 126              		.loc 1 73 5 is_stmt 1 view .LVU19
 127              	.LVL4:
  74:Core/Src/task.c ****     *stack_top = (uint32_t)parameters;
 128              		.loc 1 74 5 view .LVU20
 129              		.loc 1 74 16 is_stmt 0 view .LVU21
 130 0016 40F8202C 		str	r2, [r0, #-32]
  75:Core/Src/task.c ****     //leave space for r4-r11
  76:Core/Src/task.c ****     stack_top -= 8;
 131              		.loc 1 76 5 is_stmt 1 view .LVU22
 132              	.LVL5:
  77:Core/Src/task.c ****     return stack_top;
 133              		.loc 1 77 5 view .LVU23
  78:Core/Src/task.c **** }
 134              		.loc 1 78 1 is_stmt 0 view .LVU24
 135 001a 4038     		subs	r0, r0, #64
 136              	.LVL6:
 137              		.loc 1 78 1 view .LVU25
 138 001c 7047     		bx	lr
 139              	.L6:
 140 001e 00BF     		.align	2
 141              	.L5:
 142 0020 00000000 		.word	task_exit_error
 143              		.cfi_endproc
 144              	.LFE3:
 146              		.section	.text.create_task,"ax",%progbits
 147              		.align	1
 148              		.global	create_task
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 153              	create_task:
ARM GAS  /tmp//ccIUEYTF.s 			page 5


 154              	.LVL7:
 155              	.LFB1:
  42:Core/Src/task.c ****     tcb_t* new_tcb;
 156              		.loc 1 42 62 is_stmt 1 view -0
 157              		.cfi_startproc
 158              		@ args = 4, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
  42:Core/Src/task.c ****     tcb_t* new_tcb;
 160              		.loc 1 42 62 is_stmt 0 view .LVU27
 161 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 162              	.LCFI0:
 163              		.cfi_def_cfa_offset 24
 164              		.cfi_offset 3, -24
 165              		.cfi_offset 4, -20
 166              		.cfi_offset 5, -16
 167              		.cfi_offset 6, -12
 168              		.cfi_offset 7, -8
 169              		.cfi_offset 14, -4
 170 0002 0546     		mov	r5, r0
 171 0004 0E46     		mov	r6, r1
 172 0006 1446     		mov	r4, r2
  43:Core/Src/task.c ****     uint32_t* stack_top;
 173              		.loc 1 43 5 is_stmt 1 view .LVU28
  44:Core/Src/task.c ****     //allocate memory for the tcb and stack
 174              		.loc 1 44 5 view .LVU29
  46:Core/Src/task.c ****     new_tcb->stack= (uint32_t*)halloc((size_t)stack_depth * sizeof(uint32_t));
 175              		.loc 1 46 5 view .LVU30
  46:Core/Src/task.c ****     new_tcb->stack= (uint32_t*)halloc((size_t)stack_depth * sizeof(uint32_t));
 176              		.loc 1 46 23 is_stmt 0 view .LVU31
 177 0008 0C20     		movs	r0, #12
 178              	.LVL8:
  46:Core/Src/task.c ****     new_tcb->stack= (uint32_t*)halloc((size_t)stack_depth * sizeof(uint32_t));
 179              		.loc 1 46 23 view .LVU32
 180 000a FFF7FEFF 		bl	halloc
 181              	.LVL9:
  46:Core/Src/task.c ****     new_tcb->stack= (uint32_t*)halloc((size_t)stack_depth * sizeof(uint32_t));
 182              		.loc 1 46 23 view .LVU33
 183 000e 0746     		mov	r7, r0
 184              	.LVL10:
  47:Core/Src/task.c ****     //get the stack top addresss and align
 185              		.loc 1 47 5 is_stmt 1 view .LVU34
  47:Core/Src/task.c ****     //get the stack top addresss and align
 186              		.loc 1 47 32 is_stmt 0 view .LVU35
 187 0010 A000     		lsls	r0, r4, #2
 188              	.LVL11:
  47:Core/Src/task.c ****     //get the stack top addresss and align
 189              		.loc 1 47 32 view .LVU36
 190 0012 FFF7FEFF 		bl	halloc
 191              	.LVL12:
  47:Core/Src/task.c ****     //get the stack top addresss and align
 192              		.loc 1 47 19 discriminator 1 view .LVU37
 193 0016 B860     		str	r0, [r7, #8]
  49:Core/Src/task.c ****     stack_top = (uint32_t*)((uint32_t)stack_top & ~(uint32_t)(alignment_byte));
 194              		.loc 1 49 5 is_stmt 1 view .LVU38
  49:Core/Src/task.c ****     stack_top = (uint32_t*)((uint32_t)stack_top & ~(uint32_t)(alignment_byte));
 195              		.loc 1 49 32 is_stmt 0 view .LVU39
 196 0018 04F18042 		add	r2, r4, #1073741824
ARM GAS  /tmp//ccIUEYTF.s 			page 6


 197 001c 013A     		subs	r2, r2, #1
  49:Core/Src/task.c ****     stack_top = (uint32_t*)((uint32_t)stack_top & ~(uint32_t)(alignment_byte));
 198              		.loc 1 49 15 view .LVU40
 199 001e 00EB8200 		add	r0, r0, r2, lsl #2
 200              	.LVL13:
  50:Core/Src/task.c ****     //initialize the stack
 201              		.loc 1 50 5 is_stmt 1 view .LVU41
  52:Core/Src/task.c ****     //set the task handler
 202              		.loc 1 52 5 view .LVU42
  52:Core/Src/task.c ****     //set the task handler
 203              		.loc 1 52 26 is_stmt 0 view .LVU43
 204 0022 3246     		mov	r2, r6
 205 0024 2946     		mov	r1, r5
 206 0026 20F00700 		bic	r0, r0, #7
 207              	.LVL14:
  52:Core/Src/task.c ****     //set the task handler
 208              		.loc 1 52 26 view .LVU44
 209 002a FFF7FEFF 		bl	initialize_stack
 210              	.LVL15:
  52:Core/Src/task.c ****     //set the task handler
 211              		.loc 1 52 24 discriminator 1 view .LVU45
 212 002e 3860     		str	r0, [r7]
  54:Core/Src/task.c **** }
 213              		.loc 1 54 5 is_stmt 1 view .LVU46
  54:Core/Src/task.c **** }
 214              		.loc 1 54 14 is_stmt 0 view .LVU47
 215 0030 069B     		ldr	r3, [sp, #24]
 216 0032 1F60     		str	r7, [r3]
  55:Core/Src/task.c **** 
 217              		.loc 1 55 1 view .LVU48
 218 0034 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
  55:Core/Src/task.c **** 
 219              		.loc 1 55 1 view .LVU49
 220              		.cfi_endproc
 221              	.LFE1:
 223              		.global	current_tcb
 224              		.section	.bss.current_tcb,"aw",%nobits
 225              		.align	2
 228              	current_tcb:
 229 0000 00000000 		.space	4
 230              		.global	node_struct_size
 231              		.section	.rodata.node_struct_size,"a"
 232              		.align	2
 235              	node_struct_size:
 236 0000 08000000 		.word	8
 237              		.text
 238              	.Letext0:
 239              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 240              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 241              		.file 4 "/usr/lib/gcc/arm-none-eabi/14.2.0/include/stddef.h"
 242              		.file 5 "Core/Inc/task.h"
 243              		.file 6 "Core/Inc/mem.h"
ARM GAS  /tmp//ccIUEYTF.s 			page 7


DEFINED SYMBOLS
                            *ABS*:00000000 task.c
    /tmp//ccIUEYTF.s:19     .text.task_exit_error:00000000 $t
    /tmp//ccIUEYTF.s:24     .text.task_exit_error:00000000 task_exit_error
    /tmp//ccIUEYTF.s:41     .text.PendSV_Handler:00000000 $t
    /tmp//ccIUEYTF.s:47     .text.PendSV_Handler:00000000 PendSV_Handler
    /tmp//ccIUEYTF.s:82     .text.PendSV_Handler:00000040 pxCurrentTCBConst
    /tmp//ccIUEYTF.s:82     .text.PendSV_Handler:00000040 $d
    /tmp//ccIUEYTF.s:228    .bss.current_tcb:00000000 current_tcb
    /tmp//ccIUEYTF.s:92     .text.initialize_stack:00000000 $t
    /tmp//ccIUEYTF.s:98     .text.initialize_stack:00000000 initialize_stack
    /tmp//ccIUEYTF.s:142    .text.initialize_stack:00000020 $d
    /tmp//ccIUEYTF.s:147    .text.create_task:00000000 $t
    /tmp//ccIUEYTF.s:153    .text.create_task:00000000 create_task
    /tmp//ccIUEYTF.s:225    .bss.current_tcb:00000000 $d
    /tmp//ccIUEYTF.s:235    .rodata.node_struct_size:00000000 node_struct_size
    /tmp//ccIUEYTF.s:232    .rodata.node_struct_size:00000000 $d

UNDEFINED SYMBOLS
vTaskSwitchContext
halloc
