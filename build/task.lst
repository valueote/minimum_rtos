ARM GAS  /tmp/cciKPolz.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"task.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/task.c"
  18              		.section	.text.task_exit_error,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	task_exit_error:
  25              	.LFB71:
   1:Core/Src/task.c **** #include "task.h"
   2:Core/Src/task.c **** #include "config.h"
   3:Core/Src/task.c **** 
   4:Core/Src/task.c **** //The current running task
   5:Core/Src/task.c **** __attribute__((used)) volatile tcb_t* current_tcb = NULL;
   6:Core/Src/task.c **** //handler for the idle task
   7:Core/Src/task.c **** static task_handler_t idle_task_handler = NULL;
   8:Core/Src/task.c **** // task table
   9:Core/Src/task.c **** static task_handler_t ready_list[configMaxPriority];
  10:Core/Src/task.c **** // ready bits for task table
  11:Core/Src/task.c **** static uint32_t ready_bits = 0;
  12:Core/Src/task.c **** //delay lists
  13:Core/Src/task.c **** static uint32_t delay_lst[configMaxPriority];
  14:Core/Src/task.c **** static uint32_t delay_overflow_lst[configMaxPriority];
  15:Core/Src/task.c **** static uint32_t* delay_list;
  16:Core/Src/task.c **** static uint32_t* delay_overflow_list;
  17:Core/Src/task.c **** 
  18:Core/Src/task.c **** static uint32_t max_priority = 0;
  19:Core/Src/task.c **** static uint32_t current_tick_count;
  20:Core/Src/task.c **** 
  21:Core/Src/task.c **** //used for context switch, from freertos
  22:Core/Src/task.c **** __attribute__((naked)) void xPortPendSVHandler( void )
  23:Core/Src/task.c **** {
  24:Core/Src/task.c ****     __asm volatile
  25:Core/Src/task.c ****     (
  26:Core/Src/task.c ****         "   mrs r0, psp                         \n"
  27:Core/Src/task.c ****         "   isb                                 \n"
  28:Core/Src/task.c ****         "                                       \n"
  29:Core/Src/task.c ****         "   ldr r3, pxCurrentTCBConst           \n"
  30:Core/Src/task.c ****         "   ldr r2, [r3]                        \n"
  31:Core/Src/task.c ****         "                                       \n"
  32:Core/Src/task.c ****         "   stmdb r0!, {r4-r11}                 \n"
  33:Core/Src/task.c ****         "   str r0, [r2]                        \n"
ARM GAS  /tmp/cciKPolz.s 			page 2


  34:Core/Src/task.c ****         "                                       \n"
  35:Core/Src/task.c ****         "   stmdb sp!, {r3, r14}                \n"
  36:Core/Src/task.c ****         "   mov r0, %0                          \n"
  37:Core/Src/task.c ****         "   msr basepri, r0                     \n"
  38:Core/Src/task.c ****         "   bl vTaskSwitchContext               \n"
  39:Core/Src/task.c ****         "   mov r0, #0                          \n"
  40:Core/Src/task.c ****         "   msr basepri, r0                     \n"
  41:Core/Src/task.c ****         "   ldmia sp!, {r3, r14}                \n"
  42:Core/Src/task.c ****         "                                       \n"
  43:Core/Src/task.c ****         "   ldr r1, [r3]                        \n"
  44:Core/Src/task.c ****         "   ldr r0, [r1]                        \n"
  45:Core/Src/task.c ****         "   ldmia r0!, {r4-r11}                 \n"
  46:Core/Src/task.c ****         "   msr psp, r0                         \n"
  47:Core/Src/task.c ****         "   isb                                 \n"
  48:Core/Src/task.c ****         "   bx r14                              \n"
  49:Core/Src/task.c ****         "                                       \n"
  50:Core/Src/task.c ****         "   .align 4                            \n"
  51:Core/Src/task.c ****         "pxCurrentTCBConst: .word current_tcb  \n"
  52:Core/Src/task.c ****         ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
  53:Core/Src/task.c ****     );
  54:Core/Src/task.c **** }
  55:Core/Src/task.c **** //SCV handler
  56:Core/Src/task.c **** __attribute__((naked)) void vPortSVCHandler( void )
  57:Core/Src/task.c **** {
  58:Core/Src/task.c ****     __asm volatile (
  59:Core/Src/task.c ****         "   ldr r3, pxCurrentTCBConst2      \n" /* Restore the context. */
  60:Core/Src/task.c ****         "   ldr r1, [r3]                    \n" /* Use pxCurrentTCBConst to get the pxCurrentTCB ad
  61:Core/Src/task.c ****         "   ldr r0, [r1]                    \n" /* The first item in pxCurrentTCB is the task top o
  62:Core/Src/task.c ****         "   ldmia r0!, {r4-r11}             \n" /* Pop the registers that are not automatically sav
  63:Core/Src/task.c ****         "   msr psp, r0                     \n" /* Restore the task stack pointer. */
  64:Core/Src/task.c ****         "   isb                             \n"
  65:Core/Src/task.c ****         "   mov r0, #0                      \n"
  66:Core/Src/task.c ****         "   msr basepri, r0                 \n"
  67:Core/Src/task.c ****         "   orr r14, #0xd                   \n"
  68:Core/Src/task.c ****         "   bx r14                          \n"
  69:Core/Src/task.c ****         "                                   \n"
  70:Core/Src/task.c ****         "   .align 4                        \n"
  71:Core/Src/task.c ****         "pxCurrentTCBConst2: .word current_tcb             \n"
  72:Core/Src/task.c ****         );
  73:Core/Src/task.c **** }
  74:Core/Src/task.c **** 
  75:Core/Src/task.c **** 
  76:Core/Src/task.c **** 
  77:Core/Src/task.c **** 
  78:Core/Src/task.c **** static void increment_tick(void);
  79:Core/Src/task.c **** void SysTick_Handler(void)
  80:Core/Src/task.c **** {
  81:Core/Src/task.c ****     uint32_t ret = critical_enter();
  82:Core/Src/task.c ****     //increment_ticks();
  83:Core/Src/task.c ****     critical_exit(ret);
  84:Core/Src/task.c **** }
  85:Core/Src/task.c **** 
  86:Core/Src/task.c **** 
  87:Core/Src/task.c **** //start the first task
  88:Core/Src/task.c **** __attribute__((always_inline)) inline static void StartFirstTask( void )
  89:Core/Src/task.c **** {
  90:Core/Src/task.c ****     ( *( ( volatile uint32_t * ) 0xe000ed20 ) ) |= ( ( ( uint32_t ) 255UL ) << 16UL );
ARM GAS  /tmp/cciKPolz.s 			page 3


  91:Core/Src/task.c ****     ( *( ( volatile uint32_t * ) 0xe000ed20 ) ) |= ( ( ( uint32_t ) 255UL ) << 24UL );
  92:Core/Src/task.c ****     SysTick->CTRL = 0UL;
  93:Core/Src/task.c ****     SysTick->VAL  = 0UL;
  94:Core/Src/task.c ****     SysTick->LOAD = (configSysTickClockHz / configSysTickClockRateHz) - 1UL;
  95:Core/Src/task.c ****     SysTick->CTRL = ( ( 1UL << 2UL ) | ( 1UL << 1UL ) | ( 1UL << 0UL ) );
  96:Core/Src/task.c ****     __asm volatile (
  97:Core/Src/task.c ****         " ldr r0, =0xE000ED08   \n" /* Use the NVIC offset register to locate the stack. */
  98:Core/Src/task.c ****         " ldr r0, [r0]          \n" " ldr r0, [r0]          \n"
  99:Core/Src/task.c ****         " msr msp, r0           \n" /* Set the msp back to the start of the stack. */
 100:Core/Src/task.c ****         " cpsie i               \n" /* Globally enable interrupts. */
 101:Core/Src/task.c ****         " cpsie f               \n"
 102:Core/Src/task.c ****         " dsb                   \n"
 103:Core/Src/task.c ****         " isb                   \n"
 104:Core/Src/task.c ****         " svc 0                 \n" /* System call to start first task. */
 105:Core/Src/task.c ****         " nop                   \n"
 106:Core/Src/task.c ****         " .ltorg                \n"
 107:Core/Src/task.c ****         );
 108:Core/Src/task.c **** }
 109:Core/Src/task.c **** 
 110:Core/Src/task.c **** 
 111:Core/Src/task.c **** void add_to_ready_list(task_handler_t* handler, uint32_t priority){
 112:Core/Src/task.c ****     if(priority < max_priority)
 113:Core/Src/task.c ****         max_priority = priority;
 114:Core/Src/task.c ****     ready_bits |= (1 << priority);
 115:Core/Src/task.c ****     ready_list[priority] = *handler;
 116:Core/Src/task.c **** }
 117:Core/Src/task.c **** 
 118:Core/Src/task.c **** 
 119:Core/Src/task.c **** void task_create(task_func_t func, void* func_parameters, uint32_t stack_depth,
 120:Core/Src/task.c ****                  uint32_t priority, task_handler_t* handler) {
 121:Core/Src/task.c ****     tcb_t* new_tcb;
 122:Core/Src/task.c ****     uint32_t* stack_top;
 123:Core/Src/task.c ****     //allocate memory for the tcb and stack
 124:Core/Src/task.c ****     new_tcb = (tcb_t*)halloc(sizeof(tcb_t));
 125:Core/Src/task.c ****     new_tcb->stack= (uint32_t*)halloc((size_t)stack_depth * sizeof(uint32_t));
 126:Core/Src/task.c ****     //get the stack top addresss and align
 127:Core/Src/task.c ****     stack_top = new_tcb->stack + (stack_depth - (uint32_t)1);
 128:Core/Src/task.c ****     stack_top = (uint32_t*)((uint32_t)stack_top & ~(uint32_t)(alignment_byte));
 129:Core/Src/task.c ****     //initialize the stack
 130:Core/Src/task.c ****     new_tcb->stack_top = stack_init(stack_top, func, func_parameters);
 131:Core/Src/task.c ****     //set the task handler
 132:Core/Src/task.c ****     *handler = (task_handler_t)new_tcb;
 133:Core/Src/task.c ****     //put the tcb into task table
 134:Core/Src/task.c ****     add_to_ready_list(handler, priority);
 135:Core/Src/task.c **** }
 136:Core/Src/task.c **** 
 137:Core/Src/task.c **** static void task_exit_error(){
  26              		.loc 1 137 30 view -0
  27              		.cfi_startproc
  28              		@ Volatile: function does not return.
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.L2:
 138:Core/Src/task.c ****     while(1){
  33              		.loc 1 138 5 view .LVU1
 139:Core/Src/task.c ****     }
ARM GAS  /tmp/cciKPolz.s 			page 4


  34              		.loc 1 139 5 view .LVU2
 138:Core/Src/task.c ****     while(1){
  35              		.loc 1 138 10 view .LVU3
  36 0000 FEE7     		b	.L2
  37              		.cfi_endproc
  38              	.LFE71:
  40              		.section	.text.idle_task,"ax",%progbits
  41              		.align	1
  42              		.global	idle_task
  43              		.syntax unified
  44              		.thumb
  45              		.thumb_func
  47              	idle_task:
  48              	.LFB73:
 140:Core/Src/task.c **** }
 141:Core/Src/task.c **** 
 142:Core/Src/task.c **** uint32_t* stack_init(uint32_t* stack_top, task_func_t func,void* parameters){
 143:Core/Src/task.c ****     //set the XPSR
 144:Core/Src/task.c ****     stack_top--;
 145:Core/Src/task.c ****     *stack_top = INITIAL_XPSR;
 146:Core/Src/task.c ****     //set the task func
 147:Core/Src/task.c ****     stack_top--;
 148:Core/Src/task.c ****     *stack_top = (uint32_t)func & (uint32_t)START_ADDRESS_MASK;
 149:Core/Src/task.c ****     //set the error handler
 150:Core/Src/task.c ****     stack_top--;
 151:Core/Src/task.c ****     *stack_top = (uint32_t)task_exit_error;
 152:Core/Src/task.c ****     //set the r12, r1-3 to zero, and set r0 to parameters
 153:Core/Src/task.c ****     stack_top -= 5;
 154:Core/Src/task.c ****     *stack_top = (uint32_t)parameters;
 155:Core/Src/task.c ****     //leave space for r4-r11
 156:Core/Src/task.c ****     stack_top -= 8;
 157:Core/Src/task.c ****     return stack_top;
 158:Core/Src/task.c **** }
 159:Core/Src/task.c **** 
 160:Core/Src/task.c **** uint32_t enter_idle = 0;
 161:Core/Src/task.c **** void idle_task(){
  49              		.loc 1 161 17 view -0
  50              		.cfi_startproc
  51              		@ Volatile: function does not return.
  52              		@ args = 0, pretend = 0, frame = 0
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54              		@ link register save eliminated.
  55              	.L4:
 162:Core/Src/task.c ****     while(1){
  56              		.loc 1 162 5 view .LVU5
 163:Core/Src/task.c ****         enter_idle++;
  57              		.loc 1 163 9 view .LVU6
  58              		.loc 1 163 19 is_stmt 0 view .LVU7
  59 0000 054A     		ldr	r2, .L5
  60 0002 1368     		ldr	r3, [r2]
  61 0004 0133     		adds	r3, r3, #1
  62 0006 1360     		str	r3, [r2]
 164:Core/Src/task.c ****         task_switch();
  63              		.loc 1 164 9 is_stmt 1 discriminator 1 view .LVU8
  64 0008 4FF0E023 		mov	r3, #-536813568
  65 000c 4FF08052 		mov	r2, #268435456
  66 0010 C3F8042D 		str	r2, [r3, #3332]
ARM GAS  /tmp/cciKPolz.s 			page 5


 162:Core/Src/task.c ****     while(1){
  67              		.loc 1 162 10 view .LVU9
  68 0014 F4E7     		b	.L4
  69              	.L6:
  70 0016 00BF     		.align	2
  71              	.L5:
  72 0018 00000000 		.word	enter_idle
  73              		.cfi_endproc
  74              	.LFE73:
  76              		.section	.text.delay_list_init,"ax",%progbits
  77              		.align	1
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  82              	delay_list_init:
  83              	.LFB80:
 165:Core/Src/task.c ****     }
 166:Core/Src/task.c **** }
 167:Core/Src/task.c **** 
 168:Core/Src/task.c **** static void delay_list_init(void);
 169:Core/Src/task.c **** void scheduler_init( void )
 170:Core/Src/task.c **** {
 171:Core/Src/task.c ****     current_tick_count = 0;
 172:Core/Src/task.c ****     delay_list_init();
 173:Core/Src/task.c ****     task_create(idle_task, NULL, 64, 0, &idle_task_handler);
 174:Core/Src/task.c ****     current_tcb = idle_task_handler;
 175:Core/Src/task.c **** }
 176:Core/Src/task.c **** 
 177:Core/Src/task.c **** void scheduler_start(void){
 178:Core/Src/task.c ****     StartFirstTask();
 179:Core/Src/task.c **** }
 180:Core/Src/task.c **** 
 181:Core/Src/task.c **** static inline uint8_t get_highest_priority(void);
 182:Core/Src/task.c **** void vTaskSwitchContext(void){
 183:Core/Src/task.c ****     current_tcb = ready_list[get_highest_priority()];
 184:Core/Src/task.c **** }
 185:Core/Src/task.c **** 
 186:Core/Src/task.c **** __attribute__((always_inline)) inline uint32_t  critical_enter( void )
 187:Core/Src/task.c **** {
 188:Core/Src/task.c ****     uint32_t ret;
 189:Core/Src/task.c ****     uint32_t temp;
 190:Core/Src/task.c ****     __asm volatile(
 191:Core/Src/task.c ****             " cpsid i               \n"
 192:Core/Src/task.c ****             " mrs %0, basepri       \n"
 193:Core/Src/task.c ****             " mov %1, %2            \n"
 194:Core/Src/task.c ****             " msr basepri, %1       \n"
 195:Core/Src/task.c ****             " dsb                   \n"
 196:Core/Src/task.c ****             " isb                   \n"
 197:Core/Src/task.c ****             " cpsie i               \n"
 198:Core/Src/task.c ****             : "=r" (ret), "=r"(temp)
 199:Core/Src/task.c ****             : "r" (configMAX_SYSCALL_INTERRUPT_PRIORITY)
 200:Core/Src/task.c ****             : "memory"
 201:Core/Src/task.c ****             );
 202:Core/Src/task.c ****     return ret;
 203:Core/Src/task.c **** }
 204:Core/Src/task.c **** 
 205:Core/Src/task.c **** __attribute__((always_inline)) inline void critical_exit(uint32_t ret)
ARM GAS  /tmp/cciKPolz.s 			page 6


 206:Core/Src/task.c **** {
 207:Core/Src/task.c ****     __asm volatile(
 208:Core/Src/task.c ****             " cpsid i               \n"
 209:Core/Src/task.c ****             " msr basepri, %0       \n"
 210:Core/Src/task.c ****             " dsb                   \n"
 211:Core/Src/task.c ****             " isb                   \n"
 212:Core/Src/task.c ****             " cpsie i               \n"
 213:Core/Src/task.c ****             :: "r" (ret)
 214:Core/Src/task.c ****             : "memory"
 215:Core/Src/task.c ****             );
 216:Core/Src/task.c **** }
 217:Core/Src/task.c **** 
 218:Core/Src/task.c **** __attribute__( ( always_inline ) ) static inline uint8_t get_highest_priority( void )
 219:Core/Src/task.c **** {
 220:Core/Src/task.c ****     uint8_t top_zero;
 221:Core/Src/task.c ****     uint8_t temp;
 222:Core/Src/task.c ****     __asm volatile
 223:Core/Src/task.c ****             (
 224:Core/Src/task.c ****             "clz %0, %2\n"
 225:Core/Src/task.c ****             "mov %1, #31\n"
 226:Core/Src/task.c ****             "sub %0, %1, %0\n"
 227:Core/Src/task.c ****             :"=r" (top_zero),"=r"(temp)
 228:Core/Src/task.c ****             :"r" (ready_bits)
 229:Core/Src/task.c ****             );
 230:Core/Src/task.c ****     return top_zero;
 231:Core/Src/task.c **** }
 232:Core/Src/task.c **** 
 233:Core/Src/task.c **** static void delay_list_init(void){
  84              		.loc 1 233 34 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		@ link register save eliminated.
 234:Core/Src/task.c ****     current_tick_count = 0;
  89              		.loc 1 234 5 view .LVU11
  90              		.loc 1 234 24 is_stmt 0 view .LVU12
  91 0000 044B     		ldr	r3, .L8
  92 0002 0022     		movs	r2, #0
  93 0004 1A60     		str	r2, [r3]
 235:Core/Src/task.c ****     delay_list = delay_lst;
  94              		.loc 1 235 5 is_stmt 1 view .LVU13
  95              		.loc 1 235 16 is_stmt 0 view .LVU14
  96 0006 044B     		ldr	r3, .L8+4
  97 0008 044A     		ldr	r2, .L8+8
  98 000a 1A60     		str	r2, [r3]
 236:Core/Src/task.c ****     delay_overflow_list = delay_overflow_lst;
  99              		.loc 1 236 5 is_stmt 1 view .LVU15
 100              		.loc 1 236 25 is_stmt 0 view .LVU16
 101 000c 044B     		ldr	r3, .L8+12
 102 000e 054A     		ldr	r2, .L8+16
 103 0010 1A60     		str	r2, [r3]
 237:Core/Src/task.c **** }
 104              		.loc 1 237 1 view .LVU17
 105 0012 7047     		bx	lr
 106              	.L9:
 107              		.align	2
 108              	.L8:
ARM GAS  /tmp/cciKPolz.s 			page 7


 109 0014 00000000 		.word	current_tick_count
 110 0018 00000000 		.word	delay_list
 111 001c 00000000 		.word	delay_lst
 112 0020 00000000 		.word	delay_overflow_list
 113 0024 00000000 		.word	delay_overflow_lst
 114              		.cfi_endproc
 115              	.LFE80:
 117              		.section	.text.PendSV_Handler,"ax",%progbits
 118              		.align	1
 119              		.global	PendSV_Handler
 120              		.syntax unified
 121              		.thumb
 122              		.thumb_func
 124              	PendSV_Handler:
 125              	.LFB65:
  23:Core/Src/task.c ****     __asm volatile
 126              		.loc 1 23 1 is_stmt 1 view -0
 127              		.cfi_startproc
 128              		@ Naked Function: prologue and epilogue provided by programmer.
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
  24:Core/Src/task.c ****     (
 131              		.loc 1 24 5 view .LVU19
 132              		.syntax unified
 133              	@ 24 "Core/Src/task.c" 1
 134 0000 EFF30980 		   mrs r0, psp                         
 135 0004 BFF36F8F 	   isb                                 
 136              	                                       
 137 0008 0D4B     	   ldr r3, pxCurrentTCBConst           
 138 000a 1A68     	   ldr r2, [r3]                        
 139              	                                       
 140 000c 20E9F00F 	   stmdb r0!, {r4-r11}                 
 141 0010 1060     	   str r0, [r2]                        
 142              	                                       
 143 0012 2DE90840 	   stmdb sp!, {r3, r14}                
 144 0016 4FF0BF00 	   mov r0, #191                          
 145 001a 80F31188 	   msr basepri, r0                     
 146 001e FFF7FEFF 	   bl vTaskSwitchContext               
 147 0022 4FF00000 	   mov r0, #0                          
 148 0026 80F31188 	   msr basepri, r0                     
 149 002a BDE80840 	   ldmia sp!, {r3, r14}                
 150              	                                       
 151 002e 1968     	   ldr r1, [r3]                        
 152 0030 0868     	   ldr r0, [r1]                        
 153 0032 B0E8F00F 	   ldmia r0!, {r4-r11}                 
 154 0036 80F30988 	   msr psp, r0                         
 155 003a BFF36F8F 	   isb                                 
 156 003e 7047     	   bx r14                              
 157              	                                       
 158              	   .align 4                            
 159 0040 00000000 	pxCurrentTCBConst: .word current_tcb  
 160              	
 161              	@ 0 "" 2
  54:Core/Src/task.c **** //SCV handler
 162              		.loc 1 54 1 is_stmt 0 view .LVU20
 163              		.thumb
 164              		.syntax unified
ARM GAS  /tmp/cciKPolz.s 			page 8


 165              		.cfi_endproc
 166              	.LFE65:
 168              		.section	.text.SVC_Handler,"ax",%progbits
 169              		.align	1
 170              		.global	SVC_Handler
 171              		.syntax unified
 172              		.thumb
 173              		.thumb_func
 175              	SVC_Handler:
 176              	.LFB66:
  57:Core/Src/task.c ****     __asm volatile (
 177              		.loc 1 57 1 is_stmt 1 view -0
 178              		.cfi_startproc
 179              		@ Naked Function: prologue and epilogue provided by programmer.
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
  58:Core/Src/task.c ****         "   ldr r3, pxCurrentTCBConst2      \n" /* Restore the context. */
 182              		.loc 1 58 5 view .LVU22
 183              		.syntax unified
 184              	@ 58 "Core/Src/task.c" 1
 185 0000 074B     		   ldr r3, pxCurrentTCBConst2      
 186 0002 1968     	   ldr r1, [r3]                    
 187 0004 0868     	   ldr r0, [r1]                    
 188 0006 B0E8F00F 	   ldmia r0!, {r4-r11}             
 189 000a 80F30988 	   msr psp, r0                     
 190 000e BFF36F8F 	   isb                             
 191 0012 4FF00000 	   mov r0, #0                      
 192 0016 80F31188 	   msr basepri, r0                 
 193 001a 4EF00D0E 	   orr r14, #0xd                   
 194 001e 7047     	   bx r14                          
 195              	                                   
 196              	   .align 4                        
 197 0020 00000000 	pxCurrentTCBConst2: .word current_tcb             
 198              	
 199              	@ 0 "" 2
  73:Core/Src/task.c **** 
 200              		.loc 1 73 1 is_stmt 0 view .LVU23
 201              		.thumb
 202              		.syntax unified
 203              		.cfi_endproc
 204              	.LFE66:
 206              		.section	.text.SysTick_Handler,"ax",%progbits
 207              		.align	1
 208              		.global	SysTick_Handler
 209              		.syntax unified
 210              		.thumb
 211              		.thumb_func
 213              	SysTick_Handler:
 214              	.LFB67:
  80:Core/Src/task.c ****     uint32_t ret = critical_enter();
 215              		.loc 1 80 1 is_stmt 1 view -0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219              		@ link register save eliminated.
  81:Core/Src/task.c ****     //increment_ticks();
 220              		.loc 1 81 5 view .LVU25
ARM GAS  /tmp/cciKPolz.s 			page 9


 221              	.LBB10:
 222              	.LBI10:
 186:Core/Src/task.c **** {
 223              		.loc 1 186 49 view .LVU26
 224              	.LBB11:
 188:Core/Src/task.c ****     uint32_t temp;
 225              		.loc 1 188 5 view .LVU27
 189:Core/Src/task.c ****     __asm volatile(
 226              		.loc 1 189 5 view .LVU28
 190:Core/Src/task.c ****             " cpsid i               \n"
 227              		.loc 1 190 5 view .LVU29
 228 0000 BF23     		movs	r3, #191
 229              		.syntax unified
 230              	@ 190 "Core/Src/task.c" 1
 231 0002 72B6     		 cpsid i               
 232 0004 EFF31183 	 mrs r3, basepri       
 233 0008 1A46     	 mov r2, r3            
 234 000a 82F31188 	 msr basepri, r2       
 235 000e BFF34F8F 	 dsb                   
 236 0012 BFF36F8F 	 isb                   
 237 0016 62B6     	 cpsie i               
 238              	
 239              	@ 0 "" 2
 240              	.LVL0:
 202:Core/Src/task.c **** }
 241              		.loc 1 202 5 view .LVU30
 202:Core/Src/task.c **** }
 242              		.loc 1 202 5 is_stmt 0 view .LVU31
 243              		.thumb
 244              		.syntax unified
 245              	.LBE11:
 246              	.LBE10:
  83:Core/Src/task.c **** }
 247              		.loc 1 83 5 is_stmt 1 view .LVU32
 248              	.LBB12:
 249              	.LBI12:
 205:Core/Src/task.c **** {
 250              		.loc 1 205 44 view .LVU33
 251              	.LBB13:
 207:Core/Src/task.c ****             " cpsid i               \n"
 252              		.loc 1 207 5 view .LVU34
 253              		.syntax unified
 254              	@ 207 "Core/Src/task.c" 1
 255 0018 72B6     		 cpsid i               
 256 001a 83F31188 	 msr basepri, r3       
 257 001e BFF34F8F 	 dsb                   
 258 0022 BFF36F8F 	 isb                   
 259 0026 62B6     	 cpsie i               
 260              	
 261              	@ 0 "" 2
 262              	.LVL1:
 207:Core/Src/task.c ****             " cpsid i               \n"
 263              		.loc 1 207 5 is_stmt 0 view .LVU35
 264              		.thumb
 265              		.syntax unified
 266              	.LBE13:
 267              	.LBE12:
ARM GAS  /tmp/cciKPolz.s 			page 10


  84:Core/Src/task.c **** 
 268              		.loc 1 84 1 view .LVU36
 269 0028 7047     		bx	lr
 270              		.cfi_endproc
 271              	.LFE67:
 273              		.section	.text.add_to_ready_list,"ax",%progbits
 274              		.align	1
 275              		.global	add_to_ready_list
 276              		.syntax unified
 277              		.thumb
 278              		.thumb_func
 280              	add_to_ready_list:
 281              	.LVL2:
 282              	.LFB69:
 111:Core/Src/task.c ****     if(priority < max_priority)
 283              		.loc 1 111 67 is_stmt 1 view -0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287              		@ link register save eliminated.
 111:Core/Src/task.c ****     if(priority < max_priority)
 288              		.loc 1 111 67 is_stmt 0 view .LVU38
 289 0000 10B4     		push	{r4}
 290              	.LCFI0:
 291              		.cfi_def_cfa_offset 4
 292              		.cfi_offset 4, -4
 112:Core/Src/task.c ****         max_priority = priority;
 293              		.loc 1 112 5 is_stmt 1 view .LVU39
 112:Core/Src/task.c ****         max_priority = priority;
 294              		.loc 1 112 17 is_stmt 0 view .LVU40
 295 0002 094B     		ldr	r3, .L16
 296 0004 1B68     		ldr	r3, [r3]
 112:Core/Src/task.c ****         max_priority = priority;
 297              		.loc 1 112 7 view .LVU41
 298 0006 8B42     		cmp	r3, r1
 299 0008 01D9     		bls	.L14
 113:Core/Src/task.c ****     ready_bits |= (1 << priority);
 300              		.loc 1 113 9 is_stmt 1 view .LVU42
 113:Core/Src/task.c ****     ready_bits |= (1 << priority);
 301              		.loc 1 113 22 is_stmt 0 view .LVU43
 302 000a 074B     		ldr	r3, .L16
 303 000c 1960     		str	r1, [r3]
 304              	.L14:
 114:Core/Src/task.c ****     ready_list[priority] = *handler;
 305              		.loc 1 114 5 is_stmt 1 view .LVU44
 114:Core/Src/task.c ****     ready_list[priority] = *handler;
 306              		.loc 1 114 22 is_stmt 0 view .LVU45
 307 000e 0122     		movs	r2, #1
 308 0010 8A40     		lsls	r2, r2, r1
 114:Core/Src/task.c ****     ready_list[priority] = *handler;
 309              		.loc 1 114 16 view .LVU46
 310 0012 064C     		ldr	r4, .L16+4
 311 0014 2368     		ldr	r3, [r4]
 312 0016 1343     		orrs	r3, r3, r2
 313 0018 2360     		str	r3, [r4]
 115:Core/Src/task.c **** }
 314              		.loc 1 115 5 is_stmt 1 view .LVU47
ARM GAS  /tmp/cciKPolz.s 			page 11


 115:Core/Src/task.c **** }
 315              		.loc 1 115 28 is_stmt 0 view .LVU48
 316 001a 0268     		ldr	r2, [r0]
 115:Core/Src/task.c **** }
 317              		.loc 1 115 26 view .LVU49
 318 001c 044B     		ldr	r3, .L16+8
 319 001e 43F82120 		str	r2, [r3, r1, lsl #2]
 116:Core/Src/task.c **** 
 320              		.loc 1 116 1 view .LVU50
 321 0022 10BC     		pop	{r4}
 322              	.LCFI1:
 323              		.cfi_restore 4
 324              		.cfi_def_cfa_offset 0
 325 0024 7047     		bx	lr
 326              	.L17:
 327 0026 00BF     		.align	2
 328              	.L16:
 329 0028 00000000 		.word	max_priority
 330 002c 00000000 		.word	ready_bits
 331 0030 00000000 		.word	ready_list
 332              		.cfi_endproc
 333              	.LFE69:
 335              		.section	.text.stack_init,"ax",%progbits
 336              		.align	1
 337              		.global	stack_init
 338              		.syntax unified
 339              		.thumb
 340              		.thumb_func
 342              	stack_init:
 343              	.LVL3:
 344              	.LFB72:
 142:Core/Src/task.c ****     //set the XPSR
 345              		.loc 1 142 77 is_stmt 1 view -0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 0
 348              		@ frame_needed = 0, uses_anonymous_args = 0
 349              		@ link register save eliminated.
 144:Core/Src/task.c ****     *stack_top = INITIAL_XPSR;
 350              		.loc 1 144 5 view .LVU52
 145:Core/Src/task.c ****     //set the task func
 351              		.loc 1 145 5 view .LVU53
 145:Core/Src/task.c ****     //set the task func
 352              		.loc 1 145 16 is_stmt 0 view .LVU54
 353 0000 4FF08073 		mov	r3, #16777216
 354 0004 40F8043C 		str	r3, [r0, #-4]
 147:Core/Src/task.c ****     *stack_top = (uint32_t)func & (uint32_t)START_ADDRESS_MASK;
 355              		.loc 1 147 5 is_stmt 1 view .LVU55
 356              	.LVL4:
 148:Core/Src/task.c ****     //set the error handler
 357              		.loc 1 148 5 view .LVU56
 148:Core/Src/task.c ****     //set the error handler
 358              		.loc 1 148 33 is_stmt 0 view .LVU57
 359 0008 21F00101 		bic	r1, r1, #1
 360              	.LVL5:
 148:Core/Src/task.c ****     //set the error handler
 361              		.loc 1 148 16 view .LVU58
 362 000c 40F8081C 		str	r1, [r0, #-8]
ARM GAS  /tmp/cciKPolz.s 			page 12


 150:Core/Src/task.c ****     *stack_top = (uint32_t)task_exit_error;
 363              		.loc 1 150 5 is_stmt 1 view .LVU59
 364              	.LVL6:
 151:Core/Src/task.c ****     //set the r12, r1-3 to zero, and set r0 to parameters
 365              		.loc 1 151 5 view .LVU60
 151:Core/Src/task.c ****     //set the r12, r1-3 to zero, and set r0 to parameters
 366              		.loc 1 151 18 is_stmt 0 view .LVU61
 367 0010 034B     		ldr	r3, .L19
 151:Core/Src/task.c ****     //set the r12, r1-3 to zero, and set r0 to parameters
 368              		.loc 1 151 16 view .LVU62
 369 0012 40F80C3C 		str	r3, [r0, #-12]
 153:Core/Src/task.c ****     *stack_top = (uint32_t)parameters;
 370              		.loc 1 153 5 is_stmt 1 view .LVU63
 371              	.LVL7:
 154:Core/Src/task.c ****     //leave space for r4-r11
 372              		.loc 1 154 5 view .LVU64
 154:Core/Src/task.c ****     //leave space for r4-r11
 373              		.loc 1 154 16 is_stmt 0 view .LVU65
 374 0016 40F8202C 		str	r2, [r0, #-32]
 156:Core/Src/task.c ****     return stack_top;
 375              		.loc 1 156 5 is_stmt 1 view .LVU66
 376              	.LVL8:
 157:Core/Src/task.c **** }
 377              		.loc 1 157 5 view .LVU67
 158:Core/Src/task.c **** 
 378              		.loc 1 158 1 is_stmt 0 view .LVU68
 379 001a 4038     		subs	r0, r0, #64
 380              	.LVL9:
 158:Core/Src/task.c **** 
 381              		.loc 1 158 1 view .LVU69
 382 001c 7047     		bx	lr
 383              	.L20:
 384 001e 00BF     		.align	2
 385              	.L19:
 386 0020 00000000 		.word	task_exit_error
 387              		.cfi_endproc
 388              	.LFE72:
 390              		.section	.text.task_create,"ax",%progbits
 391              		.align	1
 392              		.global	task_create
 393              		.syntax unified
 394              		.thumb
 395              		.thumb_func
 397              	task_create:
 398              	.LVL10:
 399              	.LFB70:
 120:Core/Src/task.c ****     tcb_t* new_tcb;
 400              		.loc 1 120 62 is_stmt 1 view -0
 401              		.cfi_startproc
 402              		@ args = 4, pretend = 0, frame = 0
 403              		@ frame_needed = 0, uses_anonymous_args = 0
 120:Core/Src/task.c ****     tcb_t* new_tcb;
 404              		.loc 1 120 62 is_stmt 0 view .LVU71
 405 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 406              	.LCFI2:
 407              		.cfi_def_cfa_offset 32
 408              		.cfi_offset 3, -32
ARM GAS  /tmp/cciKPolz.s 			page 13


 409              		.cfi_offset 4, -28
 410              		.cfi_offset 5, -24
 411              		.cfi_offset 6, -20
 412              		.cfi_offset 7, -16
 413              		.cfi_offset 8, -12
 414              		.cfi_offset 9, -8
 415              		.cfi_offset 14, -4
 416 0004 0646     		mov	r6, r0
 417 0006 0F46     		mov	r7, r1
 418 0008 9146     		mov	r9, r2
 419 000a 1D46     		mov	r5, r3
 420 000c DDF82080 		ldr	r8, [sp, #32]
 121:Core/Src/task.c ****     uint32_t* stack_top;
 421              		.loc 1 121 5 is_stmt 1 view .LVU72
 122:Core/Src/task.c ****     //allocate memory for the tcb and stack
 422              		.loc 1 122 5 view .LVU73
 124:Core/Src/task.c ****     new_tcb->stack= (uint32_t*)halloc((size_t)stack_depth * sizeof(uint32_t));
 423              		.loc 1 124 5 view .LVU74
 124:Core/Src/task.c ****     new_tcb->stack= (uint32_t*)halloc((size_t)stack_depth * sizeof(uint32_t));
 424              		.loc 1 124 23 is_stmt 0 view .LVU75
 425 0010 0C20     		movs	r0, #12
 426              	.LVL11:
 124:Core/Src/task.c ****     new_tcb->stack= (uint32_t*)halloc((size_t)stack_depth * sizeof(uint32_t));
 427              		.loc 1 124 23 view .LVU76
 428 0012 FFF7FEFF 		bl	halloc
 429              	.LVL12:
 124:Core/Src/task.c ****     new_tcb->stack= (uint32_t*)halloc((size_t)stack_depth * sizeof(uint32_t));
 430              		.loc 1 124 23 view .LVU77
 431 0016 0446     		mov	r4, r0
 432              	.LVL13:
 125:Core/Src/task.c ****     //get the stack top addresss and align
 433              		.loc 1 125 5 is_stmt 1 view .LVU78
 125:Core/Src/task.c ****     //get the stack top addresss and align
 434              		.loc 1 125 32 is_stmt 0 view .LVU79
 435 0018 4FEA8900 		lsl	r0, r9, #2
 436              	.LVL14:
 125:Core/Src/task.c ****     //get the stack top addresss and align
 437              		.loc 1 125 32 view .LVU80
 438 001c FFF7FEFF 		bl	halloc
 439              	.LVL15:
 125:Core/Src/task.c ****     //get the stack top addresss and align
 440              		.loc 1 125 19 discriminator 1 view .LVU81
 441 0020 A060     		str	r0, [r4, #8]
 127:Core/Src/task.c ****     stack_top = (uint32_t*)((uint32_t)stack_top & ~(uint32_t)(alignment_byte));
 442              		.loc 1 127 5 is_stmt 1 view .LVU82
 127:Core/Src/task.c ****     stack_top = (uint32_t*)((uint32_t)stack_top & ~(uint32_t)(alignment_byte));
 443              		.loc 1 127 32 is_stmt 0 view .LVU83
 444 0022 09F18042 		add	r2, r9, #1073741824
 445 0026 013A     		subs	r2, r2, #1
 127:Core/Src/task.c ****     stack_top = (uint32_t*)((uint32_t)stack_top & ~(uint32_t)(alignment_byte));
 446              		.loc 1 127 15 view .LVU84
 447 0028 00EB8200 		add	r0, r0, r2, lsl #2
 448              	.LVL16:
 128:Core/Src/task.c ****     //initialize the stack
 449              		.loc 1 128 5 is_stmt 1 view .LVU85
 130:Core/Src/task.c ****     //set the task handler
 450              		.loc 1 130 5 view .LVU86
ARM GAS  /tmp/cciKPolz.s 			page 14


 130:Core/Src/task.c ****     //set the task handler
 451              		.loc 1 130 26 is_stmt 0 view .LVU87
 452 002c 3A46     		mov	r2, r7
 453 002e 3146     		mov	r1, r6
 454 0030 20F00700 		bic	r0, r0, #7
 455              	.LVL17:
 130:Core/Src/task.c ****     //set the task handler
 456              		.loc 1 130 26 view .LVU88
 457 0034 FFF7FEFF 		bl	stack_init
 458              	.LVL18:
 130:Core/Src/task.c ****     //set the task handler
 459              		.loc 1 130 24 discriminator 1 view .LVU89
 460 0038 2060     		str	r0, [r4]
 132:Core/Src/task.c ****     //put the tcb into task table
 461              		.loc 1 132 5 is_stmt 1 view .LVU90
 132:Core/Src/task.c ****     //put the tcb into task table
 462              		.loc 1 132 14 is_stmt 0 view .LVU91
 463 003a C8F80040 		str	r4, [r8]
 134:Core/Src/task.c **** }
 464              		.loc 1 134 5 is_stmt 1 view .LVU92
 465 003e 2946     		mov	r1, r5
 466 0040 4046     		mov	r0, r8
 467 0042 FFF7FEFF 		bl	add_to_ready_list
 468              	.LVL19:
 135:Core/Src/task.c **** 
 469              		.loc 1 135 1 is_stmt 0 view .LVU93
 470 0046 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 135:Core/Src/task.c **** 
 471              		.loc 1 135 1 view .LVU94
 472              		.cfi_endproc
 473              	.LFE70:
 475              		.section	.text.scheduler_init,"ax",%progbits
 476              		.align	1
 477              		.global	scheduler_init
 478              		.syntax unified
 479              		.thumb
 480              		.thumb_func
 482              	scheduler_init:
 483              	.LFB74:
 170:Core/Src/task.c ****     current_tick_count = 0;
 484              		.loc 1 170 1 is_stmt 1 view -0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 0
 487              		@ frame_needed = 0, uses_anonymous_args = 0
 488 0000 30B5     		push	{r4, r5, lr}
 489              	.LCFI3:
 490              		.cfi_def_cfa_offset 12
 491              		.cfi_offset 4, -12
 492              		.cfi_offset 5, -8
 493              		.cfi_offset 14, -4
 494 0002 83B0     		sub	sp, sp, #12
 495              	.LCFI4:
 496              		.cfi_def_cfa_offset 24
 171:Core/Src/task.c ****     delay_list_init();
 497              		.loc 1 171 5 view .LVU96
 171:Core/Src/task.c ****     delay_list_init();
 498              		.loc 1 171 24 is_stmt 0 view .LVU97
ARM GAS  /tmp/cciKPolz.s 			page 15


 499 0004 0024     		movs	r4, #0
 500 0006 084B     		ldr	r3, .L25
 501 0008 1C60     		str	r4, [r3]
 172:Core/Src/task.c ****     task_create(idle_task, NULL, 64, 0, &idle_task_handler);
 502              		.loc 1 172 5 is_stmt 1 view .LVU98
 503 000a FFF7FEFF 		bl	delay_list_init
 504              	.LVL20:
 173:Core/Src/task.c ****     current_tcb = idle_task_handler;
 505              		.loc 1 173 5 view .LVU99
 506 000e 074D     		ldr	r5, .L25+4
 507 0010 0095     		str	r5, [sp]
 508 0012 2346     		mov	r3, r4
 509 0014 4022     		movs	r2, #64
 510 0016 2146     		mov	r1, r4
 511 0018 0548     		ldr	r0, .L25+8
 512 001a FFF7FEFF 		bl	task_create
 513              	.LVL21:
 174:Core/Src/task.c **** }
 514              		.loc 1 174 5 view .LVU100
 174:Core/Src/task.c **** }
 515              		.loc 1 174 17 is_stmt 0 view .LVU101
 516 001e 2A68     		ldr	r2, [r5]
 517 0020 044B     		ldr	r3, .L25+12
 518 0022 1A60     		str	r2, [r3]
 175:Core/Src/task.c **** 
 519              		.loc 1 175 1 view .LVU102
 520 0024 03B0     		add	sp, sp, #12
 521              	.LCFI5:
 522              		.cfi_def_cfa_offset 12
 523              		@ sp needed
 524 0026 30BD     		pop	{r4, r5, pc}
 525              	.L26:
 526              		.align	2
 527              	.L25:
 528 0028 00000000 		.word	current_tick_count
 529 002c 00000000 		.word	idle_task_handler
 530 0030 00000000 		.word	idle_task
 531 0034 00000000 		.word	current_tcb
 532              		.cfi_endproc
 533              	.LFE74:
 535              		.section	.text.scheduler_start,"ax",%progbits
 536              		.align	1
 537              		.global	scheduler_start
 538              		.syntax unified
 539              		.thumb
 540              		.thumb_func
 542              	scheduler_start:
 543              	.LFB75:
 177:Core/Src/task.c ****     StartFirstTask();
 544              		.loc 1 177 27 is_stmt 1 view -0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548              		@ link register save eliminated.
 178:Core/Src/task.c **** }
 549              		.loc 1 178 5 view .LVU104
 550              	.LBB14:
ARM GAS  /tmp/cciKPolz.s 			page 16


 551              	.LBI14:
  88:Core/Src/task.c **** {
 552              		.loc 1 88 51 view .LVU105
 553              	.LBB15:
  90:Core/Src/task.c ****     ( *( ( volatile uint32_t * ) 0xe000ed20 ) ) |= ( ( ( uint32_t ) 255UL ) << 24UL );
 554              		.loc 1 90 5 view .LVU106
  90:Core/Src/task.c ****     ( *( ( volatile uint32_t * ) 0xe000ed20 ) ) |= ( ( ( uint32_t ) 255UL ) << 24UL );
 555              		.loc 1 90 7 is_stmt 0 view .LVU107
 556 0000 4FF0E023 		mov	r3, #-536813568
 557 0004 D3F8202D 		ldr	r2, [r3, #3360]
  90:Core/Src/task.c ****     ( *( ( volatile uint32_t * ) 0xe000ed20 ) ) |= ( ( ( uint32_t ) 255UL ) << 24UL );
 558              		.loc 1 90 49 view .LVU108
 559 0008 42F47F02 		orr	r2, r2, #16711680
 560 000c C3F8202D 		str	r2, [r3, #3360]
  91:Core/Src/task.c ****     SysTick->CTRL = 0UL;
 561              		.loc 1 91 5 is_stmt 1 view .LVU109
  91:Core/Src/task.c ****     SysTick->CTRL = 0UL;
 562              		.loc 1 91 7 is_stmt 0 view .LVU110
 563 0010 D3F8202D 		ldr	r2, [r3, #3360]
  91:Core/Src/task.c ****     SysTick->CTRL = 0UL;
 564              		.loc 1 91 49 view .LVU111
 565 0014 42F07F42 		orr	r2, r2, #-16777216
 566 0018 C3F8202D 		str	r2, [r3, #3360]
  92:Core/Src/task.c ****     SysTick->VAL  = 0UL;
 567              		.loc 1 92 5 is_stmt 1 view .LVU112
  92:Core/Src/task.c ****     SysTick->VAL  = 0UL;
 568              		.loc 1 92 19 is_stmt 0 view .LVU113
 569 001c 0022     		movs	r2, #0
 570 001e 1A61     		str	r2, [r3, #16]
  93:Core/Src/task.c ****     SysTick->LOAD = (configSysTickClockHz / configSysTickClockRateHz) - 1UL;
 571              		.loc 1 93 5 is_stmt 1 view .LVU114
  93:Core/Src/task.c ****     SysTick->LOAD = (configSysTickClockHz / configSysTickClockRateHz) - 1UL;
 572              		.loc 1 93 19 is_stmt 0 view .LVU115
 573 0020 9A61     		str	r2, [r3, #24]
  94:Core/Src/task.c ****     SysTick->CTRL = ( ( 1UL << 2UL ) | ( 1UL << 1UL ) | ( 1UL << 0UL ) );
 574              		.loc 1 94 5 is_stmt 1 view .LVU116
  94:Core/Src/task.c ****     SysTick->CTRL = ( ( 1UL << 2UL ) | ( 1UL << 1UL ) | ( 1UL << 0UL ) );
 575              		.loc 1 94 19 is_stmt 0 view .LVU117
 576 0022 41F61F42 		movw	r2, #7199
 577 0026 5A61     		str	r2, [r3, #20]
  95:Core/Src/task.c ****     __asm volatile (
 578              		.loc 1 95 5 is_stmt 1 view .LVU118
  95:Core/Src/task.c ****     __asm volatile (
 579              		.loc 1 95 19 is_stmt 0 view .LVU119
 580 0028 0722     		movs	r2, #7
 581 002a 1A61     		str	r2, [r3, #16]
  96:Core/Src/task.c ****         " ldr r0, =0xE000ED08   \n" /* Use the NVIC offset register to locate the stack. */
 582              		.loc 1 96 5 is_stmt 1 view .LVU120
 583              		.syntax unified
 584              	@ 96 "Core/Src/task.c" 1
 585 002c 0648     		 ldr r0, =0xE000ED08   
 586 002e 0068     	 ldr r0, [r0]          
 587 0030 0068     	 ldr r0, [r0]          
 588 0032 80F30888 	 msr msp, r0           
 589 0036 62B6     	 cpsie i               
 590 0038 61B6     	 cpsie f               
 591 003a BFF34F8F 	 dsb                   
ARM GAS  /tmp/cciKPolz.s 			page 17


 592 003e BFF36F8F 	 isb                   
 593 0042 00DF     	 svc 0                 
 594 0044 00BF     	 nop                   
 595 0046 000008ED 	 .ltorg                
 595      00E0
 596              	
 597              	@ 0 "" 2
 598              		.thumb
 599              		.syntax unified
 600              	.LBE15:
 601              	.LBE14:
 179:Core/Src/task.c **** 
 602              		.loc 1 179 1 is_stmt 0 view .LVU121
 603 004c 7047     		bx	lr
 604              		.cfi_endproc
 605              	.LFE75:
 607 004e 00BF     		.section	.text.vTaskSwitchContext,"ax",%progbits
 608              		.align	1
 609              		.global	vTaskSwitchContext
 610              		.syntax unified
 611              		.thumb
 612              		.thumb_func
 614              	vTaskSwitchContext:
 615              	.LFB76:
 182:Core/Src/task.c ****     current_tcb = ready_list[get_highest_priority()];
 616              		.loc 1 182 30 is_stmt 1 view -0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 0
 619              		@ frame_needed = 0, uses_anonymous_args = 0
 620              		@ link register save eliminated.
 183:Core/Src/task.c **** }
 621              		.loc 1 183 5 view .LVU123
 622              	.LBB16:
 623              	.LBI16:
 218:Core/Src/task.c **** {
 624              		.loc 1 218 58 view .LVU124
 625              	.LBB17:
 220:Core/Src/task.c ****     uint8_t temp;
 626              		.loc 1 220 5 view .LVU125
 221:Core/Src/task.c ****     __asm volatile
 627              		.loc 1 221 5 view .LVU126
 222:Core/Src/task.c ****             (
 628              		.loc 1 222 5 view .LVU127
 629 0000 074B     		ldr	r3, .L29
 630 0002 1B68     		ldr	r3, [r3]
 631              		.syntax unified
 632              	@ 222 "Core/Src/task.c" 1
 633 0004 B3FA83F3 		clz r3, r3
 634 0008 4FF01F02 	mov r2, #31
 635 000c A2EB0303 	sub r3, r2, r3
 636              	
 637              	@ 0 "" 2
 638              		.thumb
 639              		.syntax unified
 640 0010 DBB2     		uxtb	r3, r3
 641              	.LVL22:
 230:Core/Src/task.c **** }
ARM GAS  /tmp/cciKPolz.s 			page 18


 642              		.loc 1 230 5 view .LVU128
 230:Core/Src/task.c **** }
 643              		.loc 1 230 5 is_stmt 0 view .LVU129
 644              	.LBE17:
 645              	.LBE16:
 183:Core/Src/task.c **** }
 646              		.loc 1 183 29 discriminator 1 view .LVU130
 647 0012 044A     		ldr	r2, .L29+4
 648 0014 52F82320 		ldr	r2, [r2, r3, lsl #2]
 183:Core/Src/task.c **** }
 649              		.loc 1 183 17 discriminator 1 view .LVU131
 650 0018 034B     		ldr	r3, .L29+8
 651 001a 1A60     		str	r2, [r3]
 184:Core/Src/task.c **** 
 652              		.loc 1 184 1 view .LVU132
 653 001c 7047     		bx	lr
 654              	.L30:
 655 001e 00BF     		.align	2
 656              	.L29:
 657 0020 00000000 		.word	ready_bits
 658 0024 00000000 		.word	ready_list
 659 0028 00000000 		.word	current_tcb
 660              		.cfi_endproc
 661              	.LFE76:
 663              		.section	.text.critical_enter,"ax",%progbits
 664              		.align	1
 665              		.global	critical_enter
 666              		.syntax unified
 667              		.thumb
 668              		.thumb_func
 670              	critical_enter:
 671              	.LFB77:
 187:Core/Src/task.c ****     uint32_t ret;
 672              		.loc 1 187 1 is_stmt 1 view -0
 673              		.cfi_startproc
 674              		@ args = 0, pretend = 0, frame = 0
 675              		@ frame_needed = 0, uses_anonymous_args = 0
 676              		@ link register save eliminated.
 188:Core/Src/task.c ****     uint32_t temp;
 677              		.loc 1 188 5 view .LVU134
 189:Core/Src/task.c ****     __asm volatile(
 678              		.loc 1 189 5 view .LVU135
 190:Core/Src/task.c ****             " cpsid i               \n"
 679              		.loc 1 190 5 view .LVU136
 680 0000 BF20     		movs	r0, #191
 681              		.syntax unified
 682              	@ 190 "Core/Src/task.c" 1
 683 0002 72B6     		 cpsid i               
 684 0004 EFF31180 	 mrs r0, basepri       
 685 0008 0346     	 mov r3, r0            
 686 000a 83F31188 	 msr basepri, r3       
 687 000e BFF34F8F 	 dsb                   
 688 0012 BFF36F8F 	 isb                   
 689 0016 62B6     	 cpsie i               
 690              	
 691              	@ 0 "" 2
 692              	.LVL23:
ARM GAS  /tmp/cciKPolz.s 			page 19


 202:Core/Src/task.c **** }
 693              		.loc 1 202 5 view .LVU137
 203:Core/Src/task.c **** 
 694              		.loc 1 203 1 is_stmt 0 view .LVU138
 695              		.thumb
 696              		.syntax unified
 697 0018 7047     		bx	lr
 698              		.cfi_endproc
 699              	.LFE77:
 701              		.section	.text.critical_exit,"ax",%progbits
 702              		.align	1
 703              		.global	critical_exit
 704              		.syntax unified
 705              		.thumb
 706              		.thumb_func
 708              	critical_exit:
 709              	.LVL24:
 710              	.LFB78:
 206:Core/Src/task.c ****     __asm volatile(
 711              		.loc 1 206 1 is_stmt 1 view -0
 712              		.cfi_startproc
 713              		@ args = 0, pretend = 0, frame = 0
 714              		@ frame_needed = 0, uses_anonymous_args = 0
 715              		@ link register save eliminated.
 207:Core/Src/task.c ****             " cpsid i               \n"
 716              		.loc 1 207 5 view .LVU140
 717              		.syntax unified
 718              	@ 207 "Core/Src/task.c" 1
 719 0000 72B6     		 cpsid i               
 720 0002 80F31188 	 msr basepri, r0       
 721 0006 BFF34F8F 	 dsb                   
 722 000a BFF36F8F 	 isb                   
 723 000e 62B6     	 cpsie i               
 724              	
 725              	@ 0 "" 2
 216:Core/Src/task.c **** 
 726              		.loc 1 216 1 is_stmt 0 view .LVU141
 727              		.thumb
 728              		.syntax unified
 729 0010 7047     		bx	lr
 730              		.cfi_endproc
 731              	.LFE78:
 733              		.section	.text.delay_list_switch,"ax",%progbits
 734              		.align	1
 735              		.global	delay_list_switch
 736              		.syntax unified
 737              		.thumb
 738              		.thumb_func
 740              	delay_list_switch:
 741              	.LFB81:
 238:Core/Src/task.c **** 
 239:Core/Src/task.c **** void delay_list_switch(void){
 742              		.loc 1 239 29 is_stmt 1 view -0
 743              		.cfi_startproc
 744              		@ args = 0, pretend = 0, frame = 0
 745              		@ frame_needed = 0, uses_anonymous_args = 0
 746              		@ link register save eliminated.
ARM GAS  /tmp/cciKPolz.s 			page 20


 240:Core/Src/task.c ****     uint32_t* tmp;
 747              		.loc 1 240 5 view .LVU143
 241:Core/Src/task.c ****     tmp = delay_list;
 748              		.loc 1 241 5 view .LVU144
 749              		.loc 1 241 9 is_stmt 0 view .LVU145
 750 0000 034A     		ldr	r2, .L34
 751 0002 1168     		ldr	r1, [r2]
 752              	.LVL25:
 242:Core/Src/task.c ****     delay_list = delay_overflow_list;
 753              		.loc 1 242 5 is_stmt 1 view .LVU146
 754              		.loc 1 242 16 is_stmt 0 view .LVU147
 755 0004 034B     		ldr	r3, .L34+4
 756 0006 1868     		ldr	r0, [r3]
 757 0008 1060     		str	r0, [r2]
 243:Core/Src/task.c ****     delay_overflow_list = tmp;
 758              		.loc 1 243 5 is_stmt 1 view .LVU148
 759              		.loc 1 243 25 is_stmt 0 view .LVU149
 760 000a 1960     		str	r1, [r3]
 244:Core/Src/task.c **** }
 761              		.loc 1 244 1 view .LVU150
 762 000c 7047     		bx	lr
 763              	.L35:
 764 000e 00BF     		.align	2
 765              	.L34:
 766 0010 00000000 		.word	delay_list
 767 0014 00000000 		.word	delay_overflow_list
 768              		.cfi_endproc
 769              	.LFE81:
 771              		.section	.text.task_delay,"ax",%progbits
 772              		.align	1
 773              		.global	task_delay
 774              		.syntax unified
 775              		.thumb
 776              		.thumb_func
 778              	task_delay:
 779              	.LVL26:
 780              	.LFB82:
 245:Core/Src/task.c **** 
 246:Core/Src/task.c **** void task_delay(uint32_t ticks){
 781              		.loc 1 246 32 is_stmt 1 view -0
 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 0
 784              		@ frame_needed = 0, uses_anonymous_args = 0
 785              		@ link register save eliminated.
 247:Core/Src/task.c ****     uint32_t time_to_wake = ticks + current_tick_count;
 786              		.loc 1 247 5 view .LVU152
 787              		.loc 1 247 35 is_stmt 0 view .LVU153
 788 0000 0E4B     		ldr	r3, .L39
 789 0002 1B68     		ldr	r3, [r3]
 790              	.LVL27:
 248:Core/Src/task.c ****     uint32_t priority = current_tcb->priority;
 791              		.loc 1 248 5 is_stmt 1 view .LVU154
 792              		.loc 1 248 36 is_stmt 0 view .LVU155
 793 0004 0E4A     		ldr	r2, .L39+4
 794 0006 1268     		ldr	r2, [r2]
 795              		.loc 1 248 14 view .LVU156
 796 0008 5168     		ldr	r1, [r2, #4]
ARM GAS  /tmp/cciKPolz.s 			page 21


 797              	.LVL28:
 249:Core/Src/task.c ****     //overflow
 250:Core/Src/task.c ****     if(time_to_wake < current_tick_count){
 798              		.loc 1 250 5 is_stmt 1 view .LVU157
 799              		.loc 1 250 7 is_stmt 0 view .LVU158
 800 000a 1B18     		adds	r3, r3, r0
 801              	.LVL29:
 802              		.loc 1 250 7 view .LVU159
 803 000c 11D3     		bcc	.L37
 251:Core/Src/task.c ****         delay_overflow_list[priority] = time_to_wake;
 804              		.loc 1 251 9 is_stmt 1 view .LVU160
 805              		.loc 1 251 28 is_stmt 0 view .LVU161
 806 000e 0D4A     		ldr	r2, .L39+8
 807 0010 1268     		ldr	r2, [r2]
 808              		.loc 1 251 39 view .LVU162
 809 0012 42F82130 		str	r3, [r2, r1, lsl #2]
 810              	.L38:
 252:Core/Src/task.c ****     }else{
 253:Core/Src/task.c ****         delay_list[priority] = time_to_wake;
 254:Core/Src/task.c ****     }
 255:Core/Src/task.c **** 
 256:Core/Src/task.c ****     ready_bits &= ~(1 << priority);
 811              		.loc 1 256 5 is_stmt 1 view .LVU163
 812              		.loc 1 256 23 is_stmt 0 view .LVU164
 813 0016 0122     		movs	r2, #1
 814 0018 8A40     		lsls	r2, r2, r1
 815              		.loc 1 256 16 view .LVU165
 816 001a 0B49     		ldr	r1, .L39+12
 817              	.LVL30:
 818              		.loc 1 256 16 view .LVU166
 819 001c 0B68     		ldr	r3, [r1]
 820              	.LVL31:
 821              		.loc 1 256 16 view .LVU167
 822 001e 23EA0203 		bic	r3, r3, r2
 823 0022 0B60     		str	r3, [r1]
 257:Core/Src/task.c ****     task_switch();
 824              		.loc 1 257 5 is_stmt 1 view .LVU168
 825 0024 4FF0E023 		mov	r3, #-536813568
 826 0028 4FF08052 		mov	r2, #268435456
 827 002c C3F8042D 		str	r2, [r3, #3332]
 828              	.LVL32:
 258:Core/Src/task.c **** }
 829              		.loc 1 258 1 is_stmt 0 view .LVU169
 830 0030 7047     		bx	lr
 831              	.LVL33:
 832              	.L37:
 253:Core/Src/task.c ****     }
 833              		.loc 1 253 9 is_stmt 1 view .LVU170
 253:Core/Src/task.c ****     }
 834              		.loc 1 253 19 is_stmt 0 view .LVU171
 835 0032 064A     		ldr	r2, .L39+16
 836 0034 1268     		ldr	r2, [r2]
 253:Core/Src/task.c ****     }
 837              		.loc 1 253 30 view .LVU172
 838 0036 42F82130 		str	r3, [r2, r1, lsl #2]
 839 003a ECE7     		b	.L38
 840              	.L40:
ARM GAS  /tmp/cciKPolz.s 			page 22


 841              		.align	2
 842              	.L39:
 843 003c 00000000 		.word	current_tick_count
 844 0040 00000000 		.word	current_tcb
 845 0044 00000000 		.word	delay_overflow_list
 846 0048 00000000 		.word	ready_bits
 847 004c 00000000 		.word	delay_list
 848              		.cfi_endproc
 849              	.LFE82:
 851              		.global	enter_idle
 852              		.section	.bss.enter_idle,"aw",%nobits
 853              		.align	2
 856              	enter_idle:
 857 0000 00000000 		.space	4
 858              		.section	.bss.current_tick_count,"aw",%nobits
 859              		.align	2
 862              	current_tick_count:
 863 0000 00000000 		.space	4
 864              		.section	.bss.max_priority,"aw",%nobits
 865              		.align	2
 868              	max_priority:
 869 0000 00000000 		.space	4
 870              		.section	.bss.delay_overflow_list,"aw",%nobits
 871              		.align	2
 874              	delay_overflow_list:
 875 0000 00000000 		.space	4
 876              		.section	.bss.delay_list,"aw",%nobits
 877              		.align	2
 880              	delay_list:
 881 0000 00000000 		.space	4
 882              		.section	.bss.delay_overflow_lst,"aw",%nobits
 883              		.align	2
 886              	delay_overflow_lst:
 887 0000 00000000 		.space	128
 887      00000000 
 887      00000000 
 887      00000000 
 887      00000000 
 888              		.section	.bss.delay_lst,"aw",%nobits
 889              		.align	2
 892              	delay_lst:
 893 0000 00000000 		.space	128
 893      00000000 
 893      00000000 
 893      00000000 
 893      00000000 
 894              		.section	.bss.ready_bits,"aw",%nobits
 895              		.align	2
 898              	ready_bits:
 899 0000 00000000 		.space	4
 900              		.section	.bss.ready_list,"aw",%nobits
 901              		.align	2
 904              	ready_list:
 905 0000 00000000 		.space	128
 905      00000000 
 905      00000000 
 905      00000000 
ARM GAS  /tmp/cciKPolz.s 			page 23


 905      00000000 
 906              		.section	.bss.idle_task_handler,"aw",%nobits
 907              		.align	2
 910              	idle_task_handler:
 911 0000 00000000 		.space	4
 912              		.global	current_tcb
 913              		.section	.bss.current_tcb,"aw",%nobits
 914              		.align	2
 917              	current_tcb:
 918 0000 00000000 		.space	4
 919              		.text
 920              	.Letext0:
 921              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 922              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 923              		.file 4 "/usr/lib/gcc/arm-none-eabi/14.2.0/include/stddef.h"
 924              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 925              		.file 6 "Core/Inc/task.h"
 926              		.file 7 "Core/Inc/mem.h"
ARM GAS  /tmp/cciKPolz.s 			page 24


DEFINED SYMBOLS
                            *ABS*:00000000 task.c
     /tmp/cciKPolz.s:19     .text.task_exit_error:00000000 $t
     /tmp/cciKPolz.s:24     .text.task_exit_error:00000000 task_exit_error
     /tmp/cciKPolz.s:41     .text.idle_task:00000000 $t
     /tmp/cciKPolz.s:47     .text.idle_task:00000000 idle_task
     /tmp/cciKPolz.s:72     .text.idle_task:00000018 $d
     /tmp/cciKPolz.s:856    .bss.enter_idle:00000000 enter_idle
     /tmp/cciKPolz.s:77     .text.delay_list_init:00000000 $t
     /tmp/cciKPolz.s:82     .text.delay_list_init:00000000 delay_list_init
     /tmp/cciKPolz.s:109    .text.delay_list_init:00000014 $d
     /tmp/cciKPolz.s:862    .bss.current_tick_count:00000000 current_tick_count
     /tmp/cciKPolz.s:880    .bss.delay_list:00000000 delay_list
     /tmp/cciKPolz.s:892    .bss.delay_lst:00000000 delay_lst
     /tmp/cciKPolz.s:874    .bss.delay_overflow_list:00000000 delay_overflow_list
     /tmp/cciKPolz.s:886    .bss.delay_overflow_lst:00000000 delay_overflow_lst
     /tmp/cciKPolz.s:118    .text.PendSV_Handler:00000000 $t
     /tmp/cciKPolz.s:124    .text.PendSV_Handler:00000000 PendSV_Handler
     /tmp/cciKPolz.s:159    .text.PendSV_Handler:00000040 pxCurrentTCBConst
     /tmp/cciKPolz.s:614    .text.vTaskSwitchContext:00000000 vTaskSwitchContext
     /tmp/cciKPolz.s:159    .text.PendSV_Handler:00000040 $d
     /tmp/cciKPolz.s:917    .bss.current_tcb:00000000 current_tcb
     /tmp/cciKPolz.s:169    .text.SVC_Handler:00000000 $t
     /tmp/cciKPolz.s:175    .text.SVC_Handler:00000000 SVC_Handler
     /tmp/cciKPolz.s:197    .text.SVC_Handler:00000020 pxCurrentTCBConst2
     /tmp/cciKPolz.s:197    .text.SVC_Handler:00000020 $d
     /tmp/cciKPolz.s:207    .text.SysTick_Handler:00000000 $t
     /tmp/cciKPolz.s:213    .text.SysTick_Handler:00000000 SysTick_Handler
     /tmp/cciKPolz.s:274    .text.add_to_ready_list:00000000 $t
     /tmp/cciKPolz.s:280    .text.add_to_ready_list:00000000 add_to_ready_list
     /tmp/cciKPolz.s:329    .text.add_to_ready_list:00000028 $d
     /tmp/cciKPolz.s:868    .bss.max_priority:00000000 max_priority
     /tmp/cciKPolz.s:898    .bss.ready_bits:00000000 ready_bits
     /tmp/cciKPolz.s:904    .bss.ready_list:00000000 ready_list
     /tmp/cciKPolz.s:336    .text.stack_init:00000000 $t
     /tmp/cciKPolz.s:342    .text.stack_init:00000000 stack_init
     /tmp/cciKPolz.s:386    .text.stack_init:00000020 $d
     /tmp/cciKPolz.s:391    .text.task_create:00000000 $t
     /tmp/cciKPolz.s:397    .text.task_create:00000000 task_create
     /tmp/cciKPolz.s:476    .text.scheduler_init:00000000 $t
     /tmp/cciKPolz.s:482    .text.scheduler_init:00000000 scheduler_init
     /tmp/cciKPolz.s:528    .text.scheduler_init:00000028 $d
     /tmp/cciKPolz.s:910    .bss.idle_task_handler:00000000 idle_task_handler
     /tmp/cciKPolz.s:536    .text.scheduler_start:00000000 $t
     /tmp/cciKPolz.s:542    .text.scheduler_start:00000000 scheduler_start
     /tmp/cciKPolz.s:595    .text.scheduler_start:00000046 $d
     /tmp/cciKPolz.s:595    .text.scheduler_start:00000048 $d
     /tmp/cciKPolz.s:603    .text.scheduler_start:0000004c $t
     /tmp/cciKPolz.s:608    .text.vTaskSwitchContext:00000000 $t
     /tmp/cciKPolz.s:657    .text.vTaskSwitchContext:00000020 $d
     /tmp/cciKPolz.s:664    .text.critical_enter:00000000 $t
     /tmp/cciKPolz.s:670    .text.critical_enter:00000000 critical_enter
     /tmp/cciKPolz.s:702    .text.critical_exit:00000000 $t
     /tmp/cciKPolz.s:708    .text.critical_exit:00000000 critical_exit
     /tmp/cciKPolz.s:734    .text.delay_list_switch:00000000 $t
     /tmp/cciKPolz.s:740    .text.delay_list_switch:00000000 delay_list_switch
     /tmp/cciKPolz.s:766    .text.delay_list_switch:00000010 $d
ARM GAS  /tmp/cciKPolz.s 			page 25


     /tmp/cciKPolz.s:772    .text.task_delay:00000000 $t
     /tmp/cciKPolz.s:778    .text.task_delay:00000000 task_delay
     /tmp/cciKPolz.s:843    .text.task_delay:0000003c $d
     /tmp/cciKPolz.s:853    .bss.enter_idle:00000000 $d
     /tmp/cciKPolz.s:859    .bss.current_tick_count:00000000 $d
     /tmp/cciKPolz.s:865    .bss.max_priority:00000000 $d
     /tmp/cciKPolz.s:871    .bss.delay_overflow_list:00000000 $d
     /tmp/cciKPolz.s:877    .bss.delay_list:00000000 $d
     /tmp/cciKPolz.s:883    .bss.delay_overflow_lst:00000000 $d
     /tmp/cciKPolz.s:889    .bss.delay_lst:00000000 $d
     /tmp/cciKPolz.s:895    .bss.ready_bits:00000000 $d
     /tmp/cciKPolz.s:901    .bss.ready_list:00000000 $d
     /tmp/cciKPolz.s:907    .bss.idle_task_handler:00000000 $d
     /tmp/cciKPolz.s:914    .bss.current_tcb:00000000 $d

UNDEFINED SYMBOLS
halloc
