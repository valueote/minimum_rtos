ARM GAS  /tmp//ccY11c6d.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f1xx_hal_uart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c"
  18              		.section	.text.HAL_UART_Init,"ax",%progbits
  19              		.align	1
  20              		.global	HAL_UART_Init
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	HAL_UART_Init:
  26              	.LFB65:
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @file    stm32f1xx_hal_uart.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief   UART HAL module driver.
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + IO operation functions
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Peripheral Control functions
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Peripheral State and Errors functions
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @attention
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * Copyright (c) 2016 STMicroelectronics.
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * All rights reserved.
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * This software is licensed under terms that can be found in the LICENSE file
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * in the root directory of this software component.
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   @verbatim
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                         ##### How to use this driver #####
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   [..]
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure (eg. UART_HandleTypeDef huart).
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
ARM GAS  /tmp//ccY11c6d.s 			page 2


  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) Enable the USARTx interface clock.
  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) UART pins configuration:
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the UART TX/RX pins as alternate function pull-up.
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   Tx/Rx parameters.
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx channel.
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   interrupt on the DMA Tx/Rx channel.
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority and enable the NVIC USART IRQ handle
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   (used for last byte sending completion detection in DMA non circular mode)
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         flow control and Mode(Receiver/Transmitter) in the huart Init structure.
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_UART_Init() API.
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the LIN mode, initialize the UART registers by calling the HAL_LIN_Init() API.
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the Multi-Processor mode, initialize the UART registers by calling
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_MultiProcessor_Init() API.
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) The specific UART interrupts (Transmission complete interrupt,
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             RXNE interrupt and Error Interrupts) will be managed using the macros
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT() inside the transmit
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             and receive process.
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) These APIs (HAL_UART_Init() and HAL_HalfDuplex_Init()) configure also the
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             low level Hardware GPIO, CLOCK, CORTEX...etc) by calling the customized
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             HAL_UART_MspInit() API.
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ##### Callback registration #####
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ==================================
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The compilation define USE_HAL_UART_REGISTER_CALLBACKS when set to 1
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     allows the user to configure dynamically the driver callbacks.
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Use Function HAL_UART_RegisterCallback() to register a user callback.
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Function HAL_UART_RegisterCallback() allows to register following callbacks:
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
ARM GAS  /tmp//ccY11c6d.s 			page 3


  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This function takes as parameters the HAL peripheral handle, the Callback ID
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and a pointer to the user callback function.
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Use function HAL_UART_UnRegisterCallback() to reset a callback to the default
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     weak (surcharged) function.
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_UnRegisterCallback() takes as parameters the HAL peripheral handle,
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and the Callback ID.
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This function allows to reset following callbacks:
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     For specific callback RxEventCallback, use dedicated registration/reset functions:
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     respectively HAL_UART_RegisterRxEventCallback() , HAL_UART_UnRegisterRxEventCallback().
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     By default, after the HAL_UART_Init() and when the state is HAL_UART_STATE_RESET
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     all callbacks are set to the corresponding weak (surcharged) functions:
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     examples HAL_UART_TxCpltCallback(), HAL_UART_RxHalfCpltCallback().
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Exception done for MspInit and MspDeInit functions that are respectively
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     reset to the legacy weak (surcharged) functions in the HAL_UART_Init()
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and HAL_UART_DeInit() only when these callbacks are null (not registered beforehand).
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     If not, MspInit or MspDeInit are not null, the HAL_UART_Init() and HAL_UART_DeInit()
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Callbacks can be registered/unregistered in HAL_UART_STATE_READY state only.
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Exception done MspInit/MspDeInit that can be registered/unregistered
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     in HAL_UART_STATE_READY or HAL_UART_STATE_RESET state, thus registered (user)
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     MspInit/DeInit callbacks can be used during the Init/DeInit.
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     In that case first register the MspInit/MspDeInit user callbacks
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     using HAL_UART_RegisterCallback() before calling HAL_UART_DeInit()
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     or HAL_UART_Init() function.
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     When The compilation define USE_HAL_UART_REGISTER_CALLBACKS is set to 0 or
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     not defined, the callback registration feature is not available
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and weak (surcharged) callbacks are used.
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp//ccY11c6d.s 			page 4


 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         Three operation modes are available within this driver :
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** Polling mode IO operation ***
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      =================================
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in blocking mode using HAL_UART_Transmit()
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in blocking mode using HAL_UART_Receive()
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** Interrupt mode IO operation ***
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      ===================================
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode using HAL_UART_Transmit_IT()
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode using HAL_UART_Receive_IT()
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** DMA mode IO operation ***
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      ==============================
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode (DMA) using HAL_UART_Transmit_DMA()
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode (DMA) using HAL_UART_Receive_DMA()
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Pause the DMA Transfer using HAL_UART_DMAPause()
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Resume the DMA Transfer using HAL_UART_DMAResume()
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Stop the DMA Transfer using HAL_UART_DMAStop()
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..] This subsection also provides a set of additional functions providing enhanced reception
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     services to user. (For example, these functions allow application to handle use cases
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     where number of data to be received is unknown).
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Compared to standard reception services which only consider number of received
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         data elements as reception completion criteria, these functions also consider additional ev
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         as triggers for updating reception status to caller :
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Detection of inactivity period (RX line has not been active for a given period).
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           (++) RX inactivity detected by IDLE event, i.e. RX line has been in idle state (normally 
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                for 1 frame time, after last received byte.
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) There are two mode of transfer:
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Blocking mode: The reception is performed in polling mode, until either expected number 
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            or till IDLE event occurs. Reception is handled only during function execution.
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            When function exits, no data reception could occur. HAL status and number of actually re
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            are returned by function after finishing transfer.
ARM GAS  /tmp//ccY11c6d.s 			page 5


 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Non-Blocking mode: The reception is performed using Interrupts or DMA.
 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            These API's return the HAL status.
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The end of the data processing will be indicated through the
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when using DMA mode.
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UARTEx_RxEventCallback() user callback will be executed during Receive process
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a reception error is det
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Blocking mode API:
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_ReceiveToIdle()
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API with Interrupt:
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_ReceiveToIdle_IT()
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API with DMA:
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_ReceiveToIdle_DMA()
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** UART HAL driver macros list ***
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      =============================================
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Below the list of most used macros in UART HAL driver.
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_ENABLE: Enable the UART peripheral
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_DISABLE: Disable the UART peripheral
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_GET_FLAG : Check whether the specified UART flag is set or not
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_CLEAR_FLAG : Clear the specified UART pending flag
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_ENABLE_IT: Enable the specified UART interrupt
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_DISABLE_IT: Disable the specified UART interrupt
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_GET_IT_SOURCE: Check whether the specified UART interrupt has occurred or not
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) You can refer to the UART HAL driver header file for more useful macros
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   @endverbatim
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) Additional remark: If the parity is enabled, then the MSB bit of the data written
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            in the data register is transmitted but is changed by the parity bit.
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Depending on the frame length defined by the M bit (8-bits or 9-bits),
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the possible UART frame formats are as listed in the following table:
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     +-------------------------------------------------------------+
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |   M bit |  PCE bit  |            UART frame                 |
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------------------|---------------------------------------|
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    0    |    0      |    | SB | 8 bit data | STB |          |
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    1    |    0      |    | SB | 9 bit data | STB |          |
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     +-------------------------------------------------------------+
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #include "stm32f1xx_hal.h"
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup STM32F1xx_HAL_Driver
ARM GAS  /tmp//ccY11c6d.s 			page 6


 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART UART
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief HAL UART module driver
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup UART_Private_Constants
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private macro -------------------------------------------------------------*/
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup UART_Private_Functions  UART Private Functions
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart);
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma);
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart);
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                                                      uint32_t Tickstart, uint32_t Timeout);
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart);
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Exported functions ---------------------------------------------------------*/
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions
ARM GAS  /tmp//ccY11c6d.s 			page 7


 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     in asynchronous mode.
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) For the asynchronous mode only these parameters can be configured:
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Baud Rate
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Word Length
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Stop Bit
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              in the data register is transmitted but is changed by the parity bit.
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              please refer to Reference manual for possible UART frame formats.
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Hardware flow control
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Receiver/transmitter modes
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Over Sampling Method
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init() and HAL_MultiProcessor_Init() APIs
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     follow respectively the UART asynchronous, UART Half duplex, LIN and Multi-Processor configurat
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     procedures (details for the procedures are available in reference manuals
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (RM0008 for STM32F10Xxx MCUs and RM0041 for STM32F100xx MCUs)).
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the UART mode according to the specified parameters in
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the UART_InitTypeDef and create the associated handle.
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
  27              		.loc 1 355 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
  43              		.loc 1 357 6
ARM GAS  /tmp//ccY11c6d.s 			page 8


  44 0008 7B68     		ldr	r3, [r7, #4]
  45 000a 002B     		cmp	r3, #0
  46 000c 01D1     		bne	.L2
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
  47              		.loc 1 359 12
  48 000e 0123     		movs	r3, #1
  49 0010 42E0     		b	.L3
  50              	.L2:
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* The hardware flow control is available only for USART1, USART2 and USART3 */
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
  51              		.loc 1 378 12
  52 0012 7B68     		ldr	r3, [r7, #4]
  53 0014 93F84130 		ldrb	r3, [r3, #65]
  54 0018 DBB2     		uxtb	r3, r3
  55              		.loc 1 378 6
  56 001a 002B     		cmp	r3, #0
  57 001c 06D1     		bne	.L4
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
  58              		.loc 1 381 17
  59 001e 7B68     		ldr	r3, [r7, #4]
  60 0020 0022     		movs	r2, #0
  61 0022 83F84020 		strb	r2, [r3, #64]
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
  62              		.loc 1 395 5
ARM GAS  /tmp//ccY11c6d.s 			page 9


  63 0026 7868     		ldr	r0, [r7, #4]
  64 0028 FFF7FEFF 		bl	HAL_UART_MspInit
  65              	.L4:
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
  66              		.loc 1 399 17
  67 002c 7B68     		ldr	r3, [r7, #4]
  68 002e 2422     		movs	r2, #36
  69 0030 83F84120 		strb	r2, [r3, #65]
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
  70              		.loc 1 402 3
  71 0034 7B68     		ldr	r3, [r7, #4]
  72 0036 1B68     		ldr	r3, [r3]
  73 0038 DA68     		ldr	r2, [r3, #12]
  74 003a 7B68     		ldr	r3, [r7, #4]
  75 003c 1B68     		ldr	r3, [r3]
  76 003e 22F40052 		bic	r2, r2, #8192
  77 0042 DA60     		str	r2, [r3, #12]
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
  78              		.loc 1 405 3
  79 0044 7868     		ldr	r0, [r7, #4]
  80 0046 FFF7FEFF 		bl	UART_SetConfig
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  81              		.loc 1 410 3
  82 004a 7B68     		ldr	r3, [r7, #4]
  83 004c 1B68     		ldr	r3, [r3]
  84 004e 1A69     		ldr	r2, [r3, #16]
  85 0050 7B68     		ldr	r3, [r7, #4]
  86 0052 1B68     		ldr	r3, [r3]
  87 0054 22F49042 		bic	r2, r2, #18432
  88 0058 1A61     		str	r2, [r3, #16]
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
  89              		.loc 1 411 3
  90 005a 7B68     		ldr	r3, [r7, #4]
  91 005c 1B68     		ldr	r3, [r3]
  92 005e 5A69     		ldr	r2, [r3, #20]
  93 0060 7B68     		ldr	r3, [r7, #4]
  94 0062 1B68     		ldr	r3, [r3]
  95 0064 22F02A02 		bic	r2, r2, #42
  96 0068 5A61     		str	r2, [r3, #20]
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
  97              		.loc 1 414 3
  98 006a 7B68     		ldr	r3, [r7, #4]
  99 006c 1B68     		ldr	r3, [r3]
 100 006e DA68     		ldr	r2, [r3, #12]
ARM GAS  /tmp//ccY11c6d.s 			page 10


 101 0070 7B68     		ldr	r3, [r7, #4]
 102 0072 1B68     		ldr	r3, [r3]
 103 0074 42F40052 		orr	r2, r2, #8192
 104 0078 DA60     		str	r2, [r3, #12]
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state */
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 105              		.loc 1 417 20
 106 007a 7B68     		ldr	r3, [r7, #4]
 107 007c 0022     		movs	r2, #0
 108 007e 5A64     		str	r2, [r3, #68]
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 109              		.loc 1 418 17
 110 0080 7B68     		ldr	r3, [r7, #4]
 111 0082 2022     		movs	r2, #32
 112 0084 83F84120 		strb	r2, [r3, #65]
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 113              		.loc 1 419 18
 114 0088 7B68     		ldr	r3, [r7, #4]
 115 008a 2022     		movs	r2, #32
 116 008c 83F84220 		strb	r2, [r3, #66]
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventType = HAL_UART_RXEVENT_TC;
 117              		.loc 1 420 22
 118 0090 7B68     		ldr	r3, [r7, #4]
 119 0092 0022     		movs	r2, #0
 120 0094 5A63     		str	r2, [r3, #52]
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 121              		.loc 1 422 10
 122 0096 0023     		movs	r3, #0
 123              	.L3:
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 124              		.loc 1 423 1
 125 0098 1846     		mov	r0, r3
 126 009a 0837     		adds	r7, r7, #8
 127              	.LCFI3:
 128              		.cfi_def_cfa_offset 8
 129 009c BD46     		mov	sp, r7
 130              	.LCFI4:
 131              		.cfi_def_cfa_register 13
 132              		@ sp needed
 133 009e 80BD     		pop	{r7, pc}
 134              		.cfi_endproc
 135              	.LFE65:
 137              		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 138              		.align	1
 139              		.global	HAL_HalfDuplex_Init
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
 144              	HAL_HalfDuplex_Init:
 145              	.LFB66:
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the half-duplex mode according to the specified
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
ARM GAS  /tmp//ccY11c6d.s 			page 11


 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 146              		.loc 1 433 1
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 8
 149              		@ frame_needed = 1, uses_anonymous_args = 0
 150 0000 80B5     		push	{r7, lr}
 151              	.LCFI5:
 152              		.cfi_def_cfa_offset 8
 153              		.cfi_offset 7, -8
 154              		.cfi_offset 14, -4
 155 0002 82B0     		sub	sp, sp, #8
 156              	.LCFI6:
 157              		.cfi_def_cfa_offset 16
 158 0004 00AF     		add	r7, sp, #0
 159              	.LCFI7:
 160              		.cfi_def_cfa_register 7
 161 0006 7860     		str	r0, [r7, #4]
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 162              		.loc 1 435 6
 163 0008 7B68     		ldr	r3, [r7, #4]
 164 000a 002B     		cmp	r3, #0
 165 000c 01D1     		bne	.L6
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 166              		.loc 1 437 12
 167 000e 0123     		movs	r3, #1
 168 0010 4AE0     		b	.L7
 169              	.L6:
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 170              		.loc 1 447 12
 171 0012 7B68     		ldr	r3, [r7, #4]
 172 0014 93F84130 		ldrb	r3, [r3, #65]
 173 0018 DBB2     		uxtb	r3, r3
 174              		.loc 1 447 6
 175 001a 002B     		cmp	r3, #0
 176 001c 06D1     		bne	.L8
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 177              		.loc 1 450 17
 178 001e 7B68     		ldr	r3, [r7, #4]
 179 0020 0022     		movs	r2, #0
 180 0022 83F84020 		strb	r2, [r3, #64]
ARM GAS  /tmp//ccY11c6d.s 			page 12


 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 181              		.loc 1 464 5
 182 0026 7868     		ldr	r0, [r7, #4]
 183 0028 FFF7FEFF 		bl	HAL_UART_MspInit
 184              	.L8:
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 185              		.loc 1 468 17
 186 002c 7B68     		ldr	r3, [r7, #4]
 187 002e 2422     		movs	r2, #36
 188 0030 83F84120 		strb	r2, [r3, #65]
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 189              		.loc 1 471 3
 190 0034 7B68     		ldr	r3, [r7, #4]
 191 0036 1B68     		ldr	r3, [r3]
 192 0038 DA68     		ldr	r2, [r3, #12]
 193 003a 7B68     		ldr	r3, [r7, #4]
 194 003c 1B68     		ldr	r3, [r3]
 195 003e 22F40052 		bic	r2, r2, #8192
 196 0042 DA60     		str	r2, [r3, #12]
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 197              		.loc 1 474 3
 198 0044 7868     		ldr	r0, [r7, #4]
 199 0046 FFF7FEFF 		bl	UART_SetConfig
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared:
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN and IREN bits in the USART_CR3 register.*/
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 200              		.loc 1 479 3
 201 004a 7B68     		ldr	r3, [r7, #4]
 202 004c 1B68     		ldr	r3, [r3]
 203 004e 1A69     		ldr	r2, [r3, #16]
 204 0050 7B68     		ldr	r3, [r7, #4]
 205 0052 1B68     		ldr	r3, [r3]
 206 0054 22F49042 		bic	r2, r2, #18432
 207 0058 1A61     		str	r2, [r3, #16]
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
ARM GAS  /tmp//ccY11c6d.s 			page 13


 208              		.loc 1 480 3
 209 005a 7B68     		ldr	r3, [r7, #4]
 210 005c 1B68     		ldr	r3, [r3]
 211 005e 5A69     		ldr	r2, [r3, #20]
 212 0060 7B68     		ldr	r3, [r7, #4]
 213 0062 1B68     		ldr	r3, [r3]
 214 0064 22F02202 		bic	r2, r2, #34
 215 0068 5A61     		str	r2, [r3, #20]
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 216              		.loc 1 483 3
 217 006a 7B68     		ldr	r3, [r7, #4]
 218 006c 1B68     		ldr	r3, [r3]
 219 006e 5A69     		ldr	r2, [r3, #20]
 220 0070 7B68     		ldr	r3, [r7, #4]
 221 0072 1B68     		ldr	r3, [r3]
 222 0074 42F00802 		orr	r2, r2, #8
 223 0078 5A61     		str	r2, [r3, #20]
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 224              		.loc 1 486 3
 225 007a 7B68     		ldr	r3, [r7, #4]
 226 007c 1B68     		ldr	r3, [r3]
 227 007e DA68     		ldr	r2, [r3, #12]
 228 0080 7B68     		ldr	r3, [r7, #4]
 229 0082 1B68     		ldr	r3, [r3]
 230 0084 42F40052 		orr	r2, r2, #8192
 231 0088 DA60     		str	r2, [r3, #12]
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state*/
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 232              		.loc 1 489 20
 233 008a 7B68     		ldr	r3, [r7, #4]
 234 008c 0022     		movs	r2, #0
 235 008e 5A64     		str	r2, [r3, #68]
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 236              		.loc 1 490 17
 237 0090 7B68     		ldr	r3, [r7, #4]
 238 0092 2022     		movs	r2, #32
 239 0094 83F84120 		strb	r2, [r3, #65]
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 240              		.loc 1 491 18
 241 0098 7B68     		ldr	r3, [r7, #4]
 242 009a 2022     		movs	r2, #32
 243 009c 83F84220 		strb	r2, [r3, #66]
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventType = HAL_UART_RXEVENT_TC;
 244              		.loc 1 492 22
 245 00a0 7B68     		ldr	r3, [r7, #4]
 246 00a2 0022     		movs	r2, #0
 247 00a4 5A63     		str	r2, [r3, #52]
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 248              		.loc 1 494 10
 249 00a6 0023     		movs	r3, #0
 250              	.L7:
ARM GAS  /tmp//ccY11c6d.s 			page 14


 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 251              		.loc 1 495 1
 252 00a8 1846     		mov	r0, r3
 253 00aa 0837     		adds	r7, r7, #8
 254              	.LCFI8:
 255              		.cfi_def_cfa_offset 8
 256 00ac BD46     		mov	sp, r7
 257              	.LCFI9:
 258              		.cfi_def_cfa_register 13
 259              		@ sp needed
 260 00ae 80BD     		pop	{r7, pc}
 261              		.cfi_endproc
 262              	.LFE66:
 264              		.section	.text.HAL_LIN_Init,"ax",%progbits
 265              		.align	1
 266              		.global	HAL_LIN_Init
 267              		.syntax unified
 268              		.thumb
 269              		.thumb_func
 271              	HAL_LIN_Init:
 272              	.LFB67:
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the LIN mode according to the specified
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  BreakDetectLength Specifies the LIN break detection length.
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 273              		.loc 1 509 1
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 8
 276              		@ frame_needed = 1, uses_anonymous_args = 0
 277 0000 80B5     		push	{r7, lr}
 278              	.LCFI10:
 279              		.cfi_def_cfa_offset 8
 280              		.cfi_offset 7, -8
 281              		.cfi_offset 14, -4
 282 0002 82B0     		sub	sp, sp, #8
 283              	.LCFI11:
 284              		.cfi_def_cfa_offset 16
 285 0004 00AF     		add	r7, sp, #0
 286              	.LCFI12:
 287              		.cfi_def_cfa_register 7
 288 0006 7860     		str	r0, [r7, #4]
 289 0008 3960     		str	r1, [r7]
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 290              		.loc 1 511 6
 291 000a 7B68     		ldr	r3, [r7, #4]
 292 000c 002B     		cmp	r3, #0
ARM GAS  /tmp//ccY11c6d.s 			page 15


 293 000e 01D1     		bne	.L10
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 294              		.loc 1 513 12
 295 0010 0123     		movs	r3, #1
 296 0012 5AE0     		b	.L11
 297              	.L10:
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the LIN UART instance */
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the Break detection length parameter */
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 298              		.loc 1 526 12
 299 0014 7B68     		ldr	r3, [r7, #4]
 300 0016 93F84130 		ldrb	r3, [r3, #65]
 301 001a DBB2     		uxtb	r3, r3
 302              		.loc 1 526 6
 303 001c 002B     		cmp	r3, #0
 304 001e 06D1     		bne	.L12
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 305              		.loc 1 529 17
 306 0020 7B68     		ldr	r3, [r7, #4]
 307 0022 0022     		movs	r2, #0
 308 0024 83F84020 		strb	r2, [r3, #64]
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 309              		.loc 1 543 5
 310 0028 7868     		ldr	r0, [r7, #4]
 311 002a FFF7FEFF 		bl	HAL_UART_MspInit
 312              	.L12:
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 313              		.loc 1 547 17
ARM GAS  /tmp//ccY11c6d.s 			page 16


 314 002e 7B68     		ldr	r3, [r7, #4]
 315 0030 2422     		movs	r2, #36
 316 0032 83F84120 		strb	r2, [r3, #65]
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 317              		.loc 1 550 3
 318 0036 7B68     		ldr	r3, [r7, #4]
 319 0038 1B68     		ldr	r3, [r3]
 320 003a DA68     		ldr	r2, [r3, #12]
 321 003c 7B68     		ldr	r3, [r7, #4]
 322 003e 1B68     		ldr	r3, [r3]
 323 0040 22F40052 		bic	r2, r2, #8192
 324 0044 DA60     		str	r2, [r3, #12]
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 325              		.loc 1 553 3
 326 0046 7868     		ldr	r0, [r7, #4]
 327 0048 FFF7FEFF 		bl	UART_SetConfig
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared:
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - CLKEN bits in the USART_CR2 register,
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 328              		.loc 1 558 3
 329 004c 7B68     		ldr	r3, [r7, #4]
 330 004e 1B68     		ldr	r3, [r3]
 331 0050 1A69     		ldr	r2, [r3, #16]
 332 0052 7B68     		ldr	r3, [r7, #4]
 333 0054 1B68     		ldr	r3, [r3]
 334 0056 22F40062 		bic	r2, r2, #2048
 335 005a 1A61     		str	r2, [r3, #16]
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 336              		.loc 1 559 3
 337 005c 7B68     		ldr	r3, [r7, #4]
 338 005e 1B68     		ldr	r3, [r3]
 339 0060 5A69     		ldr	r2, [r3, #20]
 340 0062 7B68     		ldr	r3, [r7, #4]
 341 0064 1B68     		ldr	r3, [r3]
 342 0066 22F02A02 		bic	r2, r2, #42
 343 006a 5A61     		str	r2, [r3, #20]
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 344              		.loc 1 562 3
 345 006c 7B68     		ldr	r3, [r7, #4]
 346 006e 1B68     		ldr	r3, [r3]
 347 0070 1A69     		ldr	r2, [r3, #16]
 348 0072 7B68     		ldr	r3, [r7, #4]
 349 0074 1B68     		ldr	r3, [r3]
 350 0076 42F48042 		orr	r2, r2, #16384
 351 007a 1A61     		str	r2, [r3, #16]
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 352              		.loc 1 565 3
ARM GAS  /tmp//ccY11c6d.s 			page 17


 353 007c 7B68     		ldr	r3, [r7, #4]
 354 007e 1B68     		ldr	r3, [r3]
 355 0080 1A69     		ldr	r2, [r3, #16]
 356 0082 7B68     		ldr	r3, [r7, #4]
 357 0084 1B68     		ldr	r3, [r3]
 358 0086 22F02002 		bic	r2, r2, #32
 359 008a 1A61     		str	r2, [r3, #16]
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, BreakDetectLength);
 360              		.loc 1 566 3
 361 008c 7B68     		ldr	r3, [r7, #4]
 362 008e 1B68     		ldr	r3, [r3]
 363 0090 1969     		ldr	r1, [r3, #16]
 364 0092 7B68     		ldr	r3, [r7, #4]
 365 0094 1B68     		ldr	r3, [r3]
 366 0096 3A68     		ldr	r2, [r7]
 367 0098 0A43     		orrs	r2, r2, r1
 368 009a 1A61     		str	r2, [r3, #16]
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 369              		.loc 1 569 3
 370 009c 7B68     		ldr	r3, [r7, #4]
 371 009e 1B68     		ldr	r3, [r3]
 372 00a0 DA68     		ldr	r2, [r3, #12]
 373 00a2 7B68     		ldr	r3, [r7, #4]
 374 00a4 1B68     		ldr	r3, [r3]
 375 00a6 42F40052 		orr	r2, r2, #8192
 376 00aa DA60     		str	r2, [r3, #12]
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state*/
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 377              		.loc 1 572 20
 378 00ac 7B68     		ldr	r3, [r7, #4]
 379 00ae 0022     		movs	r2, #0
 380 00b0 5A64     		str	r2, [r3, #68]
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 381              		.loc 1 573 17
 382 00b2 7B68     		ldr	r3, [r7, #4]
 383 00b4 2022     		movs	r2, #32
 384 00b6 83F84120 		strb	r2, [r3, #65]
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 385              		.loc 1 574 18
 386 00ba 7B68     		ldr	r3, [r7, #4]
 387 00bc 2022     		movs	r2, #32
 388 00be 83F84220 		strb	r2, [r3, #66]
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventType = HAL_UART_RXEVENT_TC;
 389              		.loc 1 575 22
 390 00c2 7B68     		ldr	r3, [r7, #4]
 391 00c4 0022     		movs	r2, #0
 392 00c6 5A63     		str	r2, [r3, #52]
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 393              		.loc 1 577 10
 394 00c8 0023     		movs	r3, #0
 395              	.L11:
 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 396              		.loc 1 578 1
ARM GAS  /tmp//ccY11c6d.s 			page 18


 397 00ca 1846     		mov	r0, r3
 398 00cc 0837     		adds	r7, r7, #8
 399              	.LCFI13:
 400              		.cfi_def_cfa_offset 8
 401 00ce BD46     		mov	sp, r7
 402              	.LCFI14:
 403              		.cfi_def_cfa_register 13
 404              		@ sp needed
 405 00d0 80BD     		pop	{r7, pc}
 406              		.cfi_endproc
 407              	.LFE67:
 409              		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 410              		.align	1
 411              		.global	HAL_MultiProcessor_Init
 412              		.syntax unified
 413              		.thumb
 414              		.thumb_func
 416              	HAL_MultiProcessor_Init:
 417              	.LFB68:
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the Multi-Processor mode according to the specified
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Address USART address
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  WakeUpMethod specifies the USART wake-up method.
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 418              		.loc 1 593 1
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 16
 421              		@ frame_needed = 1, uses_anonymous_args = 0
 422 0000 80B5     		push	{r7, lr}
 423              	.LCFI15:
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 7, -8
 426              		.cfi_offset 14, -4
 427 0002 84B0     		sub	sp, sp, #16
 428              	.LCFI16:
 429              		.cfi_def_cfa_offset 24
 430 0004 00AF     		add	r7, sp, #0
 431              	.LCFI17:
 432              		.cfi_def_cfa_register 7
 433 0006 F860     		str	r0, [r7, #12]
 434 0008 0B46     		mov	r3, r1
 435 000a 7A60     		str	r2, [r7, #4]
 436 000c FB72     		strb	r3, [r7, #11]
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 437              		.loc 1 595 6
 438 000e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp//ccY11c6d.s 			page 19


 439 0010 002B     		cmp	r3, #0
 440 0012 01D1     		bne	.L14
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 441              		.loc 1 597 12
 442 0014 0123     		movs	r3, #1
 443 0016 62E0     		b	.L15
 444              	.L14:
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the Address & wake up method parameters */
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_ADDRESS(Address));
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 445              		.loc 1 611 12
 446 0018 FB68     		ldr	r3, [r7, #12]
 447 001a 93F84130 		ldrb	r3, [r3, #65]
 448 001e DBB2     		uxtb	r3, r3
 449              		.loc 1 611 6
 450 0020 002B     		cmp	r3, #0
 451 0022 06D1     		bne	.L16
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 452              		.loc 1 614 17
 453 0024 FB68     		ldr	r3, [r7, #12]
 454 0026 0022     		movs	r2, #0
 455 0028 83F84020 		strb	r2, [r3, #64]
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 456              		.loc 1 628 5
 457 002c F868     		ldr	r0, [r7, #12]
 458 002e FFF7FEFF 		bl	HAL_UART_MspInit
 459              	.L16:
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp//ccY11c6d.s 			page 20


 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 460              		.loc 1 632 17
 461 0032 FB68     		ldr	r3, [r7, #12]
 462 0034 2422     		movs	r2, #36
 463 0036 83F84120 		strb	r2, [r3, #65]
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 464              		.loc 1 635 3
 465 003a FB68     		ldr	r3, [r7, #12]
 466 003c 1B68     		ldr	r3, [r3]
 467 003e DA68     		ldr	r2, [r3, #12]
 468 0040 FB68     		ldr	r3, [r7, #12]
 469 0042 1B68     		ldr	r3, [r3]
 470 0044 22F40052 		bic	r2, r2, #8192
 471 0048 DA60     		str	r2, [r3, #12]
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 472              		.loc 1 638 3
 473 004a F868     		ldr	r0, [r7, #12]
 474 004c FFF7FEFF 		bl	UART_SetConfig
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In Multi-Processor mode, the following bits must be kept cleared:
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 475              		.loc 1 643 3
 476 0050 FB68     		ldr	r3, [r7, #12]
 477 0052 1B68     		ldr	r3, [r3]
 478 0054 1A69     		ldr	r2, [r3, #16]
 479 0056 FB68     		ldr	r3, [r7, #12]
 480 0058 1B68     		ldr	r3, [r3]
 481 005a 22F49042 		bic	r2, r2, #18432
 482 005e 1A61     		str	r2, [r3, #16]
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 483              		.loc 1 644 3
 484 0060 FB68     		ldr	r3, [r7, #12]
 485 0062 1B68     		ldr	r3, [r3]
 486 0064 5A69     		ldr	r2, [r3, #20]
 487 0066 FB68     		ldr	r3, [r7, #12]
 488 0068 1B68     		ldr	r3, [r3]
 489 006a 22F02A02 		bic	r2, r2, #42
 490 006e 5A61     		str	r2, [r3, #20]
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the USART address node */
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 491              		.loc 1 647 3
 492 0070 FB68     		ldr	r3, [r7, #12]
 493 0072 1B68     		ldr	r3, [r3]
 494 0074 1A69     		ldr	r2, [r3, #16]
 495 0076 FB68     		ldr	r3, [r7, #12]
 496 0078 1B68     		ldr	r3, [r3]
 497 007a 22F00F02 		bic	r2, r2, #15
 498 007e 1A61     		str	r2, [r3, #16]
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, Address);
 499              		.loc 1 648 3
ARM GAS  /tmp//ccY11c6d.s 			page 21


 500 0080 FB68     		ldr	r3, [r7, #12]
 501 0082 1B68     		ldr	r3, [r3]
 502 0084 1969     		ldr	r1, [r3, #16]
 503 0086 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 504 0088 FB68     		ldr	r3, [r7, #12]
 505 008a 1B68     		ldr	r3, [r3]
 506 008c 0A43     		orrs	r2, r2, r1
 507 008e 1A61     		str	r2, [r3, #16]
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 508              		.loc 1 651 3
 509 0090 FB68     		ldr	r3, [r7, #12]
 510 0092 1B68     		ldr	r3, [r3]
 511 0094 DA68     		ldr	r2, [r3, #12]
 512 0096 FB68     		ldr	r3, [r7, #12]
 513 0098 1B68     		ldr	r3, [r3]
 514 009a 22F40062 		bic	r2, r2, #2048
 515 009e DA60     		str	r2, [r3, #12]
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, WakeUpMethod);
 516              		.loc 1 652 3
 517 00a0 FB68     		ldr	r3, [r7, #12]
 518 00a2 1B68     		ldr	r3, [r3]
 519 00a4 D968     		ldr	r1, [r3, #12]
 520 00a6 FB68     		ldr	r3, [r7, #12]
 521 00a8 1B68     		ldr	r3, [r3]
 522 00aa 7A68     		ldr	r2, [r7, #4]
 523 00ac 0A43     		orrs	r2, r2, r1
 524 00ae DA60     		str	r2, [r3, #12]
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 525              		.loc 1 655 3
 526 00b0 FB68     		ldr	r3, [r7, #12]
 527 00b2 1B68     		ldr	r3, [r3]
 528 00b4 DA68     		ldr	r2, [r3, #12]
 529 00b6 FB68     		ldr	r3, [r7, #12]
 530 00b8 1B68     		ldr	r3, [r3]
 531 00ba 42F40052 		orr	r2, r2, #8192
 532 00be DA60     		str	r2, [r3, #12]
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state */
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 533              		.loc 1 658 20
 534 00c0 FB68     		ldr	r3, [r7, #12]
 535 00c2 0022     		movs	r2, #0
 536 00c4 5A64     		str	r2, [r3, #68]
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 537              		.loc 1 659 17
 538 00c6 FB68     		ldr	r3, [r7, #12]
 539 00c8 2022     		movs	r2, #32
 540 00ca 83F84120 		strb	r2, [r3, #65]
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 541              		.loc 1 660 18
 542 00ce FB68     		ldr	r3, [r7, #12]
 543 00d0 2022     		movs	r2, #32
 544 00d2 83F84220 		strb	r2, [r3, #66]
ARM GAS  /tmp//ccY11c6d.s 			page 22


 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventType = HAL_UART_RXEVENT_TC;
 545              		.loc 1 661 22
 546 00d6 FB68     		ldr	r3, [r7, #12]
 547 00d8 0022     		movs	r2, #0
 548 00da 5A63     		str	r2, [r3, #52]
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 549              		.loc 1 663 10
 550 00dc 0023     		movs	r3, #0
 551              	.L15:
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 552              		.loc 1 664 1
 553 00de 1846     		mov	r0, r3
 554 00e0 1037     		adds	r7, r7, #16
 555              	.LCFI18:
 556              		.cfi_def_cfa_offset 8
 557 00e2 BD46     		mov	sp, r7
 558              	.LCFI19:
 559              		.cfi_def_cfa_register 13
 560              		@ sp needed
 561 00e4 80BD     		pop	{r7, pc}
 562              		.cfi_endproc
 563              	.LFE68:
 565              		.section	.text.HAL_UART_DeInit,"ax",%progbits
 566              		.align	1
 567              		.global	HAL_UART_DeInit
 568              		.syntax unified
 569              		.thumb
 570              		.thumb_func
 572              	HAL_UART_DeInit:
 573              	.LFB69:
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DeInitializes the UART peripheral.
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 574              		.loc 1 673 1
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 8
 577              		@ frame_needed = 1, uses_anonymous_args = 0
 578 0000 80B5     		push	{r7, lr}
 579              	.LCFI20:
 580              		.cfi_def_cfa_offset 8
 581              		.cfi_offset 7, -8
 582              		.cfi_offset 14, -4
 583 0002 82B0     		sub	sp, sp, #8
 584              	.LCFI21:
 585              		.cfi_def_cfa_offset 16
 586 0004 00AF     		add	r7, sp, #0
 587              	.LCFI22:
 588              		.cfi_def_cfa_register 7
 589 0006 7860     		str	r0, [r7, #4]
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
ARM GAS  /tmp//ccY11c6d.s 			page 23


 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 590              		.loc 1 675 6
 591 0008 7B68     		ldr	r3, [r7, #4]
 592 000a 002B     		cmp	r3, #0
 593 000c 01D1     		bne	.L18
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 594              		.loc 1 677 12
 595 000e 0123     		movs	r3, #1
 596 0010 24E0     		b	.L19
 597              	.L18:
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 598              		.loc 1 683 17
 599 0012 7B68     		ldr	r3, [r7, #4]
 600 0014 2422     		movs	r2, #36
 601 0016 83F84120 		strb	r2, [r3, #65]
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the Peripheral */
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 602              		.loc 1 686 3
 603 001a 7B68     		ldr	r3, [r7, #4]
 604 001c 1B68     		ldr	r3, [r3]
 605 001e DA68     		ldr	r2, [r3, #12]
 606 0020 7B68     		ldr	r3, [r7, #4]
 607 0022 1B68     		ldr	r3, [r3]
 608 0024 22F40052 		bic	r2, r2, #8192
 609 0028 DA60     		str	r2, [r3, #12]
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->MspDeInitCallback == NULL)
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspDeInitCallback = HAL_UART_MspDeInit;
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DeInit the low level hardware */
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->MspDeInitCallback(huart);
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DeInit the low level hardware */
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 610              		.loc 1 697 3
 611 002a 7868     		ldr	r0, [r7, #4]
 612 002c FFF7FEFF 		bl	HAL_UART_MspDeInit
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 613              		.loc 1 700 20
 614 0030 7B68     		ldr	r3, [r7, #4]
 615 0032 0022     		movs	r2, #0
 616 0034 5A64     		str	r2, [r3, #68]
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 617              		.loc 1 701 17
 618 0036 7B68     		ldr	r3, [r7, #4]
 619 0038 0022     		movs	r2, #0
ARM GAS  /tmp//ccY11c6d.s 			page 24


 620 003a 83F84120 		strb	r2, [r3, #65]
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 621              		.loc 1 702 18
 622 003e 7B68     		ldr	r3, [r7, #4]
 623 0040 0022     		movs	r2, #0
 624 0042 83F84220 		strb	r2, [r3, #66]
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 625              		.loc 1 703 24
 626 0046 7B68     		ldr	r3, [r7, #4]
 627 0048 0022     		movs	r2, #0
 628 004a 1A63     		str	r2, [r3, #48]
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventType = HAL_UART_RXEVENT_TC;
 629              		.loc 1 704 22
 630 004c 7B68     		ldr	r3, [r7, #4]
 631 004e 0022     		movs	r2, #0
 632 0050 5A63     		str	r2, [r3, #52]
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlock */
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 633              		.loc 1 707 3
 634 0052 7B68     		ldr	r3, [r7, #4]
 635 0054 0022     		movs	r2, #0
 636 0056 83F84020 		strb	r2, [r3, #64]
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 637              		.loc 1 709 10
 638 005a 0023     		movs	r3, #0
 639              	.L19:
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 640              		.loc 1 710 1
 641 005c 1846     		mov	r0, r3
 642 005e 0837     		adds	r7, r7, #8
 643              	.LCFI23:
 644              		.cfi_def_cfa_offset 8
 645 0060 BD46     		mov	sp, r7
 646              	.LCFI24:
 647              		.cfi_def_cfa_register 13
 648              		@ sp needed
 649 0062 80BD     		pop	{r7, pc}
 650              		.cfi_endproc
 651              	.LFE69:
 653              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 654              		.align	1
 655              		.weak	HAL_UART_MspInit
 656              		.syntax unified
 657              		.thumb
 658              		.thumb_func
 660              	HAL_UART_MspInit:
 661              	.LFB70:
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART MSP Init.
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
ARM GAS  /tmp//ccY11c6d.s 			page 25


 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 662              		.loc 1 719 1
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 8
 665              		@ frame_needed = 1, uses_anonymous_args = 0
 666              		@ link register save eliminated.
 667 0000 80B4     		push	{r7}
 668              	.LCFI25:
 669              		.cfi_def_cfa_offset 4
 670              		.cfi_offset 7, -4
 671 0002 83B0     		sub	sp, sp, #12
 672              	.LCFI26:
 673              		.cfi_def_cfa_offset 16
 674 0004 00AF     		add	r7, sp, #0
 675              	.LCFI27:
 676              		.cfi_def_cfa_register 7
 677 0006 7860     		str	r0, [r7, #4]
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_MspInit could be implemented in the user file
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 678              		.loc 1 725 1
 679 0008 00BF     		nop
 680 000a 0C37     		adds	r7, r7, #12
 681              	.LCFI28:
 682              		.cfi_def_cfa_offset 4
 683 000c BD46     		mov	sp, r7
 684              	.LCFI29:
 685              		.cfi_def_cfa_register 13
 686              		@ sp needed
 687 000e 80BC     		pop	{r7}
 688              	.LCFI30:
 689              		.cfi_restore 7
 690              		.cfi_def_cfa_offset 0
 691 0010 7047     		bx	lr
 692              		.cfi_endproc
 693              	.LFE70:
 695              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 696              		.align	1
 697              		.weak	HAL_UART_MspDeInit
 698              		.syntax unified
 699              		.thumb
 700              		.thumb_func
 702              	HAL_UART_MspDeInit:
 703              	.LFB71:
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART MSP DeInit.
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 704              		.loc 1 734 1
ARM GAS  /tmp//ccY11c6d.s 			page 26


 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 8
 707              		@ frame_needed = 1, uses_anonymous_args = 0
 708              		@ link register save eliminated.
 709 0000 80B4     		push	{r7}
 710              	.LCFI31:
 711              		.cfi_def_cfa_offset 4
 712              		.cfi_offset 7, -4
 713 0002 83B0     		sub	sp, sp, #12
 714              	.LCFI32:
 715              		.cfi_def_cfa_offset 16
 716 0004 00AF     		add	r7, sp, #0
 717              	.LCFI33:
 718              		.cfi_def_cfa_register 7
 719 0006 7860     		str	r0, [r7, #4]
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_MspDeInit could be implemented in the user file
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 720              		.loc 1 740 1
 721 0008 00BF     		nop
 722 000a 0C37     		adds	r7, r7, #12
 723              	.LCFI34:
 724              		.cfi_def_cfa_offset 4
 725 000c BD46     		mov	sp, r7
 726              	.LCFI35:
 727              		.cfi_def_cfa_register 13
 728              		@ sp needed
 729 000e 80BC     		pop	{r7}
 730              	.LCFI36:
 731              		.cfi_restore 7
 732              		.cfi_def_cfa_offset 0
 733 0010 7047     		bx	lr
 734              		.cfi_endproc
 735              	.LFE71:
 737              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 738              		.align	1
 739              		.global	HAL_UART_Transmit
 740              		.syntax unified
 741              		.thumb
 742              		.thumb_func
 744              	HAL_UART_Transmit:
 745              	.LFB72:
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Register a User UART Callback
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   The HAL_UART_RegisterCallback() may be called before HAL_UART_Init(), HAL_HalfDuplex_In
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         HAL_MultiProcessor_Init() to register callbacks for HAL_UART_MSPINIT_CB_ID and HAL_UART
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart uart handle
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be registered
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
ARM GAS  /tmp//ccY11c6d.s 			page 27


 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pCallback pointer to the Callback function
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef C
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                                             pUART_CallbackTypeDef pCallback)
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (pCallback == NULL)
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxHalfCpltCallback = pCallback;
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxCpltCallback = pCallback;
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxHalfCpltCallback = pCallback;
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxCpltCallback = pCallback;
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback = pCallback;
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortCpltCallback = pCallback;
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = pCallback;
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
ARM GAS  /tmp//ccY11c6d.s 			page 28


 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = pCallback;
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else if (huart->gState == HAL_UART_STATE_RESET)
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Return error status */
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Unregister an UART Callback
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART callaback is redirected to the weak predefined callback
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   The HAL_UART_UnRegisterCallback() may be called before HAL_UART_Init(), HAL_HalfDuplex_
ARM GAS  /tmp//ccY11c6d.s 			page 29


 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         HAL_LIN_Init(), HAL_MultiProcessor_Init() to un-register callbacks for HAL_UART_MSPINIT
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         and HAL_UART_MSPDEINIT_CB_ID
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart uart handle
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be unregistered
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_UART_STATE_READY == huart->gState)
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxHalfCpltCallback = HAL_UART_TxHalfCpltCallback;               /* Legacy weak  TxHa
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxCpltCallback = HAL_UART_TxCpltCallback;                       /* Legacy weak TxCpl
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxHalfCpltCallback = HAL_UART_RxHalfCpltCallback;               /* Legacy weak RxHal
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxCpltCallback = HAL_UART_RxCpltCallback;                       /* Legacy weak RxCpl
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback = HAL_UART_ErrorCallback;                         /* Legacy weak Error
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortCpltCallback = HAL_UART_AbortCpltCallback;                 /* Legacy weak Abort
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak Abort
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = HAL_UART_AbortReceiveCpltCallback;   /* Legacy weak Abort
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp//ccY11c6d.s 			page 30


 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;                             /* Legacy weak MspIn
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;                         /* Legacy weak MspDe
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else if (HAL_UART_STATE_RESET == huart->gState)
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Return error status */
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Register a User UART Rx Event Callback
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart     Uart handle
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pCallback Pointer to the Rx Event Callback function
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
ARM GAS  /tmp//ccY11c6d.s 			page 31


 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallback
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (pCallback == NULL)
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process locked */
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback = pCallback;
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Release Lock */
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UnRegister the UART Rx Event Callback
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART Rx Event Callback is redirected to the weak HAL_UARTEx_RxEventCallback() predefine
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart     Uart handle
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterRxEventCallback(UART_HandleTypeDef *huart)
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process locked */
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback = HAL_UARTEx_RxEventCallback; /* Legacy weak UART Rx Event Callback  */
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Release Lock */
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
ARM GAS  /tmp//ccY11c6d.s 			page 32


1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief UART Transmit and Receive functions
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                       ##### IO operation functions #####
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and Half duplex data transfers.
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) There are two modes of transfer:
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Blocking mode: The communication is performed in polling mode.
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL status of all data processing is returned by the same function
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            after finishing transfer.
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Non-Blocking mode: The communication is performed using Interrupts
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            or DMA, these API's return the HAL status.
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The end of the data processing will be indicated through the
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            using DMA mode.
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            will be executed respectively at the end of the transmit or receive process
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a communication error is
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Blocking mode API's are :
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit()
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive()
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API's with Interrupt are :
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit_IT()
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive_IT()
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_IRQHandler()
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API's with DMA are :
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit_DMA()
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive_DMA()
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAPause()
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAResume()
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAStop()
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in Non_Blocking mode:
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_TxHalfCpltCallback()
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_TxCpltCallback()
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_RxHalfCpltCallback()
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_RxCpltCallback()
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_ErrorCallback()
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Abort()
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit()
ARM GAS  /tmp//ccY11c6d.s 			page 33


1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceive()
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Abort_IT()
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit_IT()
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceive_IT()
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For Abort services based on interrupts (HAL_UART_Abortxxx_IT), a set of Abort Complete Call
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortCpltCallback()
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmitCpltCallback()
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceiveCpltCallback()
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) A Rx Event Reception Callback (Rx event notification) is available for Non_Blocking modes o
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_RxEventCallback()
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         Errors are handled as follows :
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but er
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in Inte
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Received character is then retrieved and stored in Rx buffer, Error code is set to allow
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            and HAL_UART_ErrorCallback() user callback is executed. Transfer is kept ongoing on UART
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            If user wants to abort it, Abort services should be called by user.
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Error is considered as Blocking : Transfer could not be completed properly and is aborte
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Error code is set to allow user to identify error type, and HAL_UART_ErrorCallback() use
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     -@- In the Half duplex communication, it is forbidden to run the transmit
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX can't be useful.
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in blocking mode.
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size,
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 746              		.loc 1 1139 1
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 32
 749              		@ frame_needed = 1, uses_anonymous_args = 0
 750 0000 80B5     		push	{r7, lr}
 751              	.LCFI37:
 752              		.cfi_def_cfa_offset 8
 753              		.cfi_offset 7, -8
 754              		.cfi_offset 14, -4
 755 0002 8AB0     		sub	sp, sp, #40
 756              	.LCFI38:
 757              		.cfi_def_cfa_offset 48
ARM GAS  /tmp//ccY11c6d.s 			page 34


 758 0004 02AF     		add	r7, sp, #8
 759              	.LCFI39:
 760              		.cfi_def_cfa 7, 40
 761 0006 F860     		str	r0, [r7, #12]
 762 0008 B960     		str	r1, [r7, #8]
 763 000a 3B60     		str	r3, [r7]
 764 000c 1346     		mov	r3, r2	@ movhi
 765 000e FB80     		strh	r3, [r7, #6]	@ movhi
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   const uint8_t  *pdata8bits;
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   const uint16_t *pdata16bits;
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tickstart = 0U;
 766              		.loc 1 1142 12
 767 0010 0023     		movs	r3, #0
 768 0012 7B61     		str	r3, [r7, #20]
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 769              		.loc 1 1145 12
 770 0014 FB68     		ldr	r3, [r7, #12]
 771 0016 93F84130 		ldrb	r3, [r3, #65]
 772 001a DBB2     		uxtb	r3, r3
 773              		.loc 1 1145 6
 774 001c 202B     		cmp	r3, #32
 775 001e 75D1     		bne	.L23
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 776              		.loc 1 1147 8
 777 0020 BB68     		ldr	r3, [r7, #8]
 778 0022 002B     		cmp	r3, #0
 779 0024 02D0     		beq	.L24
 780              		.loc 1 1147 25 discriminator 1
 781 0026 FB88     		ldrh	r3, [r7, #6]
 782 0028 002B     		cmp	r3, #0
 783 002a 01D1     		bne	.L25
 784              	.L24:
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
 785              		.loc 1 1149 15
 786 002c 0123     		movs	r3, #1
 787 002e 6EE0     		b	.L26
 788              	.L25:
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 789              		.loc 1 1152 22
 790 0030 FB68     		ldr	r3, [r7, #12]
 791 0032 0022     		movs	r2, #0
 792 0034 5A64     		str	r2, [r3, #68]
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 793              		.loc 1 1153 19
 794 0036 FB68     		ldr	r3, [r7, #12]
 795 0038 2122     		movs	r2, #33
 796 003a 83F84120 		strb	r2, [r3, #65]
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout management */
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
 797              		.loc 1 1156 17
ARM GAS  /tmp//ccY11c6d.s 			page 35


 798 003e FFF7FEFF 		bl	HAL_GetTick
 799 0042 7861     		str	r0, [r7, #20]
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 800              		.loc 1 1158 23
 801 0044 FB68     		ldr	r3, [r7, #12]
 802 0046 FA88     		ldrh	r2, [r7, #6]	@ movhi
 803 0048 9A84     		strh	r2, [r3, #36]	@ movhi
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 804              		.loc 1 1159 24
 805 004a FB68     		ldr	r3, [r7, #12]
 806 004c FA88     		ldrh	r2, [r7, #6]	@ movhi
 807 004e DA84     		strh	r2, [r3, #38]	@ movhi
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 808              		.loc 1 1162 21
 809 0050 FB68     		ldr	r3, [r7, #12]
 810 0052 9B68     		ldr	r3, [r3, #8]
 811              		.loc 1 1162 8
 812 0054 B3F5805F 		cmp	r3, #4096
 813 0058 08D1     		bne	.L27
 814              		.loc 1 1162 71 discriminator 1
 815 005a FB68     		ldr	r3, [r7, #12]
 816 005c 1B69     		ldr	r3, [r3, #16]
 817              		.loc 1 1162 56 discriminator 1
 818 005e 002B     		cmp	r3, #0
 819 0060 04D1     		bne	.L27
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 820              		.loc 1 1164 19
 821 0062 0023     		movs	r3, #0
 822 0064 FB61     		str	r3, [r7, #28]
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (const uint16_t *) pData;
 823              		.loc 1 1165 19
 824 0066 BB68     		ldr	r3, [r7, #8]
 825 0068 BB61     		str	r3, [r7, #24]
 826 006a 03E0     		b	.L28
 827              	.L27:
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = pData;
 828              		.loc 1 1169 19
 829 006c BB68     		ldr	r3, [r7, #8]
 830 006e FB61     		str	r3, [r7, #28]
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = NULL;
 831              		.loc 1 1170 19
 832 0070 0023     		movs	r3, #0
 833 0072 BB61     		str	r3, [r7, #24]
 834              	.L28:
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while (huart->TxXferCount > 0U)
 835              		.loc 1 1173 11
 836 0074 2EE0     		b	.L29
 837              	.L33:
ARM GAS  /tmp//ccY11c6d.s 			page 36


1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 838              		.loc 1 1175 11
 839 0076 3B68     		ldr	r3, [r7]
 840 0078 0093     		str	r3, [sp]
 841 007a 7B69     		ldr	r3, [r7, #20]
 842 007c 0022     		movs	r2, #0
 843 007e 8021     		movs	r1, #128
 844 0080 F868     		ldr	r0, [r7, #12]
 845 0082 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 846 0086 0346     		mov	r3, r0
 847              		.loc 1 1175 10 discriminator 1
 848 0088 002B     		cmp	r3, #0
 849 008a 05D0     		beq	.L30
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->gState = HAL_UART_STATE_READY;
 850              		.loc 1 1177 23
 851 008c FB68     		ldr	r3, [r7, #12]
 852 008e 2022     		movs	r2, #32
 853 0090 83F84120 		strb	r2, [r3, #65]
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         return HAL_TIMEOUT;
 854              		.loc 1 1179 16
 855 0094 0323     		movs	r3, #3
 856 0096 3AE0     		b	.L26
 857              	.L30:
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (pdata8bits == NULL)
 858              		.loc 1 1181 10
 859 0098 FB69     		ldr	r3, [r7, #28]
 860 009a 002B     		cmp	r3, #0
 861 009c 0BD1     		bne	.L31
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 862              		.loc 1 1183 42
 863 009e BB69     		ldr	r3, [r7, #24]
 864 00a0 1B88     		ldrh	r3, [r3]
 865              		.loc 1 1183 31
 866 00a2 1A46     		mov	r2, r3
 867              		.loc 1 1183 14
 868 00a4 FB68     		ldr	r3, [r7, #12]
 869 00a6 1B68     		ldr	r3, [r3]
 870              		.loc 1 1183 31
 871 00a8 C2F30802 		ubfx	r2, r2, #0, #9
 872              		.loc 1 1183 29
 873 00ac 5A60     		str	r2, [r3, #4]
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata16bits++;
 874              		.loc 1 1184 20
 875 00ae BB69     		ldr	r3, [r7, #24]
 876 00b0 0233     		adds	r3, r3, #2
 877 00b2 BB61     		str	r3, [r7, #24]
 878 00b4 07E0     		b	.L32
 879              	.L31:
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
ARM GAS  /tmp//ccY11c6d.s 			page 37


 880              		.loc 1 1188 41
 881 00b6 FB69     		ldr	r3, [r7, #28]
 882 00b8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 883              		.loc 1 1188 14
 884 00ba FB68     		ldr	r3, [r7, #12]
 885 00bc 1B68     		ldr	r3, [r3]
 886              		.loc 1 1188 29
 887 00be 5A60     		str	r2, [r3, #4]
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata8bits++;
 888              		.loc 1 1189 19
 889 00c0 FB69     		ldr	r3, [r7, #28]
 890 00c2 0133     		adds	r3, r3, #1
 891 00c4 FB61     		str	r3, [r7, #28]
 892              	.L32:
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->TxXferCount--;
 893              		.loc 1 1191 12
 894 00c6 FB68     		ldr	r3, [r7, #12]
 895 00c8 DB8C     		ldrh	r3, [r3, #38]	@ movhi
 896 00ca 9BB2     		uxth	r3, r3
 897              		.loc 1 1191 25
 898 00cc 013B     		subs	r3, r3, #1
 899 00ce 9AB2     		uxth	r2, r3
 900 00d0 FB68     		ldr	r3, [r7, #12]
 901 00d2 DA84     		strh	r2, [r3, #38]	@ movhi
 902              	.L29:
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 903              		.loc 1 1173 17
 904 00d4 FB68     		ldr	r3, [r7, #12]
 905 00d6 DB8C     		ldrh	r3, [r3, #38]	@ movhi
 906 00d8 9BB2     		uxth	r3, r3
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 907              		.loc 1 1173 31
 908 00da 002B     		cmp	r3, #0
 909 00dc CBD1     		bne	.L33
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 910              		.loc 1 1194 9
 911 00de 3B68     		ldr	r3, [r7]
 912 00e0 0093     		str	r3, [sp]
 913 00e2 7B69     		ldr	r3, [r7, #20]
 914 00e4 0022     		movs	r2, #0
 915 00e6 4021     		movs	r1, #64
 916 00e8 F868     		ldr	r0, [r7, #12]
 917 00ea FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 918 00ee 0346     		mov	r3, r0
 919              		.loc 1 1194 8 discriminator 1
 920 00f0 002B     		cmp	r3, #0
 921 00f2 05D0     		beq	.L34
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
 922              		.loc 1 1196 21
 923 00f4 FB68     		ldr	r3, [r7, #12]
 924 00f6 2022     		movs	r2, #32
 925 00f8 83F84120 		strb	r2, [r3, #65]
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp//ccY11c6d.s 			page 38


1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_TIMEOUT;
 926              		.loc 1 1198 14
 927 00fc 0323     		movs	r3, #3
 928 00fe 06E0     		b	.L26
 929              	.L34:
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 930              		.loc 1 1202 19
 931 0100 FB68     		ldr	r3, [r7, #12]
 932 0102 2022     		movs	r2, #32
 933 0104 83F84120 		strb	r2, [r3, #65]
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 934              		.loc 1 1204 12
 935 0108 0023     		movs	r3, #0
 936 010a 00E0     		b	.L26
 937              	.L23:
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 938              		.loc 1 1208 12
 939 010c 0223     		movs	r3, #2
 940              	.L26:
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 941              		.loc 1 1210 1
 942 010e 1846     		mov	r0, r3
 943 0110 2037     		adds	r7, r7, #32
 944              	.LCFI40:
 945              		.cfi_def_cfa_offset 8
 946 0112 BD46     		mov	sp, r7
 947              	.LCFI41:
 948              		.cfi_def_cfa_register 13
 949              		@ sp needed
 950 0114 80BD     		pop	{r7, pc}
 951              		.cfi_endproc
 952              	.LFE72:
 954              		.section	.text.HAL_UART_Receive,"ax",%progbits
 955              		.align	1
 956              		.global	HAL_UART_Receive
 957              		.syntax unified
 958              		.thumb
 959              		.thumb_func
 961              	HAL_UART_Receive:
 962              	.LFB73:
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in blocking mode.
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
ARM GAS  /tmp//ccY11c6d.s 			page 39


1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 963              		.loc 1 1225 1
 964              		.cfi_startproc
 965              		@ args = 0, pretend = 0, frame = 32
 966              		@ frame_needed = 1, uses_anonymous_args = 0
 967 0000 80B5     		push	{r7, lr}
 968              	.LCFI42:
 969              		.cfi_def_cfa_offset 8
 970              		.cfi_offset 7, -8
 971              		.cfi_offset 14, -4
 972 0002 8AB0     		sub	sp, sp, #40
 973              	.LCFI43:
 974              		.cfi_def_cfa_offset 48
 975 0004 02AF     		add	r7, sp, #8
 976              	.LCFI44:
 977              		.cfi_def_cfa 7, 40
 978 0006 F860     		str	r0, [r7, #12]
 979 0008 B960     		str	r1, [r7, #8]
 980 000a 3B60     		str	r3, [r7]
 981 000c 1346     		mov	r3, r2	@ movhi
 982 000e FB80     		strh	r3, [r7, #6]	@ movhi
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint8_t  *pdata8bits;
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *pdata16bits;
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tickstart = 0U;
 983              		.loc 1 1228 12
 984 0010 0023     		movs	r3, #0
 985 0012 7B61     		str	r3, [r7, #20]
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 986              		.loc 1 1231 12
 987 0014 FB68     		ldr	r3, [r7, #12]
 988 0016 93F84230 		ldrb	r3, [r3, #66]
 989 001a DBB2     		uxtb	r3, r3
 990              		.loc 1 1231 6
 991 001c 202B     		cmp	r3, #32
 992 001e 40F08180 		bne	.L36
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 993              		.loc 1 1233 8
 994 0022 BB68     		ldr	r3, [r7, #8]
 995 0024 002B     		cmp	r3, #0
 996 0026 02D0     		beq	.L37
 997              		.loc 1 1233 25 discriminator 1
 998 0028 FB88     		ldrh	r3, [r7, #6]
 999 002a 002B     		cmp	r3, #0
 1000 002c 01D1     		bne	.L38
 1001              	.L37:
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
 1002              		.loc 1 1235 15
 1003 002e 0123     		movs	r3, #1
ARM GAS  /tmp//ccY11c6d.s 			page 40


 1004 0030 79E0     		b	.L39
 1005              	.L38:
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1006              		.loc 1 1238 22
 1007 0032 FB68     		ldr	r3, [r7, #12]
 1008 0034 0022     		movs	r2, #0
 1009 0036 5A64     		str	r2, [r3, #68]
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1010              		.loc 1 1239 20
 1011 0038 FB68     		ldr	r3, [r7, #12]
 1012 003a 2222     		movs	r2, #34
 1013 003c 83F84220 		strb	r2, [r3, #66]
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1014              		.loc 1 1240 26
 1015 0040 FB68     		ldr	r3, [r7, #12]
 1016 0042 0022     		movs	r2, #0
 1017 0044 1A63     		str	r2, [r3, #48]
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout management */
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
 1018              		.loc 1 1243 17
 1019 0046 FFF7FEFF 		bl	HAL_GetTick
 1020 004a 7861     		str	r0, [r7, #20]
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferSize = Size;
 1021              		.loc 1 1245 23
 1022 004c FB68     		ldr	r3, [r7, #12]
 1023 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1024 0050 9A85     		strh	r2, [r3, #44]	@ movhi
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
 1025              		.loc 1 1246 24
 1026 0052 FB68     		ldr	r3, [r7, #12]
 1027 0054 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1028 0056 DA85     		strh	r2, [r3, #46]	@ movhi
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1029              		.loc 1 1249 21
 1030 0058 FB68     		ldr	r3, [r7, #12]
 1031 005a 9B68     		ldr	r3, [r3, #8]
 1032              		.loc 1 1249 8
 1033 005c B3F5805F 		cmp	r3, #4096
 1034 0060 08D1     		bne	.L40
 1035              		.loc 1 1249 71 discriminator 1
 1036 0062 FB68     		ldr	r3, [r7, #12]
 1037 0064 1B69     		ldr	r3, [r3, #16]
 1038              		.loc 1 1249 56 discriminator 1
 1039 0066 002B     		cmp	r3, #0
 1040 0068 04D1     		bne	.L40
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 1041              		.loc 1 1251 19
 1042 006a 0023     		movs	r3, #0
 1043 006c FB61     		str	r3, [r7, #28]
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
ARM GAS  /tmp//ccY11c6d.s 			page 41


 1044              		.loc 1 1252 19
 1045 006e BB68     		ldr	r3, [r7, #8]
 1046 0070 BB61     		str	r3, [r7, #24]
 1047 0072 03E0     		b	.L41
 1048              	.L40:
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = pData;
 1049              		.loc 1 1256 19
 1050 0074 BB68     		ldr	r3, [r7, #8]
 1051 0076 FB61     		str	r3, [r7, #28]
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = NULL;
 1052              		.loc 1 1257 19
 1053 0078 0023     		movs	r3, #0
 1054 007a BB61     		str	r3, [r7, #24]
 1055              	.L41:
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check the remain data to be received */
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
 1056              		.loc 1 1261 11
 1057 007c 47E0     		b	.L42
 1058              	.L49:
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 1059              		.loc 1 1263 11
 1060 007e 3B68     		ldr	r3, [r7]
 1061 0080 0093     		str	r3, [sp]
 1062 0082 7B69     		ldr	r3, [r7, #20]
 1063 0084 0022     		movs	r2, #0
 1064 0086 2021     		movs	r1, #32
 1065 0088 F868     		ldr	r0, [r7, #12]
 1066 008a FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1067 008e 0346     		mov	r3, r0
 1068              		.loc 1 1263 10 discriminator 1
 1069 0090 002B     		cmp	r3, #0
 1070 0092 05D0     		beq	.L43
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 1071              		.loc 1 1265 24
 1072 0094 FB68     		ldr	r3, [r7, #12]
 1073 0096 2022     		movs	r2, #32
 1074 0098 83F84220 		strb	r2, [r3, #66]
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         return HAL_TIMEOUT;
 1075              		.loc 1 1267 16
 1076 009c 0323     		movs	r3, #3
 1077 009e 42E0     		b	.L39
 1078              	.L43:
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (pdata8bits == NULL)
 1079              		.loc 1 1269 10
 1080 00a0 FB69     		ldr	r3, [r7, #28]
 1081 00a2 002B     		cmp	r3, #0
 1082 00a4 0CD1     		bne	.L44
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
ARM GAS  /tmp//ccY11c6d.s 			page 42


1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 1083              		.loc 1 1271 40
 1084 00a6 FB68     		ldr	r3, [r7, #12]
 1085 00a8 1B68     		ldr	r3, [r3]
 1086              		.loc 1 1271 50
 1087 00aa 5B68     		ldr	r3, [r3, #4]
 1088              		.loc 1 1271 24
 1089 00ac 9BB2     		uxth	r3, r3
 1090 00ae C3F30803 		ubfx	r3, r3, #0, #9
 1091 00b2 9AB2     		uxth	r2, r3
 1092              		.loc 1 1271 22
 1093 00b4 BB69     		ldr	r3, [r7, #24]
 1094 00b6 1A80     		strh	r2, [r3]	@ movhi
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata16bits++;
 1095              		.loc 1 1272 20
 1096 00b8 BB69     		ldr	r3, [r7, #24]
 1097 00ba 0233     		adds	r3, r3, #2
 1098 00bc BB61     		str	r3, [r7, #24]
 1099 00be 1FE0     		b	.L45
 1100              	.L44:
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORD
 1101              		.loc 1 1276 25
 1102 00c0 FB68     		ldr	r3, [r7, #12]
 1103 00c2 9B68     		ldr	r3, [r3, #8]
 1104              		.loc 1 1276 12
 1105 00c4 B3F5805F 		cmp	r3, #4096
 1106 00c8 07D0     		beq	.L46
 1107              		.loc 1 1276 76 discriminator 1
 1108 00ca FB68     		ldr	r3, [r7, #12]
 1109 00cc 9B68     		ldr	r3, [r3, #8]
 1110              		.loc 1 1276 60 discriminator 1
 1111 00ce 002B     		cmp	r3, #0
 1112 00d0 0AD1     		bne	.L47
 1113              		.loc 1 1276 126 discriminator 2
 1114 00d2 FB68     		ldr	r3, [r7, #12]
 1115 00d4 1B69     		ldr	r3, [r3, #16]
 1116              		.loc 1 1276 111 discriminator 2
 1117 00d6 002B     		cmp	r3, #0
 1118 00d8 06D1     		bne	.L47
 1119              	.L46:
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 1120              		.loc 1 1278 40
 1121 00da FB68     		ldr	r3, [r7, #12]
 1122 00dc 1B68     		ldr	r3, [r3]
 1123              		.loc 1 1278 50
 1124 00de 5B68     		ldr	r3, [r3, #4]
 1125              		.loc 1 1278 25
 1126 00e0 DAB2     		uxtb	r2, r3
 1127              		.loc 1 1278 23
 1128 00e2 FB69     		ldr	r3, [r7, #28]
 1129 00e4 1A70     		strb	r2, [r3]
 1130 00e6 08E0     		b	.L48
 1131              	.L47:
ARM GAS  /tmp//ccY11c6d.s 			page 43


1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 1132              		.loc 1 1282 40
 1133 00e8 FB68     		ldr	r3, [r7, #12]
 1134 00ea 1B68     		ldr	r3, [r3]
 1135              		.loc 1 1282 50
 1136 00ec 5B68     		ldr	r3, [r3, #4]
 1137              		.loc 1 1282 25
 1138 00ee DBB2     		uxtb	r3, r3
 1139 00f0 03F07F03 		and	r3, r3, #127
 1140 00f4 DAB2     		uxtb	r2, r3
 1141              		.loc 1 1282 23
 1142 00f6 FB69     		ldr	r3, [r7, #28]
 1143 00f8 1A70     		strb	r2, [r3]
 1144              	.L48:
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata8bits++;
 1145              		.loc 1 1284 19
 1146 00fa FB69     		ldr	r3, [r7, #28]
 1147 00fc 0133     		adds	r3, r3, #1
 1148 00fe FB61     		str	r3, [r7, #28]
 1149              	.L45:
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxXferCount--;
 1150              		.loc 1 1286 12
 1151 0100 FB68     		ldr	r3, [r7, #12]
 1152 0102 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 1153 0104 9BB2     		uxth	r3, r3
 1154              		.loc 1 1286 25
 1155 0106 013B     		subs	r3, r3, #1
 1156 0108 9AB2     		uxth	r2, r3
 1157 010a FB68     		ldr	r3, [r7, #12]
 1158 010c DA85     		strh	r2, [r3, #46]	@ movhi
 1159              	.L42:
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1160              		.loc 1 1261 17
 1161 010e FB68     		ldr	r3, [r7, #12]
 1162 0110 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 1163 0112 9BB2     		uxth	r3, r3
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1164              		.loc 1 1261 31
 1165 0114 002B     		cmp	r3, #0
 1166 0116 B2D1     		bne	.L49
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 1167              		.loc 1 1290 20
 1168 0118 FB68     		ldr	r3, [r7, #12]
 1169 011a 2022     		movs	r2, #32
 1170 011c 83F84220 		strb	r2, [r3, #66]
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1171              		.loc 1 1292 12
 1172 0120 0023     		movs	r3, #0
ARM GAS  /tmp//ccY11c6d.s 			page 44


 1173 0122 00E0     		b	.L39
 1174              	.L36:
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1175              		.loc 1 1296 12
 1176 0124 0223     		movs	r3, #2
 1177              	.L39:
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1178              		.loc 1 1298 1
 1179 0126 1846     		mov	r0, r3
 1180 0128 2037     		adds	r7, r7, #32
 1181              	.LCFI45:
 1182              		.cfi_def_cfa_offset 8
 1183 012a BD46     		mov	sp, r7
 1184              	.LCFI46:
 1185              		.cfi_def_cfa_register 13
 1186              		@ sp needed
 1187 012c 80BD     		pop	{r7, pc}
 1188              		.cfi_endproc
 1189              	.LFE73:
 1191              		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
 1192              		.align	1
 1193              		.global	HAL_UART_Transmit_IT
 1194              		.syntax unified
 1195              		.thumb
 1196              		.thumb_func
 1198              	HAL_UART_Transmit_IT:
 1199              	.LFB74:
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Si
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1200              		.loc 1 1312 1
 1201              		.cfi_startproc
 1202              		@ args = 0, pretend = 0, frame = 16
 1203              		@ frame_needed = 1, uses_anonymous_args = 0
 1204              		@ link register save eliminated.
 1205 0000 80B4     		push	{r7}
 1206              	.LCFI47:
 1207              		.cfi_def_cfa_offset 4
 1208              		.cfi_offset 7, -4
 1209 0002 85B0     		sub	sp, sp, #20
 1210              	.LCFI48:
 1211              		.cfi_def_cfa_offset 24
ARM GAS  /tmp//ccY11c6d.s 			page 45


 1212 0004 00AF     		add	r7, sp, #0
 1213              	.LCFI49:
 1214              		.cfi_def_cfa_register 7
 1215 0006 F860     		str	r0, [r7, #12]
 1216 0008 B960     		str	r1, [r7, #8]
 1217 000a 1346     		mov	r3, r2
 1218 000c FB80     		strh	r3, [r7, #6]	@ movhi
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 1219              		.loc 1 1314 12
 1220 000e FB68     		ldr	r3, [r7, #12]
 1221 0010 93F84130 		ldrb	r3, [r3, #65]
 1222 0014 DBB2     		uxtb	r3, r3
 1223              		.loc 1 1314 6
 1224 0016 202B     		cmp	r3, #32
 1225 0018 21D1     		bne	.L51
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1226              		.loc 1 1316 8
 1227 001a BB68     		ldr	r3, [r7, #8]
 1228 001c 002B     		cmp	r3, #0
 1229 001e 02D0     		beq	.L52
 1230              		.loc 1 1316 25 discriminator 1
 1231 0020 FB88     		ldrh	r3, [r7, #6]
 1232 0022 002B     		cmp	r3, #0
 1233 0024 01D1     		bne	.L53
 1234              	.L52:
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1235              		.loc 1 1318 14
 1236 0026 0123     		movs	r3, #1
 1237 0028 1AE0     		b	.L54
 1238              	.L53:
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1239              		.loc 1 1321 23
 1240 002a FB68     		ldr	r3, [r7, #12]
 1241 002c BA68     		ldr	r2, [r7, #8]
 1242 002e 1A62     		str	r2, [r3, #32]
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 1243              		.loc 1 1322 23
 1244 0030 FB68     		ldr	r3, [r7, #12]
 1245 0032 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1246 0034 9A84     		strh	r2, [r3, #36]	@ movhi
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 1247              		.loc 1 1323 24
 1248 0036 FB68     		ldr	r3, [r7, #12]
 1249 0038 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1250 003a DA84     		strh	r2, [r3, #38]	@ movhi
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1251              		.loc 1 1325 22
 1252 003c FB68     		ldr	r3, [r7, #12]
 1253 003e 0022     		movs	r2, #0
 1254 0040 5A64     		str	r2, [r3, #68]
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
ARM GAS  /tmp//ccY11c6d.s 			page 46


 1255              		.loc 1 1326 19
 1256 0042 FB68     		ldr	r3, [r7, #12]
 1257 0044 2122     		movs	r2, #33
 1258 0046 83F84120 		strb	r2, [r3, #65]
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Transmit data register empty Interrupt */
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 1259              		.loc 1 1329 5
 1260 004a FB68     		ldr	r3, [r7, #12]
 1261 004c 1B68     		ldr	r3, [r3]
 1262 004e DA68     		ldr	r2, [r3, #12]
 1263 0050 FB68     		ldr	r3, [r7, #12]
 1264 0052 1B68     		ldr	r3, [r3]
 1265 0054 42F08002 		orr	r2, r2, #128
 1266 0058 DA60     		str	r2, [r3, #12]
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1267              		.loc 1 1331 12
 1268 005a 0023     		movs	r3, #0
 1269 005c 00E0     		b	.L54
 1270              	.L51:
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1271              		.loc 1 1335 12
 1272 005e 0223     		movs	r3, #2
 1273              	.L54:
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1274              		.loc 1 1337 1
 1275 0060 1846     		mov	r0, r3
 1276 0062 1437     		adds	r7, r7, #20
 1277              	.LCFI50:
 1278              		.cfi_def_cfa_offset 4
 1279 0064 BD46     		mov	sp, r7
 1280              	.LCFI51:
 1281              		.cfi_def_cfa_register 13
 1282              		@ sp needed
 1283 0066 80BC     		pop	{r7}
 1284              	.LCFI52:
 1285              		.cfi_restore 7
 1286              		.cfi_def_cfa_offset 0
 1287 0068 7047     		bx	lr
 1288              		.cfi_endproc
 1289              	.LFE74:
 1291              		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 1292              		.align	1
 1293              		.global	HAL_UART_Receive_IT
 1294              		.syntax unified
 1295              		.thumb
 1296              		.thumb_func
 1298              	HAL_UART_Receive_IT:
 1299              	.LFB75:
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode.
ARM GAS  /tmp//ccY11c6d.s 			page 47


1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1300              		.loc 1 1351 1
 1301              		.cfi_startproc
 1302              		@ args = 0, pretend = 0, frame = 16
 1303              		@ frame_needed = 1, uses_anonymous_args = 0
 1304 0000 80B5     		push	{r7, lr}
 1305              	.LCFI53:
 1306              		.cfi_def_cfa_offset 8
 1307              		.cfi_offset 7, -8
 1308              		.cfi_offset 14, -4
 1309 0002 84B0     		sub	sp, sp, #16
 1310              	.LCFI54:
 1311              		.cfi_def_cfa_offset 24
 1312 0004 00AF     		add	r7, sp, #0
 1313              	.LCFI55:
 1314              		.cfi_def_cfa_register 7
 1315 0006 F860     		str	r0, [r7, #12]
 1316 0008 B960     		str	r1, [r7, #8]
 1317 000a 1346     		mov	r3, r2
 1318 000c FB80     		strh	r3, [r7, #6]	@ movhi
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1319              		.loc 1 1353 12
 1320 000e FB68     		ldr	r3, [r7, #12]
 1321 0010 93F84230 		ldrb	r3, [r3, #66]
 1322 0014 DBB2     		uxtb	r3, r3
 1323              		.loc 1 1353 6
 1324 0016 202B     		cmp	r3, #32
 1325 0018 12D1     		bne	.L56
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1326              		.loc 1 1355 8
 1327 001a BB68     		ldr	r3, [r7, #8]
 1328 001c 002B     		cmp	r3, #0
 1329 001e 02D0     		beq	.L57
 1330              		.loc 1 1355 25 discriminator 1
 1331 0020 FB88     		ldrh	r3, [r7, #6]
 1332 0022 002B     		cmp	r3, #0
 1333 0024 01D1     		bne	.L58
 1334              	.L57:
1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1335              		.loc 1 1357 14
 1336 0026 0123     		movs	r3, #1
 1337 0028 0BE0     		b	.L59
 1338              	.L58:
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
ARM GAS  /tmp//ccY11c6d.s 			page 48


1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to Standard reception */
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1339              		.loc 1 1361 26
 1340 002a FB68     		ldr	r3, [r7, #12]
 1341 002c 0022     		movs	r2, #0
 1342 002e 1A63     		str	r2, [r3, #48]
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return (UART_Start_Receive_IT(huart, pData, Size));
 1343              		.loc 1 1363 13
 1344 0030 FB88     		ldrh	r3, [r7, #6]
 1345 0032 1A46     		mov	r2, r3
 1346 0034 B968     		ldr	r1, [r7, #8]
 1347 0036 F868     		ldr	r0, [r7, #12]
 1348 0038 FFF7FEFF 		bl	UART_Start_Receive_IT
 1349 003c 0346     		mov	r3, r0
 1350 003e 00E0     		b	.L59
 1351              	.L56:
1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1352              		.loc 1 1367 12
 1353 0040 0223     		movs	r3, #2
 1354              	.L59:
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1355              		.loc 1 1369 1
 1356 0042 1846     		mov	r0, r3
 1357 0044 1037     		adds	r7, r7, #16
 1358              	.LCFI56:
 1359              		.cfi_def_cfa_offset 8
 1360 0046 BD46     		mov	sp, r7
 1361              	.LCFI57:
 1362              		.cfi_def_cfa_register 13
 1363              		@ sp needed
 1364 0048 80BD     		pop	{r7, pc}
 1365              		.cfi_endproc
 1366              	.LFE75:
 1368              		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
 1369              		.align	1
 1370              		.global	HAL_UART_Transmit_DMA
 1371              		.syntax unified
 1372              		.thumb
 1373              		.thumb_func
 1375              	HAL_UART_Transmit_DMA:
 1376              	.LFB76:
1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in DMA mode.
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
ARM GAS  /tmp//ccY11c6d.s 			page 49


1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t S
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1377              		.loc 1 1383 1
 1378              		.cfi_startproc
 1379              		@ args = 0, pretend = 0, frame = 48
 1380              		@ frame_needed = 1, uses_anonymous_args = 0
 1381 0000 80B5     		push	{r7, lr}
 1382              	.LCFI58:
 1383              		.cfi_def_cfa_offset 8
 1384              		.cfi_offset 7, -8
 1385              		.cfi_offset 14, -4
 1386 0002 8CB0     		sub	sp, sp, #48
 1387              	.LCFI59:
 1388              		.cfi_def_cfa_offset 56
 1389 0004 00AF     		add	r7, sp, #0
 1390              	.LCFI60:
 1391              		.cfi_def_cfa_register 7
 1392 0006 F860     		str	r0, [r7, #12]
 1393 0008 B960     		str	r1, [r7, #8]
 1394 000a 1346     		mov	r3, r2
 1395 000c FB80     		strh	r3, [r7, #6]	@ movhi
1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   const uint32_t *tmp;
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 1396              		.loc 1 1387 12
 1397 000e FB68     		ldr	r3, [r7, #12]
 1398 0010 93F84130 		ldrb	r3, [r3, #65]
 1399 0014 DBB2     		uxtb	r3, r3
 1400              		.loc 1 1387 6
 1401 0016 202B     		cmp	r3, #32
 1402 0018 56D1     		bne	.L61
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1403              		.loc 1 1389 16
 1404 001a BB68     		ldr	r3, [r7, #8]
 1405              		.loc 1 1389 8
 1406 001c 002B     		cmp	r3, #0
 1407 001e 02D0     		beq	.L62
 1408              		.loc 1 1389 25 discriminator 1
 1409 0020 FB88     		ldrh	r3, [r7, #6]
 1410 0022 002B     		cmp	r3, #0
 1411 0024 01D1     		bne	.L63
 1412              	.L62:
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1413              		.loc 1 1391 14
 1414 0026 0123     		movs	r3, #1
 1415 0028 4FE0     		b	.L64
 1416              	.L63:
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1417              		.loc 1 1394 23
 1418 002a BA68     		ldr	r2, [r7, #8]
ARM GAS  /tmp//ccY11c6d.s 			page 50


 1419 002c FB68     		ldr	r3, [r7, #12]
 1420 002e 1A62     		str	r2, [r3, #32]
1395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 1421              		.loc 1 1395 23
 1422 0030 FB68     		ldr	r3, [r7, #12]
 1423 0032 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1424 0034 9A84     		strh	r2, [r3, #36]	@ movhi
1396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 1425              		.loc 1 1396 24
 1426 0036 FB68     		ldr	r3, [r7, #12]
 1427 0038 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1428 003a DA84     		strh	r2, [r3, #38]	@ movhi
1397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1429              		.loc 1 1398 22
 1430 003c FB68     		ldr	r3, [r7, #12]
 1431 003e 0022     		movs	r2, #0
 1432 0040 5A64     		str	r2, [r3, #68]
1399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1433              		.loc 1 1399 19
 1434 0042 FB68     		ldr	r3, [r7, #12]
 1435 0044 2122     		movs	r2, #33
 1436 0046 83F84120 		strb	r2, [r3, #65]
1400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
1402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 1437              		.loc 1 1402 10
 1438 004a FB68     		ldr	r3, [r7, #12]
 1439 004c 9B6B     		ldr	r3, [r3, #56]
 1440              		.loc 1 1402 37
 1441 004e 214A     		ldr	r2, .L68
 1442 0050 9A62     		str	r2, [r3, #40]
1403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
1405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 1443              		.loc 1 1405 10
 1444 0052 FB68     		ldr	r3, [r7, #12]
 1445 0054 9B6B     		ldr	r3, [r3, #56]
 1446              		.loc 1 1405 41
 1447 0056 204A     		ldr	r2, .L68+4
 1448 0058 DA62     		str	r2, [r3, #44]
1406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the DMA error callback */
1408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferErrorCallback = UART_DMAError;
 1449              		.loc 1 1408 10
 1450 005a FB68     		ldr	r3, [r7, #12]
 1451 005c 9B6B     		ldr	r3, [r3, #56]
 1452              		.loc 1 1408 38
 1453 005e 1F4A     		ldr	r2, .L68+8
 1454 0060 1A63     		str	r2, [r3, #48]
1409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the DMA abort callback */
1411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferAbortCallback = NULL;
 1455              		.loc 1 1411 10
 1456 0062 FB68     		ldr	r3, [r7, #12]
 1457 0064 9B6B     		ldr	r3, [r3, #56]
 1458              		.loc 1 1411 38
ARM GAS  /tmp//ccY11c6d.s 			page 51


 1459 0066 0022     		movs	r2, #0
 1460 0068 5A63     		str	r2, [r3, #52]
1412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART transmit DMA channel */
1414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tmp = (const uint32_t *)&pData;
 1461              		.loc 1 1414 9
 1462 006a 07F10803 		add	r3, r7, #8
 1463 006e FB62     		str	r3, [r7, #44]
1415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 1464              		.loc 1 1415 5
 1465 0070 FB68     		ldr	r3, [r7, #12]
 1466 0072 986B     		ldr	r0, [r3, #56]
 1467 0074 FB6A     		ldr	r3, [r7, #44]
 1468 0076 1968     		ldr	r1, [r3]
 1469              		.loc 1 1415 77
 1470 0078 FB68     		ldr	r3, [r7, #12]
 1471 007a 1B68     		ldr	r3, [r3]
 1472              		.loc 1 1415 71
 1473 007c 0433     		adds	r3, r3, #4
 1474              		.loc 1 1415 5
 1475 007e 1A46     		mov	r2, r3
 1476 0080 FB88     		ldrh	r3, [r7, #6]
 1477 0082 FFF7FEFF 		bl	HAL_DMA_Start_IT
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 1478              		.loc 1 1418 5
 1479 0086 FB68     		ldr	r3, [r7, #12]
 1480 0088 1B68     		ldr	r3, [r3]
 1481 008a 6FF04002 		mvn	r2, #64
 1482 008e 1A60     		str	r2, [r3]
 1483              	.L67:
 1484              	.LBB310:
1419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
1422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1485              		.loc 1 1422 5 discriminator 1
 1486 0090 FB68     		ldr	r3, [r7, #12]
 1487 0092 1B68     		ldr	r3, [r3]
 1488 0094 1433     		adds	r3, r3, #20
 1489 0096 BB61     		str	r3, [r7, #24]
 1490              	.LBB311:
 1491              	.LBB312:
 1492              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
ARM GAS  /tmp//ccY11c6d.s 			page 52


  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp//ccY11c6d.s 			page 53


  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
ARM GAS  /tmp//ccY11c6d.s 			page 54


 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
ARM GAS  /tmp//ccY11c6d.s 			page 55


 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp//ccY11c6d.s 			page 56


 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
ARM GAS  /tmp//ccY11c6d.s 			page 57


 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
ARM GAS  /tmp//ccY11c6d.s 			page 58


 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp//ccY11c6d.s 			page 59


 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp//ccY11c6d.s 			page 60


 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
ARM GAS  /tmp//ccY11c6d.s 			page 61


 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp//ccY11c6d.s 			page 62


 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
ARM GAS  /tmp//ccY11c6d.s 			page 63


 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
ARM GAS  /tmp//ccY11c6d.s 			page 64


 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp//ccY11c6d.s 			page 65


 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
ARM GAS  /tmp//ccY11c6d.s 			page 66


 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp//ccY11c6d.s 			page 67


 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 890:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 900:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 902:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
ARM GAS  /tmp//ccY11c6d.s 			page 68


 925:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 939:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 946:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 961:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 964:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 972:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 975:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 976:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 981:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
ARM GAS  /tmp//ccY11c6d.s 			page 69


 982:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 984:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 985:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 989:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 990:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 991:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 992:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 993:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 994:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 995:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 996:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 997:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 998:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 999:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1000:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1001:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
1002:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1003:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1004:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1005:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1006:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1007:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1008:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1009:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1010:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1011:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CLZ             (uint8_t)__builtin_clz
1012:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1013:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1014:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1015:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1016:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
1017:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
1018:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1019:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
1020:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
1021:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1022:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
1023:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1024:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
1025:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1026:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1027:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1028:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1029:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
1030:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1031:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1032:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1033:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
1034:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1035:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1036:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
1037:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1038:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp//ccY11c6d.s 			page 70


1039:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1040:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1041:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
1042:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
1043:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1044:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
1045:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1046:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
1047:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1048:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1049:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1050:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1051:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
1052:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1053:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1054:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1055:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
1056:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1057:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1058:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
1059:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1060:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1061:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1062:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1063:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
1064:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
1065:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1066:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
1067:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1068:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
1069:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1070:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1071:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 1493              		.loc 2 1072 4
 1494 0098 BB69     		ldr	r3, [r7, #24]
 1495              		.syntax unified
 1496              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1497 009a 53E8003F 		ldrex r3, [r3]
 1498              	@ 0 "" 2
 1499              		.thumb
 1500              		.syntax unified
 1501 009e 7B61     		str	r3, [r7, #20]
1073:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1502              		.loc 2 1073 10
 1503 00a0 7B69     		ldr	r3, [r7, #20]
 1504              	.LBE312:
 1505              	.LBE311:
 1506              		.loc 1 1422 5 discriminator 1
 1507 00a2 43F08003 		orr	r3, r3, #128
 1508 00a6 BB62     		str	r3, [r7, #40]
 1509 00a8 FB68     		ldr	r3, [r7, #12]
 1510 00aa 1B68     		ldr	r3, [r3]
 1511 00ac 1433     		adds	r3, r3, #20
 1512 00ae BA6A     		ldr	r2, [r7, #40]
 1513 00b0 7A62     		str	r2, [r7, #36]
 1514 00b2 3B62     		str	r3, [r7, #32]
ARM GAS  /tmp//ccY11c6d.s 			page 71


 1515              	.LBB313:
 1516              	.LBB314:
1074:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1075:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1076:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1077:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1078:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
1079:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
1080:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1081:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1082:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1083:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1084:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1085:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
1086:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1087:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1088:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1090:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
1091:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1092:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1093:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1094:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1095:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
1096:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
1097:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1098:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1099:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1100:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1101:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1102:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
1103:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1104:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1105:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1106:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1107:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
1108:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1109:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1110:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1111:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1112:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
1113:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
1114:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1119:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
1120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1121:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 1517              		.loc 2 1123 4
 1518 00b4 396A     		ldr	r1, [r7, #32]
 1519 00b6 7A6A     		ldr	r2, [r7, #36]
 1520              		.syntax unified
 1521              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp//ccY11c6d.s 			page 72


 1522 00b8 41E80023 		strex r3, r2, [r1]
 1523              	@ 0 "" 2
 1524              		.thumb
 1525              		.syntax unified
 1526 00bc FB61     		str	r3, [r7, #28]
1124:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1527              		.loc 2 1124 10
 1528 00be FB69     		ldr	r3, [r7, #28]
 1529              	.LBE314:
 1530              	.LBE313:
 1531              		.loc 1 1422 5 discriminator 1
 1532 00c0 002B     		cmp	r3, #0
 1533 00c2 E5D1     		bne	.L67
 1534              	.LBE310:
1423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1535              		.loc 1 1424 12
 1536 00c4 0023     		movs	r3, #0
 1537 00c6 00E0     		b	.L64
 1538              	.L61:
1425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1539              		.loc 1 1428 12
 1540 00c8 0223     		movs	r3, #2
 1541              	.L64:
1429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1542              		.loc 1 1430 1
 1543 00ca 1846     		mov	r0, r3
 1544 00cc 3037     		adds	r7, r7, #48
 1545              	.LCFI61:
 1546              		.cfi_def_cfa_offset 8
 1547 00ce BD46     		mov	sp, r7
 1548              	.LCFI62:
 1549              		.cfi_def_cfa_register 13
 1550              		@ sp needed
 1551 00d0 80BD     		pop	{r7, pc}
 1552              	.L69:
 1553 00d2 00BF     		.align	2
 1554              	.L68:
 1555 00d4 00000000 		.word	UART_DMATransmitCplt
 1556 00d8 00000000 		.word	UART_DMATxHalfCplt
 1557 00dc 00000000 		.word	UART_DMAError
 1558              		.cfi_endproc
 1559              	.LFE76:
 1561              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 1562              		.align	1
 1563              		.global	HAL_UART_Receive_DMA
 1564              		.syntax unified
 1565              		.thumb
 1566              		.thumb_func
 1568              	HAL_UART_Receive_DMA:
 1569              	.LFB77:
1431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
ARM GAS  /tmp//ccY11c6d.s 			page 73


1433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in DMA mode.
1434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
1442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1570              		.loc 1 1445 1
 1571              		.cfi_startproc
 1572              		@ args = 0, pretend = 0, frame = 16
 1573              		@ frame_needed = 1, uses_anonymous_args = 0
 1574 0000 80B5     		push	{r7, lr}
 1575              	.LCFI63:
 1576              		.cfi_def_cfa_offset 8
 1577              		.cfi_offset 7, -8
 1578              		.cfi_offset 14, -4
 1579 0002 84B0     		sub	sp, sp, #16
 1580              	.LCFI64:
 1581              		.cfi_def_cfa_offset 24
 1582 0004 00AF     		add	r7, sp, #0
 1583              	.LCFI65:
 1584              		.cfi_def_cfa_register 7
 1585 0006 F860     		str	r0, [r7, #12]
 1586 0008 B960     		str	r1, [r7, #8]
 1587 000a 1346     		mov	r3, r2
 1588 000c FB80     		strh	r3, [r7, #6]	@ movhi
1446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1589              		.loc 1 1447 12
 1590 000e FB68     		ldr	r3, [r7, #12]
 1591 0010 93F84230 		ldrb	r3, [r3, #66]
 1592 0014 DBB2     		uxtb	r3, r3
 1593              		.loc 1 1447 6
 1594 0016 202B     		cmp	r3, #32
 1595 0018 12D1     		bne	.L71
1448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1596              		.loc 1 1449 8
 1597 001a BB68     		ldr	r3, [r7, #8]
 1598 001c 002B     		cmp	r3, #0
 1599 001e 02D0     		beq	.L72
 1600              		.loc 1 1449 25 discriminator 1
 1601 0020 FB88     		ldrh	r3, [r7, #6]
 1602 0022 002B     		cmp	r3, #0
 1603 0024 01D1     		bne	.L73
 1604              	.L72:
1450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1605              		.loc 1 1451 14
 1606 0026 0123     		movs	r3, #1
 1607 0028 0BE0     		b	.L74
ARM GAS  /tmp//ccY11c6d.s 			page 74


 1608              	.L73:
1452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to Standard reception */
1455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1609              		.loc 1 1455 26
 1610 002a FB68     		ldr	r3, [r7, #12]
 1611 002c 0022     		movs	r2, #0
 1612 002e 1A63     		str	r2, [r3, #48]
1456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return (UART_Start_Receive_DMA(huart, pData, Size));
 1613              		.loc 1 1457 13
 1614 0030 FB88     		ldrh	r3, [r7, #6]
 1615 0032 1A46     		mov	r2, r3
 1616 0034 B968     		ldr	r1, [r7, #8]
 1617 0036 F868     		ldr	r0, [r7, #12]
 1618 0038 FFF7FEFF 		bl	UART_Start_Receive_DMA
 1619 003c 0346     		mov	r3, r0
 1620 003e 00E0     		b	.L74
 1621              	.L71:
1458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1622              		.loc 1 1461 12
 1623 0040 0223     		movs	r3, #2
 1624              	.L74:
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1625              		.loc 1 1463 1
 1626 0042 1846     		mov	r0, r3
 1627 0044 1037     		adds	r7, r7, #16
 1628              	.LCFI66:
 1629              		.cfi_def_cfa_offset 8
 1630 0046 BD46     		mov	sp, r7
 1631              	.LCFI67:
 1632              		.cfi_def_cfa_register 13
 1633              		@ sp needed
 1634 0048 80BD     		pop	{r7, pc}
 1635              		.cfi_endproc
 1636              	.LFE77:
 1638              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
 1639              		.align	1
 1640              		.global	HAL_UART_DMAPause
 1641              		.syntax unified
 1642              		.thumb
 1643              		.thumb_func
 1645              	HAL_UART_DMAPause:
 1646              	.LFB78:
1464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Pauses the DMA Transfer.
1467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
ARM GAS  /tmp//ccY11c6d.s 			page 75


1472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1647              		.loc 1 1472 1
 1648              		.cfi_startproc
 1649              		@ args = 0, pretend = 0, frame = 112
 1650              		@ frame_needed = 1, uses_anonymous_args = 0
 1651              		@ link register save eliminated.
 1652 0000 80B4     		push	{r7}
 1653              	.LCFI68:
 1654              		.cfi_def_cfa_offset 4
 1655              		.cfi_offset 7, -4
 1656 0002 9DB0     		sub	sp, sp, #116
 1657              	.LCFI69:
 1658              		.cfi_def_cfa_offset 120
 1659 0004 00AF     		add	r7, sp, #0
 1660              	.LCFI70:
 1661              		.cfi_def_cfa_register 7
 1662 0006 7860     		str	r0, [r7, #4]
1473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 1663              		.loc 1 1473 12
 1664 0008 0023     		movs	r3, #0
 1665 000a FB66     		str	r3, [r7, #108]
1474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 1666              		.loc 1 1475 16
 1667 000c 7B68     		ldr	r3, [r7, #4]
 1668 000e 1B68     		ldr	r3, [r3]
 1669 0010 5B69     		ldr	r3, [r3, #20]
 1670 0012 03F08003 		and	r3, r3, #128
 1671 0016 002B     		cmp	r3, #0
 1672 0018 14BF     		ite	ne
 1673 001a 0123     		movne	r3, #1
 1674 001c 0023     		moveq	r3, #0
 1675 001e DBB2     		uxtb	r3, r3
 1676              		.loc 1 1475 14
 1677 0020 FB66     		str	r3, [r7, #108]
1476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 1678              		.loc 1 1476 13
 1679 0022 7B68     		ldr	r3, [r7, #4]
 1680 0024 93F84130 		ldrb	r3, [r3, #65]
 1681 0028 DBB2     		uxtb	r3, r3
 1682              		.loc 1 1476 6
 1683 002a 212B     		cmp	r3, #33
 1684 002c 1CD1     		bne	.L76
 1685              		.loc 1 1476 49 discriminator 1
 1686 002e FB6E     		ldr	r3, [r7, #108]
 1687 0030 002B     		cmp	r3, #0
 1688 0032 19D0     		beq	.L76
 1689              	.L79:
 1690              	.LBB315:
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1691              		.loc 1 1479 5 discriminator 1
 1692 0034 7B68     		ldr	r3, [r7, #4]
 1693 0036 1B68     		ldr	r3, [r3]
 1694 0038 1433     		adds	r3, r3, #20
 1695 003a FB64     		str	r3, [r7, #76]
ARM GAS  /tmp//ccY11c6d.s 			page 76


 1696              	.LBB316:
 1697              	.LBB317:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1698              		.loc 2 1072 4
 1699 003c FB6C     		ldr	r3, [r7, #76]
 1700              		.syntax unified
 1701              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1702 003e 53E8003F 		ldrex r3, [r3]
 1703              	@ 0 "" 2
 1704              		.thumb
 1705              		.syntax unified
 1706 0042 BB64     		str	r3, [r7, #72]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1707              		.loc 2 1073 10
 1708 0044 BB6C     		ldr	r3, [r7, #72]
 1709              	.LBE317:
 1710              	.LBE316:
 1711              		.loc 1 1479 5 discriminator 1
 1712 0046 23F08003 		bic	r3, r3, #128
 1713 004a BB66     		str	r3, [r7, #104]
 1714 004c 7B68     		ldr	r3, [r7, #4]
 1715 004e 1B68     		ldr	r3, [r3]
 1716 0050 1433     		adds	r3, r3, #20
 1717 0052 BA6E     		ldr	r2, [r7, #104]
 1718 0054 BA65     		str	r2, [r7, #88]
 1719 0056 7B65     		str	r3, [r7, #84]
 1720              	.LBB318:
 1721              	.LBB319:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1722              		.loc 2 1123 4
 1723 0058 796D     		ldr	r1, [r7, #84]
 1724 005a BA6D     		ldr	r2, [r7, #88]
 1725              		.syntax unified
 1726              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1727 005c 41E80023 		strex r3, r2, [r1]
 1728              	@ 0 "" 2
 1729              		.thumb
 1730              		.syntax unified
 1731 0060 3B65     		str	r3, [r7, #80]
 1732              		.loc 2 1124 10
 1733 0062 3B6D     		ldr	r3, [r7, #80]
 1734              	.LBE319:
 1735              	.LBE318:
 1736              		.loc 1 1479 5 discriminator 1
 1737 0064 002B     		cmp	r3, #0
 1738 0066 E5D1     		bne	.L79
 1739              	.L76:
 1740              	.LBE315:
1480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 1741              		.loc 1 1482 16
 1742 0068 7B68     		ldr	r3, [r7, #4]
 1743 006a 1B68     		ldr	r3, [r3]
 1744 006c 5B69     		ldr	r3, [r3, #20]
 1745 006e 03F04003 		and	r3, r3, #64
 1746 0072 002B     		cmp	r3, #0
ARM GAS  /tmp//ccY11c6d.s 			page 77


 1747 0074 14BF     		ite	ne
 1748 0076 0123     		movne	r3, #1
 1749 0078 0023     		moveq	r3, #0
 1750 007a DBB2     		uxtb	r3, r3
 1751              		.loc 1 1482 14
 1752 007c FB66     		str	r3, [r7, #108]
1483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 1753              		.loc 1 1483 13
 1754 007e 7B68     		ldr	r3, [r7, #4]
 1755 0080 93F84230 		ldrb	r3, [r3, #66]
 1756 0084 DBB2     		uxtb	r3, r3
 1757              		.loc 1 1483 6
 1758 0086 222B     		cmp	r3, #34
 1759 0088 50D1     		bne	.L80
 1760              		.loc 1 1483 50 discriminator 1
 1761 008a FB6E     		ldr	r3, [r7, #108]
 1762 008c 002B     		cmp	r3, #0
 1763 008e 4DD0     		beq	.L80
 1764              	.L83:
 1765              	.LBB320:
1484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1766              		.loc 1 1486 5 discriminator 1
 1767 0090 7B68     		ldr	r3, [r7, #4]
 1768 0092 1B68     		ldr	r3, [r3]
 1769 0094 0C33     		adds	r3, r3, #12
 1770 0096 BB63     		str	r3, [r7, #56]
 1771              	.LBB321:
 1772              	.LBB322:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1773              		.loc 2 1072 4
 1774 0098 BB6B     		ldr	r3, [r7, #56]
 1775              		.syntax unified
 1776              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1777 009a 53E8003F 		ldrex r3, [r3]
 1778              	@ 0 "" 2
 1779              		.thumb
 1780              		.syntax unified
 1781 009e 7B63     		str	r3, [r7, #52]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1782              		.loc 2 1073 10
 1783 00a0 7B6B     		ldr	r3, [r7, #52]
 1784              	.LBE322:
 1785              	.LBE321:
 1786              		.loc 1 1486 5 discriminator 1
 1787 00a2 23F48073 		bic	r3, r3, #256
 1788 00a6 7B66     		str	r3, [r7, #100]
 1789 00a8 7B68     		ldr	r3, [r7, #4]
 1790 00aa 1B68     		ldr	r3, [r3]
 1791 00ac 0C33     		adds	r3, r3, #12
 1792 00ae 7A6E     		ldr	r2, [r7, #100]
 1793 00b0 7A64     		str	r2, [r7, #68]
 1794 00b2 3B64     		str	r3, [r7, #64]
 1795              	.LBB323:
 1796              	.LBB324:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp//ccY11c6d.s 			page 78


 1797              		.loc 2 1123 4
 1798 00b4 396C     		ldr	r1, [r7, #64]
 1799 00b6 7A6C     		ldr	r2, [r7, #68]
 1800              		.syntax unified
 1801              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1802 00b8 41E80023 		strex r3, r2, [r1]
 1803              	@ 0 "" 2
 1804              		.thumb
 1805              		.syntax unified
 1806 00bc FB63     		str	r3, [r7, #60]
 1807              		.loc 2 1124 10
 1808 00be FB6B     		ldr	r3, [r7, #60]
 1809              	.LBE324:
 1810              	.LBE323:
 1811              		.loc 1 1486 5 discriminator 1
 1812 00c0 002B     		cmp	r3, #0
 1813 00c2 E5D1     		bne	.L83
 1814              	.L86:
 1815              	.LBE320:
 1816              	.LBB325:
1487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1817              		.loc 1 1487 5 discriminator 1
 1818 00c4 7B68     		ldr	r3, [r7, #4]
 1819 00c6 1B68     		ldr	r3, [r3]
 1820 00c8 1433     		adds	r3, r3, #20
 1821 00ca 7B62     		str	r3, [r7, #36]
 1822              	.LBB326:
 1823              	.LBB327:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1824              		.loc 2 1072 4
 1825 00cc 7B6A     		ldr	r3, [r7, #36]
 1826              		.syntax unified
 1827              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1828 00ce 53E8003F 		ldrex r3, [r3]
 1829              	@ 0 "" 2
 1830              		.thumb
 1831              		.syntax unified
 1832 00d2 3B62     		str	r3, [r7, #32]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1833              		.loc 2 1073 10
 1834 00d4 3B6A     		ldr	r3, [r7, #32]
 1835              	.LBE327:
 1836              	.LBE326:
 1837              		.loc 1 1487 5 discriminator 1
 1838 00d6 23F00103 		bic	r3, r3, #1
 1839 00da 3B66     		str	r3, [r7, #96]
 1840 00dc 7B68     		ldr	r3, [r7, #4]
 1841 00de 1B68     		ldr	r3, [r3]
 1842 00e0 1433     		adds	r3, r3, #20
 1843 00e2 3A6E     		ldr	r2, [r7, #96]
 1844 00e4 3A63     		str	r2, [r7, #48]
 1845 00e6 FB62     		str	r3, [r7, #44]
 1846              	.LBB328:
 1847              	.LBB329:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1848              		.loc 2 1123 4
 1849 00e8 F96A     		ldr	r1, [r7, #44]
ARM GAS  /tmp//ccY11c6d.s 			page 79


 1850 00ea 3A6B     		ldr	r2, [r7, #48]
 1851              		.syntax unified
 1852              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1853 00ec 41E80023 		strex r3, r2, [r1]
 1854              	@ 0 "" 2
 1855              		.thumb
 1856              		.syntax unified
 1857 00f0 BB62     		str	r3, [r7, #40]
 1858              		.loc 2 1124 10
 1859 00f2 BB6A     		ldr	r3, [r7, #40]
 1860              	.LBE329:
 1861              	.LBE328:
 1862              		.loc 1 1487 5 discriminator 1
 1863 00f4 002B     		cmp	r3, #0
 1864 00f6 E5D1     		bne	.L86
 1865              	.L89:
 1866              	.LBE325:
 1867              	.LBB330:
1488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1868              		.loc 1 1490 5 discriminator 1
 1869 00f8 7B68     		ldr	r3, [r7, #4]
 1870 00fa 1B68     		ldr	r3, [r3]
 1871 00fc 1433     		adds	r3, r3, #20
 1872 00fe 3B61     		str	r3, [r7, #16]
 1873              	.LBB331:
 1874              	.LBB332:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1875              		.loc 2 1072 4
 1876 0100 3B69     		ldr	r3, [r7, #16]
 1877              		.syntax unified
 1878              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1879 0102 53E8003F 		ldrex r3, [r3]
 1880              	@ 0 "" 2
 1881              		.thumb
 1882              		.syntax unified
 1883 0106 FB60     		str	r3, [r7, #12]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1884              		.loc 2 1073 10
 1885 0108 FB68     		ldr	r3, [r7, #12]
 1886              	.LBE332:
 1887              	.LBE331:
 1888              		.loc 1 1490 5 discriminator 1
 1889 010a 23F04003 		bic	r3, r3, #64
 1890 010e FB65     		str	r3, [r7, #92]
 1891 0110 7B68     		ldr	r3, [r7, #4]
 1892 0112 1B68     		ldr	r3, [r3]
 1893 0114 1433     		adds	r3, r3, #20
 1894 0116 FA6D     		ldr	r2, [r7, #92]
 1895 0118 FA61     		str	r2, [r7, #28]
 1896 011a BB61     		str	r3, [r7, #24]
 1897              	.LBB333:
 1898              	.LBB334:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1899              		.loc 2 1123 4
 1900 011c B969     		ldr	r1, [r7, #24]
ARM GAS  /tmp//ccY11c6d.s 			page 80


 1901 011e FA69     		ldr	r2, [r7, #28]
 1902              		.syntax unified
 1903              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1904 0120 41E80023 		strex r3, r2, [r1]
 1905              	@ 0 "" 2
 1906              		.thumb
 1907              		.syntax unified
 1908 0124 7B61     		str	r3, [r7, #20]
 1909              		.loc 2 1124 10
 1910 0126 7B69     		ldr	r3, [r7, #20]
 1911              	.LBE334:
 1912              	.LBE333:
 1913              		.loc 1 1490 5 discriminator 1
 1914 0128 002B     		cmp	r3, #0
 1915 012a E5D1     		bne	.L89
 1916              	.L80:
 1917              	.LBE330:
1491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 1918              		.loc 1 1493 10
 1919 012c 0023     		movs	r3, #0
1494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1920              		.loc 1 1494 1
 1921 012e 1846     		mov	r0, r3
 1922 0130 7437     		adds	r7, r7, #116
 1923              	.LCFI71:
 1924              		.cfi_def_cfa_offset 4
 1925 0132 BD46     		mov	sp, r7
 1926              	.LCFI72:
 1927              		.cfi_def_cfa_register 13
 1928              		@ sp needed
 1929 0134 80BC     		pop	{r7}
 1930              	.LCFI73:
 1931              		.cfi_restore 7
 1932              		.cfi_def_cfa_offset 0
 1933 0136 7047     		bx	lr
 1934              		.cfi_endproc
 1935              	.LFE78:
 1937              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 1938              		.align	1
 1939              		.global	HAL_UART_DMAResume
 1940              		.syntax unified
 1941              		.thumb
 1942              		.thumb_func
 1944              	HAL_UART_DMAResume:
 1945              	.LFB79:
1495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Resumes the DMA Transfer.
1498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1946              		.loc 1 1503 1
ARM GAS  /tmp//ccY11c6d.s 			page 81


 1947              		.cfi_startproc
 1948              		@ args = 0, pretend = 0, frame = 112
 1949              		@ frame_needed = 1, uses_anonymous_args = 0
 1950              		@ link register save eliminated.
 1951 0000 80B4     		push	{r7}
 1952              	.LCFI74:
 1953              		.cfi_def_cfa_offset 4
 1954              		.cfi_offset 7, -4
 1955 0002 9DB0     		sub	sp, sp, #116
 1956              	.LCFI75:
 1957              		.cfi_def_cfa_offset 120
 1958 0004 00AF     		add	r7, sp, #0
 1959              	.LCFI76:
 1960              		.cfi_def_cfa_register 7
 1961 0006 7860     		str	r0, [r7, #4]
1504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 1962              		.loc 1 1505 12
 1963 0008 7B68     		ldr	r3, [r7, #4]
 1964 000a 93F84130 		ldrb	r3, [r3, #65]
 1965 000e DBB2     		uxtb	r3, r3
 1966              		.loc 1 1505 6
 1967 0010 212B     		cmp	r3, #33
 1968 0012 19D1     		bne	.L92
 1969              	.L95:
 1970              	.LBB335:
1506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1971              		.loc 1 1508 5 discriminator 1
 1972 0014 7B68     		ldr	r3, [r7, #4]
 1973 0016 1B68     		ldr	r3, [r3]
 1974 0018 1433     		adds	r3, r3, #20
 1975 001a 3B65     		str	r3, [r7, #80]
 1976              	.LBB336:
 1977              	.LBB337:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1978              		.loc 2 1072 4
 1979 001c 3B6D     		ldr	r3, [r7, #80]
 1980              		.syntax unified
 1981              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1982 001e 53E8003F 		ldrex r3, [r3]
 1983              	@ 0 "" 2
 1984              		.thumb
 1985              		.syntax unified
 1986 0022 FB64     		str	r3, [r7, #76]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1987              		.loc 2 1073 10
 1988 0024 FB6C     		ldr	r3, [r7, #76]
 1989              	.LBE337:
 1990              	.LBE336:
 1991              		.loc 1 1508 5 discriminator 1
 1992 0026 43F08003 		orr	r3, r3, #128
 1993 002a FB66     		str	r3, [r7, #108]
 1994 002c 7B68     		ldr	r3, [r7, #4]
 1995 002e 1B68     		ldr	r3, [r3]
 1996 0030 1433     		adds	r3, r3, #20
ARM GAS  /tmp//ccY11c6d.s 			page 82


 1997 0032 FA6E     		ldr	r2, [r7, #108]
 1998 0034 FA65     		str	r2, [r7, #92]
 1999 0036 BB65     		str	r3, [r7, #88]
 2000              	.LBB338:
 2001              	.LBB339:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2002              		.loc 2 1123 4
 2003 0038 B96D     		ldr	r1, [r7, #88]
 2004 003a FA6D     		ldr	r2, [r7, #92]
 2005              		.syntax unified
 2006              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2007 003c 41E80023 		strex r3, r2, [r1]
 2008              	@ 0 "" 2
 2009              		.thumb
 2010              		.syntax unified
 2011 0040 7B65     		str	r3, [r7, #84]
 2012              		.loc 2 1124 10
 2013 0042 7B6D     		ldr	r3, [r7, #84]
 2014              	.LBE339:
 2015              	.LBE338:
 2016              		.loc 1 1508 5 discriminator 1
 2017 0044 002B     		cmp	r3, #0
 2018 0046 E5D1     		bne	.L95
 2019              	.L92:
 2020              	.LBE335:
1509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 2021              		.loc 1 1511 12
 2022 0048 7B68     		ldr	r3, [r7, #4]
 2023 004a 93F84230 		ldrb	r3, [r3, #66]
 2024 004e DBB2     		uxtb	r3, r3
 2025              		.loc 1 1511 6
 2026 0050 222B     		cmp	r3, #34
 2027 0052 5CD1     		bne	.L96
 2028              	.LBB340:
1512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer*/
1514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_OREFLAG(huart);
 2029              		.loc 1 1514 5
 2030 0054 0023     		movs	r3, #0
 2031 0056 FB60     		str	r3, [r7, #12]
 2032 0058 7B68     		ldr	r3, [r7, #4]
 2033 005a 1B68     		ldr	r3, [r3]
 2034 005c 1B68     		ldr	r3, [r3]
 2035 005e FB60     		str	r3, [r7, #12]
 2036 0060 7B68     		ldr	r3, [r7, #4]
 2037 0062 1B68     		ldr	r3, [r3]
 2038 0064 5B68     		ldr	r3, [r3, #4]
 2039 0066 FB60     		str	r3, [r7, #12]
 2040 0068 FB68     		ldr	r3, [r7, #12]
 2041              	.LBE340:
1515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->Init.Parity != UART_PARITY_NONE)
 2042              		.loc 1 1517 20
 2043 006a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp//ccY11c6d.s 			page 83


 2044 006c 1B69     		ldr	r3, [r3, #16]
 2045              		.loc 1 1517 8
 2046 006e 002B     		cmp	r3, #0
 2047 0070 19D0     		beq	.L103
 2048              	.L100:
 2049              	.LBB341:
1518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 2050              		.loc 1 1519 7 discriminator 1
 2051 0072 7B68     		ldr	r3, [r7, #4]
 2052 0074 1B68     		ldr	r3, [r3]
 2053 0076 0C33     		adds	r3, r3, #12
 2054 0078 FB63     		str	r3, [r7, #60]
 2055              	.LBB342:
 2056              	.LBB343:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2057              		.loc 2 1072 4
 2058 007a FB6B     		ldr	r3, [r7, #60]
 2059              		.syntax unified
 2060              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2061 007c 53E8003F 		ldrex r3, [r3]
 2062              	@ 0 "" 2
 2063              		.thumb
 2064              		.syntax unified
 2065 0080 BB63     		str	r3, [r7, #56]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2066              		.loc 2 1073 10
 2067 0082 BB6B     		ldr	r3, [r7, #56]
 2068              	.LBE343:
 2069              	.LBE342:
 2070              		.loc 1 1519 7 discriminator 1
 2071 0084 43F48073 		orr	r3, r3, #256
 2072 0088 BB66     		str	r3, [r7, #104]
 2073 008a 7B68     		ldr	r3, [r7, #4]
 2074 008c 1B68     		ldr	r3, [r3]
 2075 008e 0C33     		adds	r3, r3, #12
 2076 0090 BA6E     		ldr	r2, [r7, #104]
 2077 0092 BA64     		str	r2, [r7, #72]
 2078 0094 7B64     		str	r3, [r7, #68]
 2079              	.LBB344:
 2080              	.LBB345:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2081              		.loc 2 1123 4
 2082 0096 796C     		ldr	r1, [r7, #68]
 2083 0098 BA6C     		ldr	r2, [r7, #72]
 2084              		.syntax unified
 2085              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2086 009a 41E80023 		strex r3, r2, [r1]
 2087              	@ 0 "" 2
 2088              		.thumb
 2089              		.syntax unified
 2090 009e 3B64     		str	r3, [r7, #64]
 2091              		.loc 2 1124 10
 2092 00a0 3B6C     		ldr	r3, [r7, #64]
 2093              	.LBE345:
 2094              	.LBE344:
 2095              		.loc 1 1519 7 discriminator 1
ARM GAS  /tmp//ccY11c6d.s 			page 84


 2096 00a2 002B     		cmp	r3, #0
 2097 00a4 E5D1     		bne	.L100
 2098              	.L103:
 2099              	.LBE341:
 2100              	.LBB346:
1520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2101              		.loc 1 1521 5 discriminator 1
 2102 00a6 7B68     		ldr	r3, [r7, #4]
 2103 00a8 1B68     		ldr	r3, [r3]
 2104 00aa 1433     		adds	r3, r3, #20
 2105 00ac BB62     		str	r3, [r7, #40]
 2106              	.LBB347:
 2107              	.LBB348:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2108              		.loc 2 1072 4
 2109 00ae BB6A     		ldr	r3, [r7, #40]
 2110              		.syntax unified
 2111              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2112 00b0 53E8003F 		ldrex r3, [r3]
 2113              	@ 0 "" 2
 2114              		.thumb
 2115              		.syntax unified
 2116 00b4 7B62     		str	r3, [r7, #36]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2117              		.loc 2 1073 10
 2118 00b6 7B6A     		ldr	r3, [r7, #36]
 2119              	.LBE348:
 2120              	.LBE347:
 2121              		.loc 1 1521 5 discriminator 1
 2122 00b8 43F00103 		orr	r3, r3, #1
 2123 00bc 7B66     		str	r3, [r7, #100]
 2124 00be 7B68     		ldr	r3, [r7, #4]
 2125 00c0 1B68     		ldr	r3, [r3]
 2126 00c2 1433     		adds	r3, r3, #20
 2127 00c4 7A6E     		ldr	r2, [r7, #100]
 2128 00c6 7A63     		str	r2, [r7, #52]
 2129 00c8 3B63     		str	r3, [r7, #48]
 2130              	.LBB349:
 2131              	.LBB350:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2132              		.loc 2 1123 4
 2133 00ca 396B     		ldr	r1, [r7, #48]
 2134 00cc 7A6B     		ldr	r2, [r7, #52]
 2135              		.syntax unified
 2136              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2137 00ce 41E80023 		strex r3, r2, [r1]
 2138              	@ 0 "" 2
 2139              		.thumb
 2140              		.syntax unified
 2141 00d2 FB62     		str	r3, [r7, #44]
 2142              		.loc 2 1124 10
 2143 00d4 FB6A     		ldr	r3, [r7, #44]
 2144              	.LBE350:
 2145              	.LBE349:
 2146              		.loc 1 1521 5 discriminator 1
 2147 00d6 002B     		cmp	r3, #0
ARM GAS  /tmp//ccY11c6d.s 			page 85


 2148 00d8 E5D1     		bne	.L103
 2149              	.L106:
 2150              	.LBE346:
 2151              	.LBB351:
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2152              		.loc 1 1524 5 discriminator 1
 2153 00da 7B68     		ldr	r3, [r7, #4]
 2154 00dc 1B68     		ldr	r3, [r3]
 2155 00de 1433     		adds	r3, r3, #20
 2156 00e0 7B61     		str	r3, [r7, #20]
 2157              	.LBB352:
 2158              	.LBB353:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2159              		.loc 2 1072 4
 2160 00e2 7B69     		ldr	r3, [r7, #20]
 2161              		.syntax unified
 2162              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2163 00e4 53E8003F 		ldrex r3, [r3]
 2164              	@ 0 "" 2
 2165              		.thumb
 2166              		.syntax unified
 2167 00e8 3B61     		str	r3, [r7, #16]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2168              		.loc 2 1073 10
 2169 00ea 3B69     		ldr	r3, [r7, #16]
 2170              	.LBE353:
 2171              	.LBE352:
 2172              		.loc 1 1524 5 discriminator 1
 2173 00ec 43F04003 		orr	r3, r3, #64
 2174 00f0 3B66     		str	r3, [r7, #96]
 2175 00f2 7B68     		ldr	r3, [r7, #4]
 2176 00f4 1B68     		ldr	r3, [r3]
 2177 00f6 1433     		adds	r3, r3, #20
 2178 00f8 3A6E     		ldr	r2, [r7, #96]
 2179 00fa 3A62     		str	r2, [r7, #32]
 2180 00fc FB61     		str	r3, [r7, #28]
 2181              	.LBB354:
 2182              	.LBB355:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2183              		.loc 2 1123 4
 2184 00fe F969     		ldr	r1, [r7, #28]
 2185 0100 3A6A     		ldr	r2, [r7, #32]
 2186              		.syntax unified
 2187              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2188 0102 41E80023 		strex r3, r2, [r1]
 2189              	@ 0 "" 2
 2190              		.thumb
 2191              		.syntax unified
 2192 0106 BB61     		str	r3, [r7, #24]
 2193              		.loc 2 1124 10
 2194 0108 BB69     		ldr	r3, [r7, #24]
 2195              	.LBE355:
 2196              	.LBE354:
 2197              		.loc 1 1524 5 discriminator 1
 2198 010a 002B     		cmp	r3, #0
ARM GAS  /tmp//ccY11c6d.s 			page 86


 2199 010c E5D1     		bne	.L106
 2200              	.L96:
 2201              	.LBE351:
1525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2202              		.loc 1 1527 10
 2203 010e 0023     		movs	r3, #0
1528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2204              		.loc 1 1528 1
 2205 0110 1846     		mov	r0, r3
 2206 0112 7437     		adds	r7, r7, #116
 2207              	.LCFI77:
 2208              		.cfi_def_cfa_offset 4
 2209 0114 BD46     		mov	sp, r7
 2210              	.LCFI78:
 2211              		.cfi_def_cfa_register 13
 2212              		@ sp needed
 2213 0116 80BC     		pop	{r7}
 2214              	.LCFI79:
 2215              		.cfi_restore 7
 2216              		.cfi_def_cfa_offset 0
 2217 0118 7047     		bx	lr
 2218              		.cfi_endproc
 2219              	.LFE79:
 2221              		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 2222              		.align	1
 2223              		.global	HAL_UART_DMAStop
 2224              		.syntax unified
 2225              		.thumb
 2226              		.thumb_func
 2228              	HAL_UART_DMAStop:
 2229              	.LFB80:
1529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Stops the DMA Transfer.
1532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2230              		.loc 1 1537 1
 2231              		.cfi_startproc
 2232              		@ args = 0, pretend = 0, frame = 64
 2233              		@ frame_needed = 1, uses_anonymous_args = 0
 2234 0000 80B5     		push	{r7, lr}
 2235              	.LCFI80:
 2236              		.cfi_def_cfa_offset 8
 2237              		.cfi_offset 7, -8
 2238              		.cfi_offset 14, -4
 2239 0002 90B0     		sub	sp, sp, #64
 2240              	.LCFI81:
 2241              		.cfi_def_cfa_offset 72
 2242 0004 00AF     		add	r7, sp, #0
 2243              	.LCFI82:
 2244              		.cfi_def_cfa_register 7
ARM GAS  /tmp//ccY11c6d.s 			page 87


 2245 0006 7860     		str	r0, [r7, #4]
1538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 2246              		.loc 1 1538 12
 2247 0008 0023     		movs	r3, #0
 2248 000a FB63     		str	r3, [r7, #60]
1539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
1542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      */
1544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
1546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 2249              		.loc 1 1546 16
 2250 000c 7B68     		ldr	r3, [r7, #4]
 2251 000e 1B68     		ldr	r3, [r3]
 2252 0010 5B69     		ldr	r3, [r3, #20]
 2253 0012 03F08003 		and	r3, r3, #128
 2254 0016 002B     		cmp	r3, #0
 2255 0018 14BF     		ite	ne
 2256 001a 0123     		movne	r3, #1
 2257 001c 0023     		moveq	r3, #0
 2258 001e DBB2     		uxtb	r3, r3
 2259              		.loc 1 1546 14
 2260 0020 FB63     		str	r3, [r7, #60]
1547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 2261              		.loc 1 1547 13
 2262 0022 7B68     		ldr	r3, [r7, #4]
 2263 0024 93F84130 		ldrb	r3, [r3, #65]
 2264 0028 DBB2     		uxtb	r3, r3
 2265              		.loc 1 1547 6
 2266 002a 212B     		cmp	r3, #33
 2267 002c 28D1     		bne	.L109
 2268              		.loc 1 1547 49 discriminator 1
 2269 002e FB6B     		ldr	r3, [r7, #60]
 2270 0030 002B     		cmp	r3, #0
 2271 0032 25D0     		beq	.L109
 2272              	.L112:
 2273              	.LBB356:
1548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2274              		.loc 1 1549 5 discriminator 1
 2275 0034 7B68     		ldr	r3, [r7, #4]
 2276 0036 1B68     		ldr	r3, [r3]
 2277 0038 1433     		adds	r3, r3, #20
 2278 003a 7B62     		str	r3, [r7, #36]
 2279              	.LBB357:
 2280              	.LBB358:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2281              		.loc 2 1072 4
 2282 003c 7B6A     		ldr	r3, [r7, #36]
 2283              		.syntax unified
 2284              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2285 003e 53E8003F 		ldrex r3, [r3]
 2286              	@ 0 "" 2
 2287              		.thumb
 2288              		.syntax unified
ARM GAS  /tmp//ccY11c6d.s 			page 88


 2289 0042 3B62     		str	r3, [r7, #32]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2290              		.loc 2 1073 10
 2291 0044 3B6A     		ldr	r3, [r7, #32]
 2292              	.LBE358:
 2293              	.LBE357:
 2294              		.loc 1 1549 5 discriminator 1
 2295 0046 23F08003 		bic	r3, r3, #128
 2296 004a BB63     		str	r3, [r7, #56]
 2297 004c 7B68     		ldr	r3, [r7, #4]
 2298 004e 1B68     		ldr	r3, [r3]
 2299 0050 1433     		adds	r3, r3, #20
 2300 0052 BA6B     		ldr	r2, [r7, #56]
 2301 0054 3A63     		str	r2, [r7, #48]
 2302 0056 FB62     		str	r3, [r7, #44]
 2303              	.LBB359:
 2304              	.LBB360:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2305              		.loc 2 1123 4
 2306 0058 F96A     		ldr	r1, [r7, #44]
 2307 005a 3A6B     		ldr	r2, [r7, #48]
 2308              		.syntax unified
 2309              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2310 005c 41E80023 		strex r3, r2, [r1]
 2311              	@ 0 "" 2
 2312              		.thumb
 2313              		.syntax unified
 2314 0060 BB62     		str	r3, [r7, #40]
 2315              		.loc 2 1124 10
 2316 0062 BB6A     		ldr	r3, [r7, #40]
 2317              	.LBE360:
 2318              	.LBE359:
 2319              		.loc 1 1549 5 discriminator 1
 2320 0064 002B     		cmp	r3, #0
 2321 0066 E5D1     		bne	.L112
 2322              	.LBE356:
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel */
1552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 2323              		.loc 1 1552 14
 2324 0068 7B68     		ldr	r3, [r7, #4]
 2325 006a 9B6B     		ldr	r3, [r3, #56]
 2326              		.loc 1 1552 8
 2327 006c 002B     		cmp	r3, #0
 2328 006e 04D0     		beq	.L113
1553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
 2329              		.loc 1 1554 7
 2330 0070 7B68     		ldr	r3, [r7, #4]
 2331 0072 9B6B     		ldr	r3, [r3, #56]
 2332 0074 1846     		mov	r0, r3
 2333 0076 FFF7FEFF 		bl	HAL_DMA_Abort
 2334              	.L113:
1555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 2335              		.loc 1 1556 5
 2336 007a 7868     		ldr	r0, [r7, #4]
ARM GAS  /tmp//ccY11c6d.s 			page 89


 2337 007c FFF7FEFF 		bl	UART_EndTxTransfer
 2338              	.L109:
1557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 2339              		.loc 1 1560 16
 2340 0080 7B68     		ldr	r3, [r7, #4]
 2341 0082 1B68     		ldr	r3, [r3]
 2342 0084 5B69     		ldr	r3, [r3, #20]
 2343 0086 03F04003 		and	r3, r3, #64
 2344 008a 002B     		cmp	r3, #0
 2345 008c 14BF     		ite	ne
 2346 008e 0123     		movne	r3, #1
 2347 0090 0023     		moveq	r3, #0
 2348 0092 DBB2     		uxtb	r3, r3
 2349              		.loc 1 1560 14
 2350 0094 FB63     		str	r3, [r7, #60]
1561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 2351              		.loc 1 1561 13
 2352 0096 7B68     		ldr	r3, [r7, #4]
 2353 0098 93F84230 		ldrb	r3, [r3, #66]
 2354 009c DBB2     		uxtb	r3, r3
 2355              		.loc 1 1561 6
 2356 009e 222B     		cmp	r3, #34
 2357 00a0 28D1     		bne	.L114
 2358              		.loc 1 1561 50 discriminator 1
 2359 00a2 FB6B     		ldr	r3, [r7, #60]
 2360 00a4 002B     		cmp	r3, #0
 2361 00a6 25D0     		beq	.L114
 2362              	.L117:
 2363              	.LBB361:
1562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2364              		.loc 1 1563 5 discriminator 1
 2365 00a8 7B68     		ldr	r3, [r7, #4]
 2366 00aa 1B68     		ldr	r3, [r3]
 2367 00ac 1433     		adds	r3, r3, #20
 2368 00ae 3B61     		str	r3, [r7, #16]
 2369              	.LBB362:
 2370              	.LBB363:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2371              		.loc 2 1072 4
 2372 00b0 3B69     		ldr	r3, [r7, #16]
 2373              		.syntax unified
 2374              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2375 00b2 53E8003F 		ldrex r3, [r3]
 2376              	@ 0 "" 2
 2377              		.thumb
 2378              		.syntax unified
 2379 00b6 FB60     		str	r3, [r7, #12]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2380              		.loc 2 1073 10
 2381 00b8 FB68     		ldr	r3, [r7, #12]
 2382              	.LBE363:
 2383              	.LBE362:
 2384              		.loc 1 1563 5 discriminator 1
ARM GAS  /tmp//ccY11c6d.s 			page 90


 2385 00ba 23F04003 		bic	r3, r3, #64
 2386 00be 7B63     		str	r3, [r7, #52]
 2387 00c0 7B68     		ldr	r3, [r7, #4]
 2388 00c2 1B68     		ldr	r3, [r3]
 2389 00c4 1433     		adds	r3, r3, #20
 2390 00c6 7A6B     		ldr	r2, [r7, #52]
 2391 00c8 FA61     		str	r2, [r7, #28]
 2392 00ca BB61     		str	r3, [r7, #24]
 2393              	.LBB364:
 2394              	.LBB365:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2395              		.loc 2 1123 4
 2396 00cc B969     		ldr	r1, [r7, #24]
 2397 00ce FA69     		ldr	r2, [r7, #28]
 2398              		.syntax unified
 2399              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2400 00d0 41E80023 		strex r3, r2, [r1]
 2401              	@ 0 "" 2
 2402              		.thumb
 2403              		.syntax unified
 2404 00d4 7B61     		str	r3, [r7, #20]
 2405              		.loc 2 1124 10
 2406 00d6 7B69     		ldr	r3, [r7, #20]
 2407              	.LBE365:
 2408              	.LBE364:
 2409              		.loc 1 1563 5 discriminator 1
 2410 00d8 002B     		cmp	r3, #0
 2411 00da E5D1     		bne	.L117
 2412              	.LBE361:
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel */
1566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 2413              		.loc 1 1566 14
 2414 00dc 7B68     		ldr	r3, [r7, #4]
 2415 00de DB6B     		ldr	r3, [r3, #60]
 2416              		.loc 1 1566 8
 2417 00e0 002B     		cmp	r3, #0
 2418 00e2 04D0     		beq	.L118
1567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
 2419              		.loc 1 1568 7
 2420 00e4 7B68     		ldr	r3, [r7, #4]
 2421 00e6 DB6B     		ldr	r3, [r3, #60]
 2422 00e8 1846     		mov	r0, r3
 2423 00ea FFF7FEFF 		bl	HAL_DMA_Abort
 2424              	.L118:
1569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 2425              		.loc 1 1570 5
 2426 00ee 7868     		ldr	r0, [r7, #4]
 2427 00f0 FFF7FEFF 		bl	UART_EndRxTransfer
 2428              	.L114:
1571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2429              		.loc 1 1573 10
 2430 00f4 0023     		movs	r3, #0
ARM GAS  /tmp//ccY11c6d.s 			page 91


1574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2431              		.loc 1 1574 1
 2432 00f6 1846     		mov	r0, r3
 2433 00f8 4037     		adds	r7, r7, #64
 2434              	.LCFI83:
 2435              		.cfi_def_cfa_offset 8
 2436 00fa BD46     		mov	sp, r7
 2437              	.LCFI84:
 2438              		.cfi_def_cfa_register 13
 2439              		@ sp needed
 2440 00fc 80BD     		pop	{r7, pc}
 2441              		.cfi_endproc
 2442              	.LFE80:
 2444              		.section	.text.HAL_UARTEx_ReceiveToIdle,"ax",%progbits
 2445              		.align	1
 2446              		.global	HAL_UARTEx_ReceiveToIdle
 2447              		.syntax unified
 2448              		.thumb
 2449              		.thumb_func
 2451              	HAL_UARTEx_ReceiveToIdle:
 2452              	.LFB81:
1575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Receive an amount of data in blocking mode till either the expected number of data is re
1578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   HAL_OK is returned if reception is completed (expected number of data has been received
1579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         or if reception is stopped after IDLE event (less than the expected number of data has 
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         In this case, RxLen output parameter indicates number of data available in reception bu
1581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M =
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
1583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of uint16_t available through pData.
1584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param huart   UART handle.
1585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param pData   Pointer to data buffer (uint8_t or uint16_t data elements).
1586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Size    Amount of data elements (uint8_t or uint16_t) to be received.
1587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param RxLen   Number of data elements finally received (could be lower than Size, in case rece
1588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
1589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size
1592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                                            uint32_t Timeout)
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2453              		.loc 1 1593 1
 2454              		.cfi_startproc
 2455              		@ args = 4, pretend = 0, frame = 32
 2456              		@ frame_needed = 1, uses_anonymous_args = 0
 2457 0000 80B5     		push	{r7, lr}
 2458              	.LCFI85:
 2459              		.cfi_def_cfa_offset 8
 2460              		.cfi_offset 7, -8
 2461              		.cfi_offset 14, -4
 2462 0002 88B0     		sub	sp, sp, #32
 2463              	.LCFI86:
 2464              		.cfi_def_cfa_offset 40
 2465 0004 00AF     		add	r7, sp, #0
 2466              	.LCFI87:
 2467              		.cfi_def_cfa_register 7
 2468 0006 F860     		str	r0, [r7, #12]
 2469 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp//ccY11c6d.s 			page 92


 2470 000a 3B60     		str	r3, [r7]
 2471 000c 1346     		mov	r3, r2	@ movhi
 2472 000e FB80     		strh	r3, [r7, #6]	@ movhi
1594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint8_t  *pdata8bits;
1595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *pdata16bits;
1596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tickstart;
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 2473              		.loc 1 1599 12
 2474 0010 FB68     		ldr	r3, [r7, #12]
 2475 0012 93F84230 		ldrb	r3, [r3, #66]
 2476 0016 DBB2     		uxtb	r3, r3
 2477              		.loc 1 1599 6
 2478 0018 202B     		cmp	r3, #32
 2479 001a 40F0C080 		bne	.L121
1600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 2480              		.loc 1 1601 8
 2481 001e BB68     		ldr	r3, [r7, #8]
 2482 0020 002B     		cmp	r3, #0
 2483 0022 02D0     		beq	.L122
 2484              		.loc 1 1601 25 discriminator 1
 2485 0024 FB88     		ldrh	r3, [r7, #6]
 2486 0026 002B     		cmp	r3, #0
 2487 0028 01D1     		bne	.L123
 2488              	.L122:
1602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
 2489              		.loc 1 1603 15
 2490 002a 0123     		movs	r3, #1
 2491 002c B8E0     		b	.L124
 2492              	.L123:
1604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 2493              		.loc 1 1606 22
 2494 002e FB68     		ldr	r3, [r7, #12]
 2495 0030 0022     		movs	r2, #0
 2496 0032 5A64     		str	r2, [r3, #68]
1607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 2497              		.loc 1 1607 20
 2498 0034 FB68     		ldr	r3, [r7, #12]
 2499 0036 2222     		movs	r2, #34
 2500 0038 83F84220 		strb	r2, [r3, #66]
1608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 2501              		.loc 1 1608 26
 2502 003c FB68     		ldr	r3, [r7, #12]
 2503 003e 0122     		movs	r2, #1
 2504 0040 1A63     		str	r2, [r3, #48]
1609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 2505              		.loc 1 1609 24
 2506 0042 FB68     		ldr	r3, [r7, #12]
 2507 0044 0022     		movs	r2, #0
 2508 0046 5A63     		str	r2, [r3, #52]
1610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout management */
ARM GAS  /tmp//ccY11c6d.s 			page 93


1612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
 2509              		.loc 1 1612 17
 2510 0048 FFF7FEFF 		bl	HAL_GetTick
 2511 004c 7861     		str	r0, [r7, #20]
1613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferSize  = Size;
 2512              		.loc 1 1614 24
 2513 004e FB68     		ldr	r3, [r7, #12]
 2514 0050 FA88     		ldrh	r2, [r7, #6]	@ movhi
 2515 0052 9A85     		strh	r2, [r3, #44]	@ movhi
1615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
 2516              		.loc 1 1615 24
 2517 0054 FB68     		ldr	r3, [r7, #12]
 2518 0056 FA88     		ldrh	r2, [r7, #6]	@ movhi
 2519 0058 DA85     		strh	r2, [r3, #46]	@ movhi
1616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
1618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 2520              		.loc 1 1618 21
 2521 005a FB68     		ldr	r3, [r7, #12]
 2522 005c 9B68     		ldr	r3, [r3, #8]
 2523              		.loc 1 1618 8
 2524 005e B3F5805F 		cmp	r3, #4096
 2525 0062 08D1     		bne	.L125
 2526              		.loc 1 1618 71 discriminator 1
 2527 0064 FB68     		ldr	r3, [r7, #12]
 2528 0066 1B69     		ldr	r3, [r3, #16]
 2529              		.loc 1 1618 56 discriminator 1
 2530 0068 002B     		cmp	r3, #0
 2531 006a 04D1     		bne	.L125
1619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 2532              		.loc 1 1620 19
 2533 006c 0023     		movs	r3, #0
 2534 006e FB61     		str	r3, [r7, #28]
1621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 2535              		.loc 1 1621 19
 2536 0070 BB68     		ldr	r3, [r7, #8]
 2537 0072 BB61     		str	r3, [r7, #24]
 2538 0074 03E0     		b	.L126
 2539              	.L125:
1622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = pData;
 2540              		.loc 1 1625 19
 2541 0076 BB68     		ldr	r3, [r7, #8]
 2542 0078 FB61     		str	r3, [r7, #28]
1626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = NULL;
 2543              		.loc 1 1626 19
 2544 007a 0023     		movs	r3, #0
 2545 007c BB61     		str	r3, [r7, #24]
 2546              	.L126:
1627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Initialize output number of received elements */
1630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     *RxLen = 0U;
ARM GAS  /tmp//ccY11c6d.s 			page 94


 2547              		.loc 1 1630 12
 2548 007e 3B68     		ldr	r3, [r7]
 2549 0080 0022     		movs	r2, #0
 2550 0082 1A80     		strh	r2, [r3]	@ movhi
1631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* as long as data have to be received */
1633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
 2551              		.loc 1 1633 11
 2552 0084 77E0     		b	.L127
 2553              	.L137:
1634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check if IDLE flag is set */
1636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 2554              		.loc 1 1636 11
 2555 0086 FB68     		ldr	r3, [r7, #12]
 2556 0088 1B68     		ldr	r3, [r3]
 2557 008a 1B68     		ldr	r3, [r3]
 2558 008c 03F01003 		and	r3, r3, #16
 2559              		.loc 1 1636 10
 2560 0090 102B     		cmp	r3, #16
 2561 0092 17D1     		bne	.L128
 2562              	.LBB366:
1637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Clear IDLE flag in ISR */
1639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UART_CLEAR_IDLEFLAG(huart);
 2563              		.loc 1 1639 9
 2564 0094 0023     		movs	r3, #0
 2565 0096 3B61     		str	r3, [r7, #16]
 2566 0098 FB68     		ldr	r3, [r7, #12]
 2567 009a 1B68     		ldr	r3, [r3]
 2568 009c 1B68     		ldr	r3, [r3]
 2569 009e 3B61     		str	r3, [r7, #16]
 2570 00a0 FB68     		ldr	r3, [r7, #12]
 2571 00a2 1B68     		ldr	r3, [r3]
 2572 00a4 5B68     		ldr	r3, [r3, #4]
 2573 00a6 3B61     		str	r3, [r7, #16]
 2574 00a8 3B69     		ldr	r3, [r7, #16]
 2575              	.LBE366:
1640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* If Set, but no data ever received, clear flag without exiting loop */
1642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* If Set, and data has already been received, this means Idle Event is valid : End recepti
1643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (*RxLen > 0U)
 2576              		.loc 1 1643 13
 2577 00aa 3B68     		ldr	r3, [r7]
 2578 00ac 1B88     		ldrh	r3, [r3]
 2579              		.loc 1 1643 12
 2580 00ae 002B     		cmp	r3, #0
 2581 00b0 08D0     		beq	.L128
1644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 2582              		.loc 1 1645 30
 2583 00b2 FB68     		ldr	r3, [r7, #12]
 2584 00b4 0222     		movs	r2, #2
 2585 00b6 5A63     		str	r2, [r3, #52]
1646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 2586              		.loc 1 1646 26
 2587 00b8 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp//ccY11c6d.s 			page 95


 2588 00ba 2022     		movs	r2, #32
 2589 00bc 83F84220 		strb	r2, [r3, #66]
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_OK;
 2590              		.loc 1 1648 18
 2591 00c0 0023     		movs	r3, #0
 2592 00c2 6DE0     		b	.L124
 2593              	.L128:
1649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check if RXNE flag is set */
1653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 2594              		.loc 1 1653 11
 2595 00c4 FB68     		ldr	r3, [r7, #12]
 2596 00c6 1B68     		ldr	r3, [r3]
 2597 00c8 1B68     		ldr	r3, [r3]
 2598 00ca 03F02003 		and	r3, r3, #32
 2599              		.loc 1 1653 10
 2600 00ce 202B     		cmp	r3, #32
 2601 00d0 3CD1     		bne	.L129
1654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (pdata8bits == NULL)
 2602              		.loc 1 1655 12
 2603 00d2 FB69     		ldr	r3, [r7, #28]
 2604 00d4 002B     		cmp	r3, #0
 2605 00d6 0CD1     		bne	.L130
1656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 2606              		.loc 1 1657 42
 2607 00d8 FB68     		ldr	r3, [r7, #12]
 2608 00da 1B68     		ldr	r3, [r3]
 2609              		.loc 1 1657 52
 2610 00dc 5B68     		ldr	r3, [r3, #4]
 2611              		.loc 1 1657 26
 2612 00de 9BB2     		uxth	r3, r3
 2613 00e0 C3F30803 		ubfx	r3, r3, #0, #9
 2614 00e4 9AB2     		uxth	r2, r3
 2615              		.loc 1 1657 24
 2616 00e6 BB69     		ldr	r3, [r7, #24]
 2617 00e8 1A80     		strh	r2, [r3]	@ movhi
1658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pdata16bits++;
 2618              		.loc 1 1658 22
 2619 00ea BB69     		ldr	r3, [r7, #24]
 2620 00ec 0233     		adds	r3, r3, #2
 2621 00ee BB61     		str	r3, [r7, #24]
 2622 00f0 1FE0     		b	.L131
 2623              	.L130:
1659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
1661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WO
 2624              		.loc 1 1662 27
 2625 00f2 FB68     		ldr	r3, [r7, #12]
 2626 00f4 9B68     		ldr	r3, [r3, #8]
 2627              		.loc 1 1662 14
 2628 00f6 B3F5805F 		cmp	r3, #4096
ARM GAS  /tmp//ccY11c6d.s 			page 96


 2629 00fa 07D0     		beq	.L132
 2630              		.loc 1 1662 78 discriminator 1
 2631 00fc FB68     		ldr	r3, [r7, #12]
 2632 00fe 9B68     		ldr	r3, [r3, #8]
 2633              		.loc 1 1662 62 discriminator 1
 2634 0100 002B     		cmp	r3, #0
 2635 0102 0AD1     		bne	.L133
 2636              		.loc 1 1662 128 discriminator 2
 2637 0104 FB68     		ldr	r3, [r7, #12]
 2638 0106 1B69     		ldr	r3, [r3, #16]
 2639              		.loc 1 1662 113 discriminator 2
 2640 0108 002B     		cmp	r3, #0
 2641 010a 06D1     		bne	.L133
 2642              	.L132:
1663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           {
1664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 2643              		.loc 1 1664 42
 2644 010c FB68     		ldr	r3, [r7, #12]
 2645 010e 1B68     		ldr	r3, [r3]
 2646              		.loc 1 1664 52
 2647 0110 5B68     		ldr	r3, [r3, #4]
 2648              		.loc 1 1664 27
 2649 0112 DAB2     		uxtb	r2, r3
 2650              		.loc 1 1664 25
 2651 0114 FB69     		ldr	r3, [r7, #28]
 2652 0116 1A70     		strb	r2, [r3]
 2653 0118 08E0     		b	.L134
 2654              	.L133:
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           }
1666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           else
1667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           {
1668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 2655              		.loc 1 1668 42
 2656 011a FB68     		ldr	r3, [r7, #12]
 2657 011c 1B68     		ldr	r3, [r3]
 2658              		.loc 1 1668 52
 2659 011e 5B68     		ldr	r3, [r3, #4]
 2660              		.loc 1 1668 27
 2661 0120 DBB2     		uxtb	r3, r3
 2662 0122 03F07F03 		and	r3, r3, #127
 2663 0126 DAB2     		uxtb	r2, r3
 2664              		.loc 1 1668 25
 2665 0128 FB69     		ldr	r3, [r7, #28]
 2666 012a 1A70     		strb	r2, [r3]
 2667              	.L134:
1669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           }
1670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pdata8bits++;
 2668              		.loc 1 1671 21
 2669 012c FB69     		ldr	r3, [r7, #28]
 2670 012e 0133     		adds	r3, r3, #1
 2671 0130 FB61     		str	r3, [r7, #28]
 2672              	.L131:
1672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Increment number of received elements */
1674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *RxLen += 1U;
 2673              		.loc 1 1674 9
ARM GAS  /tmp//ccY11c6d.s 			page 97


 2674 0132 3B68     		ldr	r3, [r7]
 2675 0134 1B88     		ldrh	r3, [r3]
 2676              		.loc 1 1674 16
 2677 0136 0133     		adds	r3, r3, #1
 2678 0138 9AB2     		uxth	r2, r3
 2679 013a 3B68     		ldr	r3, [r7]
 2680 013c 1A80     		strh	r2, [r3]	@ movhi
1675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxXferCount--;
 2681              		.loc 1 1675 14
 2682 013e FB68     		ldr	r3, [r7, #12]
 2683 0140 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 2684 0142 9BB2     		uxth	r3, r3
 2685              		.loc 1 1675 27
 2686 0144 013B     		subs	r3, r3, #1
 2687 0146 9AB2     		uxth	r2, r3
 2688 0148 FB68     		ldr	r3, [r7, #12]
 2689 014a DA85     		strh	r2, [r3, #46]	@ movhi
 2690              	.L129:
1676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check for the Timeout */
1679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (Timeout != HAL_MAX_DELAY)
 2691              		.loc 1 1679 10
 2692 014c BB6A     		ldr	r3, [r7, #40]
 2693 014e B3F1FF3F 		cmp	r3, #-1
 2694 0152 10D0     		beq	.L127
1680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 2695              		.loc 1 1681 15
 2696 0154 FFF7FEFF 		bl	HAL_GetTick
 2697 0158 0246     		mov	r2, r0
 2698              		.loc 1 1681 29 discriminator 1
 2699 015a 7B69     		ldr	r3, [r7, #20]
 2700 015c D31A     		subs	r3, r2, r3
 2701              		.loc 1 1681 12 discriminator 1
 2702 015e BA6A     		ldr	r2, [r7, #40]
 2703 0160 9A42     		cmp	r2, r3
 2704 0162 02D3     		bcc	.L136
 2705              		.loc 1 1681 53 discriminator 1
 2706 0164 BB6A     		ldr	r3, [r7, #40]
 2707 0166 002B     		cmp	r3, #0
 2708 0168 05D1     		bne	.L127
 2709              	.L136:
1682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 2710              		.loc 1 1683 26
 2711 016a FB68     		ldr	r3, [r7, #12]
 2712 016c 2022     		movs	r2, #32
 2713 016e 83F84220 		strb	r2, [r3, #66]
1684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 2714              		.loc 1 1685 18
 2715 0172 0323     		movs	r3, #3
 2716 0174 14E0     		b	.L124
 2717              	.L127:
1633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2718              		.loc 1 1633 17
ARM GAS  /tmp//ccY11c6d.s 			page 98


 2719 0176 FB68     		ldr	r3, [r7, #12]
 2720 0178 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 2721 017a 9BB2     		uxth	r3, r3
1633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2722              		.loc 1 1633 31
 2723 017c 002B     		cmp	r3, #0
 2724 017e 82D1     		bne	.L137
1686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set number of received elements in output parameter : RxLen */
1691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     *RxLen = huart->RxXferSize - huart->RxXferCount;
 2725              		.loc 1 1691 19
 2726 0180 FB68     		ldr	r3, [r7, #12]
 2727 0182 9A8D     		ldrh	r2, [r3, #44]
 2728              		.loc 1 1691 39
 2729 0184 FB68     		ldr	r3, [r7, #12]
 2730 0186 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 2731 0188 9BB2     		uxth	r3, r3
 2732              		.loc 1 1691 32
 2733 018a D31A     		subs	r3, r2, r3
 2734 018c 9AB2     		uxth	r2, r3
 2735              		.loc 1 1691 12
 2736 018e 3B68     		ldr	r3, [r7]
 2737 0190 1A80     		strh	r2, [r3]	@ movhi
1692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 2738              		.loc 1 1693 20
 2739 0192 FB68     		ldr	r3, [r7, #12]
 2740 0194 2022     		movs	r2, #32
 2741 0196 83F84220 		strb	r2, [r3, #66]
1694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 2742              		.loc 1 1695 12
 2743 019a 0023     		movs	r3, #0
 2744 019c 00E0     		b	.L124
 2745              	.L121:
1696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 2746              		.loc 1 1699 12
 2747 019e 0223     		movs	r3, #2
 2748              	.L124:
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2749              		.loc 1 1701 1
 2750 01a0 1846     		mov	r0, r3
 2751 01a2 2037     		adds	r7, r7, #32
 2752              	.LCFI88:
 2753              		.cfi_def_cfa_offset 8
 2754 01a4 BD46     		mov	sp, r7
 2755              	.LCFI89:
 2756              		.cfi_def_cfa_register 13
 2757              		@ sp needed
 2758 01a6 80BD     		pop	{r7, pc}
ARM GAS  /tmp//ccY11c6d.s 			page 99


 2759              		.cfi_endproc
 2760              	.LFE81:
 2762              		.section	.text.HAL_UARTEx_ReceiveToIdle_IT,"ax",%progbits
 2763              		.align	1
 2764              		.global	HAL_UARTEx_ReceiveToIdle_IT
 2765              		.syntax unified
 2766              		.thumb
 2767              		.thumb_func
 2769              	HAL_UARTEx_ReceiveToIdle_IT:
 2770              	.LFB82:
1702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Receive an amount of data in interrupt mode till either the expected number of data is r
1705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   Reception is initiated by this function call. Further progress of reception is achieved
1706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         to UART interrupts raised by RXNE and IDLE events. Callback is called at end of recepti
1707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         number of received data elements.
1708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M =
1709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
1710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of uint16_t available through pData.
1711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param huart UART handle.
1712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
1713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
1714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t S
1717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2771              		.loc 1 1717 1
 2772              		.cfi_startproc
 2773              		@ args = 0, pretend = 0, frame = 48
 2774              		@ frame_needed = 1, uses_anonymous_args = 0
 2775 0000 80B5     		push	{r7, lr}
 2776              	.LCFI90:
 2777              		.cfi_def_cfa_offset 8
 2778              		.cfi_offset 7, -8
 2779              		.cfi_offset 14, -4
 2780 0002 8CB0     		sub	sp, sp, #48
 2781              	.LCFI91:
 2782              		.cfi_def_cfa_offset 56
 2783 0004 00AF     		add	r7, sp, #0
 2784              	.LCFI92:
 2785              		.cfi_def_cfa_register 7
 2786 0006 F860     		str	r0, [r7, #12]
 2787 0008 B960     		str	r1, [r7, #8]
 2788 000a 1346     		mov	r3, r2
 2789 000c FB80     		strh	r3, [r7, #6]	@ movhi
1718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status;
1719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 2790              		.loc 1 1721 12
 2791 000e FB68     		ldr	r3, [r7, #12]
 2792 0010 93F84230 		ldrb	r3, [r3, #66]
 2793 0014 DBB2     		uxtb	r3, r3
 2794              		.loc 1 1721 6
 2795 0016 202B     		cmp	r3, #32
 2796 0018 4AD1     		bne	.L139
1722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
ARM GAS  /tmp//ccY11c6d.s 			page 100


1723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 2797              		.loc 1 1723 8
 2798 001a BB68     		ldr	r3, [r7, #8]
 2799 001c 002B     		cmp	r3, #0
 2800 001e 02D0     		beq	.L140
 2801              		.loc 1 1723 25 discriminator 1
 2802 0020 FB88     		ldrh	r3, [r7, #6]
 2803 0022 002B     		cmp	r3, #0
 2804 0024 01D1     		bne	.L141
 2805              	.L140:
1724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 2806              		.loc 1 1725 14
 2807 0026 0123     		movs	r3, #1
 2808 0028 43E0     		b	.L142
 2809              	.L141:
1726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to reception till IDLE Event*/
1729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 2810              		.loc 1 1729 26
 2811 002a FB68     		ldr	r3, [r7, #12]
 2812 002c 0122     		movs	r2, #1
 2813 002e 1A63     		str	r2, [r3, #48]
1730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 2814              		.loc 1 1730 24
 2815 0030 FB68     		ldr	r3, [r7, #12]
 2816 0032 0022     		movs	r2, #0
 2817 0034 5A63     		str	r2, [r3, #52]
1731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  UART_Start_Receive_IT(huart, pData, Size);
 2818              		.loc 1 1732 15
 2819 0036 FB88     		ldrh	r3, [r7, #6]
 2820 0038 1A46     		mov	r2, r3
 2821 003a B968     		ldr	r1, [r7, #8]
 2822 003c F868     		ldr	r0, [r7, #12]
 2823 003e FFF7FEFF 		bl	UART_Start_Receive_IT
 2824 0042 0346     		mov	r3, r0
 2825 0044 87F82F30 		strb	r3, [r7, #47]
1733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check Rx process has been successfully started */
1735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (status == HAL_OK)
 2826              		.loc 1 1735 8
 2827 0048 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2828 004c 002B     		cmp	r3, #0
 2829 004e 2CD1     		bne	.L143
1736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 2830              		.loc 1 1737 16
 2831 0050 FB68     		ldr	r3, [r7, #12]
 2832 0052 1B6B     		ldr	r3, [r3, #48]
 2833              		.loc 1 1737 10
 2834 0054 012B     		cmp	r3, #1
 2835 0056 25D1     		bne	.L144
 2836              	.LBB367:
1738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UART_CLEAR_IDLEFLAG(huart);
ARM GAS  /tmp//ccY11c6d.s 			page 101


 2837              		.loc 1 1739 9
 2838 0058 0023     		movs	r3, #0
 2839 005a 3B61     		str	r3, [r7, #16]
 2840 005c FB68     		ldr	r3, [r7, #12]
 2841 005e 1B68     		ldr	r3, [r3]
 2842 0060 1B68     		ldr	r3, [r3]
 2843 0062 3B61     		str	r3, [r7, #16]
 2844 0064 FB68     		ldr	r3, [r7, #12]
 2845 0066 1B68     		ldr	r3, [r3]
 2846 0068 5B68     		ldr	r3, [r3, #4]
 2847 006a 3B61     		str	r3, [r7, #16]
 2848 006c 3B69     		ldr	r3, [r7, #16]
 2849              	.L147:
 2850              	.LBE367:
 2851              	.LBB368:
1740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 2852              		.loc 1 1740 9 discriminator 1
 2853 006e FB68     		ldr	r3, [r7, #12]
 2854 0070 1B68     		ldr	r3, [r3]
 2855 0072 0C33     		adds	r3, r3, #12
 2856 0074 BB61     		str	r3, [r7, #24]
 2857              	.LBB369:
 2858              	.LBB370:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2859              		.loc 2 1072 4
 2860 0076 BB69     		ldr	r3, [r7, #24]
 2861              		.syntax unified
 2862              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2863 0078 53E8003F 		ldrex r3, [r3]
 2864              	@ 0 "" 2
 2865              		.thumb
 2866              		.syntax unified
 2867 007c 7B61     		str	r3, [r7, #20]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2868              		.loc 2 1073 10
 2869 007e 7B69     		ldr	r3, [r7, #20]
 2870              	.LBE370:
 2871              	.LBE369:
 2872              		.loc 1 1740 9 discriminator 1
 2873 0080 43F01003 		orr	r3, r3, #16
 2874 0084 BB62     		str	r3, [r7, #40]
 2875 0086 FB68     		ldr	r3, [r7, #12]
 2876 0088 1B68     		ldr	r3, [r3]
 2877 008a 0C33     		adds	r3, r3, #12
 2878 008c BA6A     		ldr	r2, [r7, #40]
 2879 008e 7A62     		str	r2, [r7, #36]
 2880 0090 3B62     		str	r3, [r7, #32]
 2881              	.LBB371:
 2882              	.LBB372:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2883              		.loc 2 1123 4
 2884 0092 396A     		ldr	r1, [r7, #32]
 2885 0094 7A6A     		ldr	r2, [r7, #36]
 2886              		.syntax unified
 2887              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2888 0096 41E80023 		strex r3, r2, [r1]
 2889              	@ 0 "" 2
ARM GAS  /tmp//ccY11c6d.s 			page 102


 2890              		.thumb
 2891              		.syntax unified
 2892 009a FB61     		str	r3, [r7, #28]
 2893              		.loc 2 1124 10
 2894 009c FB69     		ldr	r3, [r7, #28]
 2895              	.LBE372:
 2896              	.LBE371:
 2897              		.loc 1 1740 9 discriminator 1
 2898 009e 002B     		cmp	r3, #0
 2899 00a0 E5D1     		bne	.L147
 2900 00a2 02E0     		b	.L143
 2901              	.L144:
 2902              	.LBE368:
1741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* In case of errors already pending when reception is started,
1745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Interrupts may have already been raised and lead to reception abortion.
1746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            (Overrun error for instance).
1747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
1748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status = HAL_ERROR;
 2903              		.loc 1 1748 16
 2904 00a4 0123     		movs	r3, #1
 2905 00a6 87F82F30 		strb	r3, [r7, #47]
 2906              	.L143:
1749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return status;
 2907              		.loc 1 1752 12
 2908 00aa 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2909 00ae 00E0     		b	.L142
 2910              	.L139:
1753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 2911              		.loc 1 1756 12
 2912 00b0 0223     		movs	r3, #2
 2913              	.L142:
1757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2914              		.loc 1 1758 1
 2915 00b2 1846     		mov	r0, r3
 2916 00b4 3037     		adds	r7, r7, #48
 2917              	.LCFI93:
 2918              		.cfi_def_cfa_offset 8
 2919 00b6 BD46     		mov	sp, r7
 2920              	.LCFI94:
 2921              		.cfi_def_cfa_register 13
 2922              		@ sp needed
 2923 00b8 80BD     		pop	{r7, pc}
 2924              		.cfi_endproc
 2925              	.LFE82:
 2927              		.section	.text.HAL_UARTEx_ReceiveToIdle_DMA,"ax",%progbits
 2928              		.align	1
 2929              		.global	HAL_UARTEx_ReceiveToIdle_DMA
ARM GAS  /tmp//ccY11c6d.s 			page 103


 2930              		.syntax unified
 2931              		.thumb
 2932              		.thumb_func
 2934              	HAL_UARTEx_ReceiveToIdle_DMA:
 2935              	.LFB83:
1759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Receive an amount of data in DMA mode till either the expected number of data is receive
1762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   Reception is initiated by this function call. Further progress of reception is achieved
1763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         to DMA services, transferring automatically received data elements in user reception bu
1764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         calling registered callbacks at half/end of reception. UART IDLE events are also used t
1765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         reception phase as ended. In all cases, callback execution will indicate number of rece
1766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1), the received data contain
1767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the parity bit (MSB position).
1768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M =
1769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
1770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of uint16_t available through pData.
1771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param huart UART handle.
1772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
1773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
1774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t 
1777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2936              		.loc 1 1777 1
 2937              		.cfi_startproc
 2938              		@ args = 0, pretend = 0, frame = 48
 2939              		@ frame_needed = 1, uses_anonymous_args = 0
 2940 0000 80B5     		push	{r7, lr}
 2941              	.LCFI95:
 2942              		.cfi_def_cfa_offset 8
 2943              		.cfi_offset 7, -8
 2944              		.cfi_offset 14, -4
 2945 0002 8CB0     		sub	sp, sp, #48
 2946              	.LCFI96:
 2947              		.cfi_def_cfa_offset 56
 2948 0004 00AF     		add	r7, sp, #0
 2949              	.LCFI97:
 2950              		.cfi_def_cfa_register 7
 2951 0006 F860     		str	r0, [r7, #12]
 2952 0008 B960     		str	r1, [r7, #8]
 2953 000a 1346     		mov	r3, r2
 2954 000c FB80     		strh	r3, [r7, #6]	@ movhi
1778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status;
1779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 2955              		.loc 1 1781 12
 2956 000e FB68     		ldr	r3, [r7, #12]
 2957 0010 93F84230 		ldrb	r3, [r3, #66]
 2958 0014 DBB2     		uxtb	r3, r3
 2959              		.loc 1 1781 6
 2960 0016 202B     		cmp	r3, #32
 2961 0018 46D1     		bne	.L149
1782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 2962              		.loc 1 1783 8
ARM GAS  /tmp//ccY11c6d.s 			page 104


 2963 001a BB68     		ldr	r3, [r7, #8]
 2964 001c 002B     		cmp	r3, #0
 2965 001e 02D0     		beq	.L150
 2966              		.loc 1 1783 25 discriminator 1
 2967 0020 FB88     		ldrh	r3, [r7, #6]
 2968 0022 002B     		cmp	r3, #0
 2969 0024 01D1     		bne	.L151
 2970              	.L150:
1784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 2971              		.loc 1 1785 14
 2972 0026 0123     		movs	r3, #1
 2973 0028 3FE0     		b	.L152
 2974              	.L151:
1786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to reception till IDLE Event*/
1789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 2975              		.loc 1 1789 26
 2976 002a FB68     		ldr	r3, [r7, #12]
 2977 002c 0122     		movs	r2, #1
 2978 002e 1A63     		str	r2, [r3, #48]
1790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 2979              		.loc 1 1790 24
 2980 0030 FB68     		ldr	r3, [r7, #12]
 2981 0032 0022     		movs	r2, #0
 2982 0034 5A63     		str	r2, [r3, #52]
1791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  UART_Start_Receive_DMA(huart, pData, Size);
 2983              		.loc 1 1792 15
 2984 0036 FB88     		ldrh	r3, [r7, #6]
 2985 0038 1A46     		mov	r2, r3
 2986 003a B968     		ldr	r1, [r7, #8]
 2987 003c F868     		ldr	r0, [r7, #12]
 2988 003e FFF7FEFF 		bl	UART_Start_Receive_DMA
 2989 0042 0346     		mov	r3, r0
 2990 0044 87F82F30 		strb	r3, [r7, #47]
1793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check Rx process has been successfully started */
1795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 2991              		.loc 1 1795 14
 2992 0048 FB68     		ldr	r3, [r7, #12]
 2993 004a 1B6B     		ldr	r3, [r3, #48]
 2994              		.loc 1 1795 8
 2995 004c 012B     		cmp	r3, #1
 2996 004e 25D1     		bne	.L153
 2997              	.LBB373:
1796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_CLEAR_IDLEFLAG(huart);
 2998              		.loc 1 1797 7
 2999 0050 0023     		movs	r3, #0
 3000 0052 3B61     		str	r3, [r7, #16]
 3001 0054 FB68     		ldr	r3, [r7, #12]
 3002 0056 1B68     		ldr	r3, [r3]
 3003 0058 1B68     		ldr	r3, [r3]
 3004 005a 3B61     		str	r3, [r7, #16]
 3005 005c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp//ccY11c6d.s 			page 105


 3006 005e 1B68     		ldr	r3, [r3]
 3007 0060 5B68     		ldr	r3, [r3, #4]
 3008 0062 3B61     		str	r3, [r7, #16]
 3009 0064 3B69     		ldr	r3, [r7, #16]
 3010              	.L156:
 3011              	.LBE373:
 3012              	.LBB374:
1798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 3013              		.loc 1 1798 7 discriminator 1
 3014 0066 FB68     		ldr	r3, [r7, #12]
 3015 0068 1B68     		ldr	r3, [r3]
 3016 006a 0C33     		adds	r3, r3, #12
 3017 006c BB61     		str	r3, [r7, #24]
 3018              	.LBB375:
 3019              	.LBB376:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3020              		.loc 2 1072 4
 3021 006e BB69     		ldr	r3, [r7, #24]
 3022              		.syntax unified
 3023              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3024 0070 53E8003F 		ldrex r3, [r3]
 3025              	@ 0 "" 2
 3026              		.thumb
 3027              		.syntax unified
 3028 0074 7B61     		str	r3, [r7, #20]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3029              		.loc 2 1073 10
 3030 0076 7B69     		ldr	r3, [r7, #20]
 3031              	.LBE376:
 3032              	.LBE375:
 3033              		.loc 1 1798 7 discriminator 1
 3034 0078 43F01003 		orr	r3, r3, #16
 3035 007c BB62     		str	r3, [r7, #40]
 3036 007e FB68     		ldr	r3, [r7, #12]
 3037 0080 1B68     		ldr	r3, [r3]
 3038 0082 0C33     		adds	r3, r3, #12
 3039 0084 BA6A     		ldr	r2, [r7, #40]
 3040 0086 7A62     		str	r2, [r7, #36]
 3041 0088 3B62     		str	r3, [r7, #32]
 3042              	.LBB377:
 3043              	.LBB378:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3044              		.loc 2 1123 4
 3045 008a 396A     		ldr	r1, [r7, #32]
 3046 008c 7A6A     		ldr	r2, [r7, #36]
 3047              		.syntax unified
 3048              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3049 008e 41E80023 		strex r3, r2, [r1]
 3050              	@ 0 "" 2
 3051              		.thumb
 3052              		.syntax unified
 3053 0092 FB61     		str	r3, [r7, #28]
 3054              		.loc 2 1124 10
 3055 0094 FB69     		ldr	r3, [r7, #28]
 3056              	.LBE378:
 3057              	.LBE377:
 3058              		.loc 1 1798 7 discriminator 1
ARM GAS  /tmp//ccY11c6d.s 			page 106


 3059 0096 002B     		cmp	r3, #0
 3060 0098 E5D1     		bne	.L156
 3061 009a 02E0     		b	.L157
 3062              	.L153:
 3063              	.LBE374:
1799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* In case of errors already pending when reception is started,
1803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          Interrupts may have already been raised and lead to reception abortion.
1804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          (Overrun error for instance).
1805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
1806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       status = HAL_ERROR;
 3064              		.loc 1 1806 14
 3065 009c 0123     		movs	r3, #1
 3066 009e 87F82F30 		strb	r3, [r7, #47]
 3067              	.L157:
1807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return status;
 3068              		.loc 1 1809 12
 3069 00a2 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 3070 00a6 00E0     		b	.L152
 3071              	.L149:
1810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 3072              		.loc 1 1813 12
 3073 00a8 0223     		movs	r3, #2
 3074              	.L152:
1814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3075              		.loc 1 1815 1
 3076 00aa 1846     		mov	r0, r3
 3077 00ac 3037     		adds	r7, r7, #48
 3078              	.LCFI98:
 3079              		.cfi_def_cfa_offset 8
 3080 00ae BD46     		mov	sp, r7
 3081              	.LCFI99:
 3082              		.cfi_def_cfa_register 13
 3083              		@ sp needed
 3084 00b0 80BD     		pop	{r7, pc}
 3085              		.cfi_endproc
 3086              	.LFE83:
 3088              		.section	.text.HAL_UARTEx_GetRxEventType,"ax",%progbits
 3089              		.align	1
 3090              		.global	HAL_UARTEx_GetRxEventType
 3091              		.syntax unified
 3092              		.thumb
 3093              		.thumb_func
 3095              	HAL_UARTEx_GetRxEventType:
 3096              	.LFB84:
1816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Provide Rx Event type that has lead to RxEvent callback execution.
1819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note  When HAL_UARTEx_ReceiveToIdle_IT() or HAL_UARTEx_ReceiveToIdle_DMA() API are called, pro
ARM GAS  /tmp//ccY11c6d.s 			page 107


1820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        of reception process is provided to application through calls of Rx Event callback (eith
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        HAL_UARTEx_RxEventCallback() or user registered one). As several types of events could o
1822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        Half Transfer, or Transfer Complete), this function allows to retrieve the Rx Event type
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        to Rx Event callback execution.
1824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note  This function is expected to be called within the user implementation of Rx Event Callba
1825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        in order to provide the accurate value :
1826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        In Interrupt Mode :
1827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - HAL_UART_RXEVENT_TC : when Reception has been completed (expected nb of data has be
1828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - HAL_UART_RXEVENT_IDLE : when Idle event occurred prior reception has been completed
1829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *             received data is lower than expected one)
1830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        In DMA Mode :
1831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - HAL_UART_RXEVENT_TC : when Reception has been completed (expected nb of data has be
1832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - HAL_UART_RXEVENT_HT : when half of expected nb of data has been received
1833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - HAL_UART_RXEVENT_IDLE : when Idle event occurred prior reception has been completed
1834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *             received data is lower than expected one).
1835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        In DMA mode, RxEvent callback could be called several times;
1836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        When DMA is configured in Normal Mode, HT event does not stop Reception process;
1837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        When DMA is configured in Circular Mode, HT, TC or IDLE events don't stop Reception proc
1838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval Rx Event Type (returned value will be a value of @ref UART_RxEvent_Type_Values)
1840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_UART_RxEventTypeTypeDef HAL_UARTEx_GetRxEventType(UART_HandleTypeDef *huart)
1842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3097              		.loc 1 1842 1
 3098              		.cfi_startproc
 3099              		@ args = 0, pretend = 0, frame = 8
 3100              		@ frame_needed = 1, uses_anonymous_args = 0
 3101              		@ link register save eliminated.
 3102 0000 80B4     		push	{r7}
 3103              	.LCFI100:
 3104              		.cfi_def_cfa_offset 4
 3105              		.cfi_offset 7, -4
 3106 0002 83B0     		sub	sp, sp, #12
 3107              	.LCFI101:
 3108              		.cfi_def_cfa_offset 16
 3109 0004 00AF     		add	r7, sp, #0
 3110              	.LCFI102:
 3111              		.cfi_def_cfa_register 7
 3112 0006 7860     		str	r0, [r7, #4]
1843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Return Rx Event type value, as stored in UART handle */
1844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return(huart->RxEventType);
 3113              		.loc 1 1844 15
 3114 0008 7B68     		ldr	r3, [r7, #4]
 3115 000a 5B6B     		ldr	r3, [r3, #52]
1845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3116              		.loc 1 1845 1
 3117 000c 1846     		mov	r0, r3
 3118 000e 0C37     		adds	r7, r7, #12
 3119              	.LCFI103:
 3120              		.cfi_def_cfa_offset 4
 3121 0010 BD46     		mov	sp, r7
 3122              	.LCFI104:
 3123              		.cfi_def_cfa_register 13
 3124              		@ sp needed
 3125 0012 80BC     		pop	{r7}
 3126              	.LCFI105:
 3127              		.cfi_restore 7
ARM GAS  /tmp//ccY11c6d.s 			page 108


 3128              		.cfi_def_cfa_offset 0
 3129 0014 7047     		bx	lr
 3130              		.cfi_endproc
 3131              	.LFE84:
 3133              		.section	.text.HAL_UART_Abort,"ax",%progbits
 3134              		.align	1
 3135              		.global	HAL_UART_Abort
 3136              		.syntax unified
 3137              		.thumb
 3138              		.thumb_func
 3140              	HAL_UART_Abort:
 3141              	.LFB85:
1846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3142              		.loc 1 1860 1
 3143              		.cfi_startproc
 3144              		@ args = 0, pretend = 0, frame = 128
 3145              		@ frame_needed = 1, uses_anonymous_args = 0
 3146 0000 80B5     		push	{r7, lr}
 3147              	.LCFI106:
 3148              		.cfi_def_cfa_offset 8
 3149              		.cfi_offset 7, -8
 3150              		.cfi_offset 14, -4
 3151 0002 A0B0     		sub	sp, sp, #128
 3152              	.LCFI107:
 3153              		.cfi_def_cfa_offset 136
 3154 0004 00AF     		add	r7, sp, #0
 3155              	.LCFI108:
 3156              		.cfi_def_cfa_register 7
 3157 0006 7860     		str	r0, [r7, #4]
 3158              	.L163:
 3159              	.LBB379:
1861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USA
 3160              		.loc 1 1862 3 discriminator 1
 3161 0008 7B68     		ldr	r3, [r7, #4]
 3162 000a 1B68     		ldr	r3, [r3]
 3163 000c 0C33     		adds	r3, r3, #12
 3164 000e FB65     		str	r3, [r7, #92]
 3165              	.LBB380:
 3166              	.LBB381:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3167              		.loc 2 1072 4
 3168 0010 FB6D     		ldr	r3, [r7, #92]
ARM GAS  /tmp//ccY11c6d.s 			page 109


 3169              		.syntax unified
 3170              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3171 0012 53E8003F 		ldrex r3, [r3]
 3172              	@ 0 "" 2
 3173              		.thumb
 3174              		.syntax unified
 3175 0016 BB65     		str	r3, [r7, #88]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3176              		.loc 2 1073 10
 3177 0018 BB6D     		ldr	r3, [r7, #88]
 3178              	.LBE381:
 3179              	.LBE380:
 3180              		.loc 1 1862 3 discriminator 1
 3181 001a 23F4F073 		bic	r3, r3, #480
 3182 001e FB67     		str	r3, [r7, #124]
 3183 0020 7B68     		ldr	r3, [r7, #4]
 3184 0022 1B68     		ldr	r3, [r3]
 3185 0024 0C33     		adds	r3, r3, #12
 3186 0026 FA6F     		ldr	r2, [r7, #124]
 3187 0028 BA66     		str	r2, [r7, #104]
 3188 002a 7B66     		str	r3, [r7, #100]
 3189              	.LBB382:
 3190              	.LBB383:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3191              		.loc 2 1123 4
 3192 002c 796E     		ldr	r1, [r7, #100]
 3193 002e BA6E     		ldr	r2, [r7, #104]
 3194              		.syntax unified
 3195              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3196 0030 41E80023 		strex r3, r2, [r1]
 3197              	@ 0 "" 2
 3198              		.thumb
 3199              		.syntax unified
 3200 0034 3B66     		str	r3, [r7, #96]
 3201              		.loc 2 1124 10
 3202 0036 3B6E     		ldr	r3, [r7, #96]
 3203              	.LBE383:
 3204              	.LBE382:
 3205              		.loc 1 1862 3 discriminator 1
 3206 0038 002B     		cmp	r3, #0
 3207 003a E5D1     		bne	.L163
 3208              	.L166:
 3209              	.LBE379:
 3210              	.LBB384:
1863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3211              		.loc 1 1863 3 discriminator 1
 3212 003c 7B68     		ldr	r3, [r7, #4]
 3213 003e 1B68     		ldr	r3, [r3]
 3214 0040 1433     		adds	r3, r3, #20
 3215 0042 BB64     		str	r3, [r7, #72]
 3216              	.LBB385:
 3217              	.LBB386:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3218              		.loc 2 1072 4
 3219 0044 BB6C     		ldr	r3, [r7, #72]
 3220              		.syntax unified
 3221              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp//ccY11c6d.s 			page 110


 3222 0046 53E8003F 		ldrex r3, [r3]
 3223              	@ 0 "" 2
 3224              		.thumb
 3225              		.syntax unified
 3226 004a 7B64     		str	r3, [r7, #68]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3227              		.loc 2 1073 10
 3228 004c 7B6C     		ldr	r3, [r7, #68]
 3229              	.LBE386:
 3230              	.LBE385:
 3231              		.loc 1 1863 3 discriminator 1
 3232 004e 23F00103 		bic	r3, r3, #1
 3233 0052 BB67     		str	r3, [r7, #120]
 3234 0054 7B68     		ldr	r3, [r7, #4]
 3235 0056 1B68     		ldr	r3, [r3]
 3236 0058 1433     		adds	r3, r3, #20
 3237 005a BA6F     		ldr	r2, [r7, #120]
 3238 005c 7A65     		str	r2, [r7, #84]
 3239 005e 3B65     		str	r3, [r7, #80]
 3240              	.LBB387:
 3241              	.LBB388:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3242              		.loc 2 1123 4
 3243 0060 396D     		ldr	r1, [r7, #80]
 3244 0062 7A6D     		ldr	r2, [r7, #84]
 3245              		.syntax unified
 3246              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3247 0064 41E80023 		strex r3, r2, [r1]
 3248              	@ 0 "" 2
 3249              		.thumb
 3250              		.syntax unified
 3251 0068 FB64     		str	r3, [r7, #76]
 3252              		.loc 2 1124 10
 3253 006a FB6C     		ldr	r3, [r7, #76]
 3254              	.LBE388:
 3255              	.LBE387:
 3256              		.loc 1 1863 3 discriminator 1
 3257 006c 002B     		cmp	r3, #0
 3258 006e E5D1     		bne	.L166
 3259              	.LBE384:
1864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
1866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 3260              		.loc 1 1866 12
 3261 0070 7B68     		ldr	r3, [r7, #4]
 3262 0072 1B6B     		ldr	r3, [r3, #48]
 3263              		.loc 1 1866 6
 3264 0074 012B     		cmp	r3, #1
 3265 0076 19D1     		bne	.L167
 3266              	.L170:
 3267              	.LBB389:
1867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 3268              		.loc 1 1868 5 discriminator 1
 3269 0078 7B68     		ldr	r3, [r7, #4]
 3270 007a 1B68     		ldr	r3, [r3]
 3271 007c 0C33     		adds	r3, r3, #12
ARM GAS  /tmp//ccY11c6d.s 			page 111


 3272 007e 7B63     		str	r3, [r7, #52]
 3273              	.LBB390:
 3274              	.LBB391:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3275              		.loc 2 1072 4
 3276 0080 7B6B     		ldr	r3, [r7, #52]
 3277              		.syntax unified
 3278              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3279 0082 53E8003F 		ldrex r3, [r3]
 3280              	@ 0 "" 2
 3281              		.thumb
 3282              		.syntax unified
 3283 0086 3B63     		str	r3, [r7, #48]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3284              		.loc 2 1073 10
 3285 0088 3B6B     		ldr	r3, [r7, #48]
 3286              	.LBE391:
 3287              	.LBE390:
 3288              		.loc 1 1868 5 discriminator 1
 3289 008a 23F01003 		bic	r3, r3, #16
 3290 008e 7B67     		str	r3, [r7, #116]
 3291 0090 7B68     		ldr	r3, [r7, #4]
 3292 0092 1B68     		ldr	r3, [r3]
 3293 0094 0C33     		adds	r3, r3, #12
 3294 0096 7A6F     		ldr	r2, [r7, #116]
 3295 0098 3A64     		str	r2, [r7, #64]
 3296 009a FB63     		str	r3, [r7, #60]
 3297              	.LBB392:
 3298              	.LBB393:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3299              		.loc 2 1123 4
 3300 009c F96B     		ldr	r1, [r7, #60]
 3301 009e 3A6C     		ldr	r2, [r7, #64]
 3302              		.syntax unified
 3303              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3304 00a0 41E80023 		strex r3, r2, [r1]
 3305              	@ 0 "" 2
 3306              		.thumb
 3307              		.syntax unified
 3308 00a4 BB63     		str	r3, [r7, #56]
 3309              		.loc 2 1124 10
 3310 00a6 BB6B     		ldr	r3, [r7, #56]
 3311              	.LBE393:
 3312              	.LBE392:
 3313              		.loc 1 1868 5 discriminator 1
 3314 00a8 002B     		cmp	r3, #0
 3315 00aa E5D1     		bne	.L170
 3316              	.L167:
 3317              	.LBE389:
1869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 3318              		.loc 1 1872 7
 3319 00ac 7B68     		ldr	r3, [r7, #4]
 3320 00ae 1B68     		ldr	r3, [r3]
 3321 00b0 5B69     		ldr	r3, [r3, #20]
ARM GAS  /tmp//ccY11c6d.s 			page 112


 3322 00b2 03F08003 		and	r3, r3, #128
 3323              		.loc 1 1872 6
 3324 00b6 002B     		cmp	r3, #0
 3325 00b8 36D0     		beq	.L171
 3326              	.L174:
 3327              	.LBB394:
1873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 3328              		.loc 1 1874 5 discriminator 1
 3329 00ba 7B68     		ldr	r3, [r7, #4]
 3330 00bc 1B68     		ldr	r3, [r3]
 3331 00be 1433     		adds	r3, r3, #20
 3332 00c0 3B62     		str	r3, [r7, #32]
 3333              	.LBB395:
 3334              	.LBB396:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3335              		.loc 2 1072 4
 3336 00c2 3B6A     		ldr	r3, [r7, #32]
 3337              		.syntax unified
 3338              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3339 00c4 53E8003F 		ldrex r3, [r3]
 3340              	@ 0 "" 2
 3341              		.thumb
 3342              		.syntax unified
 3343 00c8 FB61     		str	r3, [r7, #28]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3344              		.loc 2 1073 10
 3345 00ca FB69     		ldr	r3, [r7, #28]
 3346              	.LBE396:
 3347              	.LBE395:
 3348              		.loc 1 1874 5 discriminator 1
 3349 00cc 23F08003 		bic	r3, r3, #128
 3350 00d0 3B67     		str	r3, [r7, #112]
 3351 00d2 7B68     		ldr	r3, [r7, #4]
 3352 00d4 1B68     		ldr	r3, [r3]
 3353 00d6 1433     		adds	r3, r3, #20
 3354 00d8 3A6F     		ldr	r2, [r7, #112]
 3355 00da FA62     		str	r2, [r7, #44]
 3356 00dc BB62     		str	r3, [r7, #40]
 3357              	.LBB397:
 3358              	.LBB398:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3359              		.loc 2 1123 4
 3360 00de B96A     		ldr	r1, [r7, #40]
 3361 00e0 FA6A     		ldr	r2, [r7, #44]
 3362              		.syntax unified
 3363              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3364 00e2 41E80023 		strex r3, r2, [r1]
 3365              	@ 0 "" 2
 3366              		.thumb
 3367              		.syntax unified
 3368 00e6 7B62     		str	r3, [r7, #36]
 3369              		.loc 2 1124 10
 3370 00e8 7B6A     		ldr	r3, [r7, #36]
 3371              	.LBE398:
 3372              	.LBE397:
 3373              		.loc 1 1874 5 discriminator 1
ARM GAS  /tmp//ccY11c6d.s 			page 113


 3374 00ea 002B     		cmp	r3, #0
 3375 00ec E5D1     		bne	.L174
 3376              	.LBE394:
1875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
1877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 3377              		.loc 1 1877 14
 3378 00ee 7B68     		ldr	r3, [r7, #4]
 3379 00f0 9B6B     		ldr	r3, [r3, #56]
 3380              		.loc 1 1877 8
 3381 00f2 002B     		cmp	r3, #0
 3382 00f4 18D0     		beq	.L171
1878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 3383              		.loc 1 1881 12
 3384 00f6 7B68     		ldr	r3, [r7, #4]
 3385 00f8 9B6B     		ldr	r3, [r3, #56]
 3386              		.loc 1 1881 40
 3387 00fa 0022     		movs	r2, #0
 3388 00fc 5A63     		str	r2, [r3, #52]
1882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 3389              		.loc 1 1883 11
 3390 00fe 7B68     		ldr	r3, [r7, #4]
 3391 0100 9B6B     		ldr	r3, [r3, #56]
 3392 0102 1846     		mov	r0, r3
 3393 0104 FFF7FEFF 		bl	HAL_DMA_Abort
 3394 0108 0346     		mov	r3, r0
 3395              		.loc 1 1883 10 discriminator 1
 3396 010a 002B     		cmp	r3, #0
 3397 010c 0CD0     		beq	.L171
1884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 3398              		.loc 1 1885 13
 3399 010e 7B68     		ldr	r3, [r7, #4]
 3400 0110 9B6B     		ldr	r3, [r3, #56]
 3401 0112 1846     		mov	r0, r3
 3402 0114 FFF7FEFF 		bl	HAL_DMA_GetError
 3403 0118 0346     		mov	r3, r0
 3404              		.loc 1 1885 12 discriminator 1
 3405 011a 202B     		cmp	r3, #32
 3406 011c 04D1     		bne	.L171
1886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 3407              		.loc 1 1888 28
 3408 011e 7B68     		ldr	r3, [r7, #4]
 3409 0120 1022     		movs	r2, #16
 3410 0122 5A64     		str	r2, [r3, #68]
1889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 3411              		.loc 1 1890 18
 3412 0124 0323     		movs	r3, #3
 3413 0126 52E0     		b	.L175
 3414              	.L171:
ARM GAS  /tmp//ccY11c6d.s 			page 114


1891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3415              		.loc 1 1897 7
 3416 0128 7B68     		ldr	r3, [r7, #4]
 3417 012a 1B68     		ldr	r3, [r3]
 3418 012c 5B69     		ldr	r3, [r3, #20]
 3419 012e 03F04003 		and	r3, r3, #64
 3420              		.loc 1 1897 6
 3421 0132 002B     		cmp	r3, #0
 3422 0134 36D0     		beq	.L176
 3423              	.L179:
 3424              	.LBB399:
1898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3425              		.loc 1 1899 5 discriminator 1
 3426 0136 7B68     		ldr	r3, [r7, #4]
 3427 0138 1B68     		ldr	r3, [r3]
 3428 013a 1433     		adds	r3, r3, #20
 3429 013c FB60     		str	r3, [r7, #12]
 3430              	.LBB400:
 3431              	.LBB401:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3432              		.loc 2 1072 4
 3433 013e FB68     		ldr	r3, [r7, #12]
 3434              		.syntax unified
 3435              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3436 0140 53E8003F 		ldrex r3, [r3]
 3437              	@ 0 "" 2
 3438              		.thumb
 3439              		.syntax unified
 3440 0144 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3441              		.loc 2 1073 10
 3442 0146 BB68     		ldr	r3, [r7, #8]
 3443              	.LBE401:
 3444              	.LBE400:
 3445              		.loc 1 1899 5 discriminator 1
 3446 0148 23F04003 		bic	r3, r3, #64
 3447 014c FB66     		str	r3, [r7, #108]
 3448 014e 7B68     		ldr	r3, [r7, #4]
 3449 0150 1B68     		ldr	r3, [r3]
 3450 0152 1433     		adds	r3, r3, #20
 3451 0154 FA6E     		ldr	r2, [r7, #108]
 3452 0156 BA61     		str	r2, [r7, #24]
 3453 0158 7B61     		str	r3, [r7, #20]
 3454              	.LBB402:
 3455              	.LBB403:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3456              		.loc 2 1123 4
 3457 015a 7969     		ldr	r1, [r7, #20]
 3458 015c BA69     		ldr	r2, [r7, #24]
 3459              		.syntax unified
ARM GAS  /tmp//ccY11c6d.s 			page 115


 3460              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3461 015e 41E80023 		strex r3, r2, [r1]
 3462              	@ 0 "" 2
 3463              		.thumb
 3464              		.syntax unified
 3465 0162 3B61     		str	r3, [r7, #16]
 3466              		.loc 2 1124 10
 3467 0164 3B69     		ldr	r3, [r7, #16]
 3468              	.LBE403:
 3469              	.LBE402:
 3470              		.loc 1 1899 5 discriminator 1
 3471 0166 002B     		cmp	r3, #0
 3472 0168 E5D1     		bne	.L179
 3473              	.LBE399:
1900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
1902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 3474              		.loc 1 1902 14
 3475 016a 7B68     		ldr	r3, [r7, #4]
 3476 016c DB6B     		ldr	r3, [r3, #60]
 3477              		.loc 1 1902 8
 3478 016e 002B     		cmp	r3, #0
 3479 0170 18D0     		beq	.L176
1903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 3480              		.loc 1 1906 12
 3481 0172 7B68     		ldr	r3, [r7, #4]
 3482 0174 DB6B     		ldr	r3, [r3, #60]
 3483              		.loc 1 1906 40
 3484 0176 0022     		movs	r2, #0
 3485 0178 5A63     		str	r2, [r3, #52]
1907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 3486              		.loc 1 1908 11
 3487 017a 7B68     		ldr	r3, [r7, #4]
 3488 017c DB6B     		ldr	r3, [r3, #60]
 3489 017e 1846     		mov	r0, r3
 3490 0180 FFF7FEFF 		bl	HAL_DMA_Abort
 3491 0184 0346     		mov	r3, r0
 3492              		.loc 1 1908 10 discriminator 1
 3493 0186 002B     		cmp	r3, #0
 3494 0188 0CD0     		beq	.L176
1909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 3495              		.loc 1 1910 13
 3496 018a 7B68     		ldr	r3, [r7, #4]
 3497 018c DB6B     		ldr	r3, [r3, #60]
 3498 018e 1846     		mov	r0, r3
 3499 0190 FFF7FEFF 		bl	HAL_DMA_GetError
 3500 0194 0346     		mov	r3, r0
 3501              		.loc 1 1910 12 discriminator 1
 3502 0196 202B     		cmp	r3, #32
 3503 0198 04D1     		bne	.L176
1911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
ARM GAS  /tmp//ccY11c6d.s 			page 116


1913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 3504              		.loc 1 1913 28
 3505 019a 7B68     		ldr	r3, [r7, #4]
 3506 019c 1022     		movs	r2, #16
 3507 019e 5A64     		str	r2, [r3, #68]
1914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 3508              		.loc 1 1915 18
 3509 01a0 0323     		movs	r3, #3
 3510 01a2 14E0     		b	.L175
 3511              	.L176:
1916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 3512              		.loc 1 1922 22
 3513 01a4 7B68     		ldr	r3, [r7, #4]
 3514 01a6 0022     		movs	r2, #0
 3515 01a8 DA84     		strh	r2, [r3, #38]	@ movhi
1923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 3516              		.loc 1 1923 22
 3517 01aa 7B68     		ldr	r3, [r7, #4]
 3518 01ac 0022     		movs	r2, #0
 3519 01ae DA85     		strh	r2, [r3, #46]	@ movhi
1924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
1926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 3520              		.loc 1 1926 20
 3521 01b0 7B68     		ldr	r3, [r7, #4]
 3522 01b2 0022     		movs	r2, #0
 3523 01b4 5A64     		str	r2, [r3, #68]
1927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState and huart->gState to Ready */
1929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 3524              		.loc 1 1929 18
 3525 01b6 7B68     		ldr	r3, [r7, #4]
 3526 01b8 2022     		movs	r2, #32
 3527 01ba 83F84220 		strb	r2, [r3, #66]
1930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3528              		.loc 1 1930 17
 3529 01be 7B68     		ldr	r3, [r7, #4]
 3530 01c0 2022     		movs	r2, #32
 3531 01c2 83F84120 		strb	r2, [r3, #65]
1931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3532              		.loc 1 1931 24
 3533 01c6 7B68     		ldr	r3, [r7, #4]
 3534 01c8 0022     		movs	r2, #0
 3535 01ca 1A63     		str	r2, [r3, #48]
1932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 3536              		.loc 1 1933 10
 3537 01cc 0023     		movs	r3, #0
 3538              	.L175:
1934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
ARM GAS  /tmp//ccY11c6d.s 			page 117


 3539              		.loc 1 1934 1
 3540 01ce 1846     		mov	r0, r3
 3541 01d0 8037     		adds	r7, r7, #128
 3542              	.LCFI109:
 3543              		.cfi_def_cfa_offset 8
 3544 01d2 BD46     		mov	sp, r7
 3545              	.LCFI110:
 3546              		.cfi_def_cfa_register 13
 3547              		@ sp needed
 3548 01d4 80BD     		pop	{r7, pc}
 3549              		.cfi_endproc
 3550              	.LFE85:
 3552              		.section	.text.HAL_UART_AbortTransmit,"ax",%progbits
 3553              		.align	1
 3554              		.global	HAL_UART_AbortTransmit
 3555              		.syntax unified
 3556              		.thumb
 3557              		.thumb_func
 3559              	HAL_UART_AbortTransmit:
 3560              	.LFB86:
1935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
1949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3561              		.loc 1 1949 1
 3562              		.cfi_startproc
 3563              		@ args = 0, pretend = 0, frame = 56
 3564              		@ frame_needed = 1, uses_anonymous_args = 0
 3565 0000 80B5     		push	{r7, lr}
 3566              	.LCFI111:
 3567              		.cfi_def_cfa_offset 8
 3568              		.cfi_offset 7, -8
 3569              		.cfi_offset 14, -4
 3570 0002 8EB0     		sub	sp, sp, #56
 3571              	.LCFI112:
 3572              		.cfi_def_cfa_offset 64
 3573 0004 00AF     		add	r7, sp, #0
 3574              	.LCFI113:
 3575              		.cfi_def_cfa_register 7
 3576 0006 7860     		str	r0, [r7, #4]
 3577              	.L183:
 3578              	.LBB404:
1950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 3579              		.loc 1 1951 3 discriminator 1
 3580 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp//ccY11c6d.s 			page 118


 3581 000a 1B68     		ldr	r3, [r3]
 3582 000c 0C33     		adds	r3, r3, #12
 3583 000e 3B62     		str	r3, [r7, #32]
 3584              	.LBB405:
 3585              	.LBB406:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3586              		.loc 2 1072 4
 3587 0010 3B6A     		ldr	r3, [r7, #32]
 3588              		.syntax unified
 3589              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3590 0012 53E8003F 		ldrex r3, [r3]
 3591              	@ 0 "" 2
 3592              		.thumb
 3593              		.syntax unified
 3594 0016 FB61     		str	r3, [r7, #28]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3595              		.loc 2 1073 10
 3596 0018 FB69     		ldr	r3, [r7, #28]
 3597              	.LBE406:
 3598              	.LBE405:
 3599              		.loc 1 1951 3 discriminator 1
 3600 001a 23F0C003 		bic	r3, r3, #192
 3601 001e 7B63     		str	r3, [r7, #52]
 3602 0020 7B68     		ldr	r3, [r7, #4]
 3603 0022 1B68     		ldr	r3, [r3]
 3604 0024 0C33     		adds	r3, r3, #12
 3605 0026 7A6B     		ldr	r2, [r7, #52]
 3606 0028 FA62     		str	r2, [r7, #44]
 3607 002a BB62     		str	r3, [r7, #40]
 3608              	.LBB407:
 3609              	.LBB408:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3610              		.loc 2 1123 4
 3611 002c B96A     		ldr	r1, [r7, #40]
 3612 002e FA6A     		ldr	r2, [r7, #44]
 3613              		.syntax unified
 3614              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3615 0030 41E80023 		strex r3, r2, [r1]
 3616              	@ 0 "" 2
 3617              		.thumb
 3618              		.syntax unified
 3619 0034 7B62     		str	r3, [r7, #36]
 3620              		.loc 2 1124 10
 3621 0036 7B6A     		ldr	r3, [r7, #36]
 3622              	.LBE408:
 3623              	.LBE407:
 3624              		.loc 1 1951 3 discriminator 1
 3625 0038 002B     		cmp	r3, #0
 3626 003a E5D1     		bne	.L183
 3627              	.LBE404:
1952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 3628              		.loc 1 1954 7
 3629 003c 7B68     		ldr	r3, [r7, #4]
 3630 003e 1B68     		ldr	r3, [r3]
 3631 0040 5B69     		ldr	r3, [r3, #20]
ARM GAS  /tmp//ccY11c6d.s 			page 119


 3632 0042 03F08003 		and	r3, r3, #128
 3633              		.loc 1 1954 6
 3634 0046 002B     		cmp	r3, #0
 3635 0048 36D0     		beq	.L184
 3636              	.L187:
 3637              	.LBB409:
1955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 3638              		.loc 1 1956 5 discriminator 1
 3639 004a 7B68     		ldr	r3, [r7, #4]
 3640 004c 1B68     		ldr	r3, [r3]
 3641 004e 1433     		adds	r3, r3, #20
 3642 0050 FB60     		str	r3, [r7, #12]
 3643              	.LBB410:
 3644              	.LBB411:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3645              		.loc 2 1072 4
 3646 0052 FB68     		ldr	r3, [r7, #12]
 3647              		.syntax unified
 3648              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3649 0054 53E8003F 		ldrex r3, [r3]
 3650              	@ 0 "" 2
 3651              		.thumb
 3652              		.syntax unified
 3653 0058 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3654              		.loc 2 1073 10
 3655 005a BB68     		ldr	r3, [r7, #8]
 3656              	.LBE411:
 3657              	.LBE410:
 3658              		.loc 1 1956 5 discriminator 1
 3659 005c 23F08003 		bic	r3, r3, #128
 3660 0060 3B63     		str	r3, [r7, #48]
 3661 0062 7B68     		ldr	r3, [r7, #4]
 3662 0064 1B68     		ldr	r3, [r3]
 3663 0066 1433     		adds	r3, r3, #20
 3664 0068 3A6B     		ldr	r2, [r7, #48]
 3665 006a BA61     		str	r2, [r7, #24]
 3666 006c 7B61     		str	r3, [r7, #20]
 3667              	.LBB412:
 3668              	.LBB413:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3669              		.loc 2 1123 4
 3670 006e 7969     		ldr	r1, [r7, #20]
 3671 0070 BA69     		ldr	r2, [r7, #24]
 3672              		.syntax unified
 3673              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3674 0072 41E80023 		strex r3, r2, [r1]
 3675              	@ 0 "" 2
 3676              		.thumb
 3677              		.syntax unified
 3678 0076 3B61     		str	r3, [r7, #16]
 3679              		.loc 2 1124 10
 3680 0078 3B69     		ldr	r3, [r7, #16]
 3681              	.LBE413:
 3682              	.LBE412:
 3683              		.loc 1 1956 5 discriminator 1
ARM GAS  /tmp//ccY11c6d.s 			page 120


 3684 007a 002B     		cmp	r3, #0
 3685 007c E5D1     		bne	.L187
 3686              	.LBE409:
1957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 3687              		.loc 1 1959 14
 3688 007e 7B68     		ldr	r3, [r7, #4]
 3689 0080 9B6B     		ldr	r3, [r3, #56]
 3690              		.loc 1 1959 8
 3691 0082 002B     		cmp	r3, #0
 3692 0084 18D0     		beq	.L184
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 3693              		.loc 1 1963 12
 3694 0086 7B68     		ldr	r3, [r7, #4]
 3695 0088 9B6B     		ldr	r3, [r3, #56]
 3696              		.loc 1 1963 40
 3697 008a 0022     		movs	r2, #0
 3698 008c 5A63     		str	r2, [r3, #52]
1964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 3699              		.loc 1 1965 11
 3700 008e 7B68     		ldr	r3, [r7, #4]
 3701 0090 9B6B     		ldr	r3, [r3, #56]
 3702 0092 1846     		mov	r0, r3
 3703 0094 FFF7FEFF 		bl	HAL_DMA_Abort
 3704 0098 0346     		mov	r3, r0
 3705              		.loc 1 1965 10 discriminator 1
 3706 009a 002B     		cmp	r3, #0
 3707 009c 0CD0     		beq	.L184
1966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 3708              		.loc 1 1967 13
 3709 009e 7B68     		ldr	r3, [r7, #4]
 3710 00a0 9B6B     		ldr	r3, [r3, #56]
 3711 00a2 1846     		mov	r0, r3
 3712 00a4 FFF7FEFF 		bl	HAL_DMA_GetError
 3713 00a8 0346     		mov	r3, r0
 3714              		.loc 1 1967 12 discriminator 1
 3715 00aa 202B     		cmp	r3, #32
 3716 00ac 04D1     		bne	.L184
1968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 3717              		.loc 1 1970 28
 3718 00ae 7B68     		ldr	r3, [r7, #4]
 3719 00b0 1022     		movs	r2, #16
 3720 00b2 5A64     		str	r2, [r3, #68]
1971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 3721              		.loc 1 1972 18
 3722 00b4 0323     		movs	r3, #3
 3723 00b6 07E0     		b	.L188
 3724              	.L184:
ARM GAS  /tmp//ccY11c6d.s 			page 121


1973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Tx transfer counter */
1979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 3725              		.loc 1 1979 22
 3726 00b8 7B68     		ldr	r3, [r7, #4]
 3727 00ba 0022     		movs	r2, #0
 3728 00bc DA84     		strh	r2, [r3, #38]	@ movhi
1980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3729              		.loc 1 1982 17
 3730 00be 7B68     		ldr	r3, [r7, #4]
 3731 00c0 2022     		movs	r2, #32
 3732 00c2 83F84120 		strb	r2, [r3, #65]
1983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 3733              		.loc 1 1984 10
 3734 00c6 0023     		movs	r3, #0
 3735              	.L188:
1985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3736              		.loc 1 1985 1
 3737 00c8 1846     		mov	r0, r3
 3738 00ca 3837     		adds	r7, r7, #56
 3739              	.LCFI114:
 3740              		.cfi_def_cfa_offset 8
 3741 00cc BD46     		mov	sp, r7
 3742              	.LCFI115:
 3743              		.cfi_def_cfa_register 13
 3744              		@ sp needed
 3745 00ce 80BD     		pop	{r7, pc}
 3746              		.cfi_endproc
 3747              	.LFE86:
 3749              		.section	.text.HAL_UART_AbortReceive,"ax",%progbits
 3750              		.align	1
 3751              		.global	HAL_UART_AbortReceive
 3752              		.syntax unified
 3753              		.thumb
 3754              		.thumb_func
 3756              	HAL_UART_AbortReceive:
 3757              	.LFB87:
1986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
ARM GAS  /tmp//ccY11c6d.s 			page 122


1999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
2000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3758              		.loc 1 2000 1
 3759              		.cfi_startproc
 3760              		@ args = 0, pretend = 0, frame = 104
 3761              		@ frame_needed = 1, uses_anonymous_args = 0
 3762 0000 80B5     		push	{r7, lr}
 3763              	.LCFI116:
 3764              		.cfi_def_cfa_offset 8
 3765              		.cfi_offset 7, -8
 3766              		.cfi_offset 14, -4
 3767 0002 9AB0     		sub	sp, sp, #104
 3768              	.LCFI117:
 3769              		.cfi_def_cfa_offset 112
 3770 0004 00AF     		add	r7, sp, #0
 3771              	.LCFI118:
 3772              		.cfi_def_cfa_register 7
 3773 0006 7860     		str	r0, [r7, #4]
 3774              	.L192:
 3775              	.LBB414:
2001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 3776              		.loc 1 2002 3 discriminator 1
 3777 0008 7B68     		ldr	r3, [r7, #4]
 3778 000a 1B68     		ldr	r3, [r3]
 3779 000c 0C33     		adds	r3, r3, #12
 3780 000e BB64     		str	r3, [r7, #72]
 3781              	.LBB415:
 3782              	.LBB416:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3783              		.loc 2 1072 4
 3784 0010 BB6C     		ldr	r3, [r7, #72]
 3785              		.syntax unified
 3786              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3787 0012 53E8003F 		ldrex r3, [r3]
 3788              	@ 0 "" 2
 3789              		.thumb
 3790              		.syntax unified
 3791 0016 7B64     		str	r3, [r7, #68]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3792              		.loc 2 1073 10
 3793 0018 7B6C     		ldr	r3, [r7, #68]
 3794              	.LBE416:
 3795              	.LBE415:
 3796              		.loc 1 2002 3 discriminator 1
 3797 001a 23F49073 		bic	r3, r3, #288
 3798 001e 7B66     		str	r3, [r7, #100]
 3799 0020 7B68     		ldr	r3, [r7, #4]
 3800 0022 1B68     		ldr	r3, [r3]
 3801 0024 0C33     		adds	r3, r3, #12
 3802 0026 7A6E     		ldr	r2, [r7, #100]
 3803 0028 7A65     		str	r2, [r7, #84]
 3804 002a 3B65     		str	r3, [r7, #80]
 3805              	.LBB417:
 3806              	.LBB418:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3807              		.loc 2 1123 4
ARM GAS  /tmp//ccY11c6d.s 			page 123


 3808 002c 396D     		ldr	r1, [r7, #80]
 3809 002e 7A6D     		ldr	r2, [r7, #84]
 3810              		.syntax unified
 3811              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3812 0030 41E80023 		strex r3, r2, [r1]
 3813              	@ 0 "" 2
 3814              		.thumb
 3815              		.syntax unified
 3816 0034 FB64     		str	r3, [r7, #76]
 3817              		.loc 2 1124 10
 3818 0036 FB6C     		ldr	r3, [r7, #76]
 3819              	.LBE418:
 3820              	.LBE417:
 3821              		.loc 1 2002 3 discriminator 1
 3822 0038 002B     		cmp	r3, #0
 3823 003a E5D1     		bne	.L192
 3824              	.L195:
 3825              	.LBE414:
 3826              	.LBB419:
2003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3827              		.loc 1 2003 3 discriminator 1
 3828 003c 7B68     		ldr	r3, [r7, #4]
 3829 003e 1B68     		ldr	r3, [r3]
 3830 0040 1433     		adds	r3, r3, #20
 3831 0042 7B63     		str	r3, [r7, #52]
 3832              	.LBB420:
 3833              	.LBB421:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3834              		.loc 2 1072 4
 3835 0044 7B6B     		ldr	r3, [r7, #52]
 3836              		.syntax unified
 3837              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3838 0046 53E8003F 		ldrex r3, [r3]
 3839              	@ 0 "" 2
 3840              		.thumb
 3841              		.syntax unified
 3842 004a 3B63     		str	r3, [r7, #48]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3843              		.loc 2 1073 10
 3844 004c 3B6B     		ldr	r3, [r7, #48]
 3845              	.LBE421:
 3846              	.LBE420:
 3847              		.loc 1 2003 3 discriminator 1
 3848 004e 23F00103 		bic	r3, r3, #1
 3849 0052 3B66     		str	r3, [r7, #96]
 3850 0054 7B68     		ldr	r3, [r7, #4]
 3851 0056 1B68     		ldr	r3, [r3]
 3852 0058 1433     		adds	r3, r3, #20
 3853 005a 3A6E     		ldr	r2, [r7, #96]
 3854 005c 3A64     		str	r2, [r7, #64]
 3855 005e FB63     		str	r3, [r7, #60]
 3856              	.LBB422:
 3857              	.LBB423:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3858              		.loc 2 1123 4
 3859 0060 F96B     		ldr	r1, [r7, #60]
 3860 0062 3A6C     		ldr	r2, [r7, #64]
ARM GAS  /tmp//ccY11c6d.s 			page 124


 3861              		.syntax unified
 3862              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3863 0064 41E80023 		strex r3, r2, [r1]
 3864              	@ 0 "" 2
 3865              		.thumb
 3866              		.syntax unified
 3867 0068 BB63     		str	r3, [r7, #56]
 3868              		.loc 2 1124 10
 3869 006a BB6B     		ldr	r3, [r7, #56]
 3870              	.LBE423:
 3871              	.LBE422:
 3872              		.loc 1 2003 3 discriminator 1
 3873 006c 002B     		cmp	r3, #0
 3874 006e E5D1     		bne	.L195
 3875              	.LBE419:
2004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 3876              		.loc 1 2006 12
 3877 0070 7B68     		ldr	r3, [r7, #4]
 3878 0072 1B6B     		ldr	r3, [r3, #48]
 3879              		.loc 1 2006 6
 3880 0074 012B     		cmp	r3, #1
 3881 0076 19D1     		bne	.L196
 3882              	.L199:
 3883              	.LBB424:
2007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 3884              		.loc 1 2008 5 discriminator 1
 3885 0078 7B68     		ldr	r3, [r7, #4]
 3886 007a 1B68     		ldr	r3, [r3]
 3887 007c 0C33     		adds	r3, r3, #12
 3888 007e 3B62     		str	r3, [r7, #32]
 3889              	.LBB425:
 3890              	.LBB426:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3891              		.loc 2 1072 4
 3892 0080 3B6A     		ldr	r3, [r7, #32]
 3893              		.syntax unified
 3894              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3895 0082 53E8003F 		ldrex r3, [r3]
 3896              	@ 0 "" 2
 3897              		.thumb
 3898              		.syntax unified
 3899 0086 FB61     		str	r3, [r7, #28]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3900              		.loc 2 1073 10
 3901 0088 FB69     		ldr	r3, [r7, #28]
 3902              	.LBE426:
 3903              	.LBE425:
 3904              		.loc 1 2008 5 discriminator 1
 3905 008a 23F01003 		bic	r3, r3, #16
 3906 008e FB65     		str	r3, [r7, #92]
 3907 0090 7B68     		ldr	r3, [r7, #4]
 3908 0092 1B68     		ldr	r3, [r3]
 3909 0094 0C33     		adds	r3, r3, #12
 3910 0096 FA6D     		ldr	r2, [r7, #92]
ARM GAS  /tmp//ccY11c6d.s 			page 125


 3911 0098 FA62     		str	r2, [r7, #44]
 3912 009a BB62     		str	r3, [r7, #40]
 3913              	.LBB427:
 3914              	.LBB428:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3915              		.loc 2 1123 4
 3916 009c B96A     		ldr	r1, [r7, #40]
 3917 009e FA6A     		ldr	r2, [r7, #44]
 3918              		.syntax unified
 3919              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3920 00a0 41E80023 		strex r3, r2, [r1]
 3921              	@ 0 "" 2
 3922              		.thumb
 3923              		.syntax unified
 3924 00a4 7B62     		str	r3, [r7, #36]
 3925              		.loc 2 1124 10
 3926 00a6 7B6A     		ldr	r3, [r7, #36]
 3927              	.LBE428:
 3928              	.LBE427:
 3929              		.loc 1 2008 5 discriminator 1
 3930 00a8 002B     		cmp	r3, #0
 3931 00aa E5D1     		bne	.L199
 3932              	.L196:
 3933              	.LBE424:
2009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3934              		.loc 1 2012 7
 3935 00ac 7B68     		ldr	r3, [r7, #4]
 3936 00ae 1B68     		ldr	r3, [r3]
 3937 00b0 5B69     		ldr	r3, [r3, #20]
 3938 00b2 03F04003 		and	r3, r3, #64
 3939              		.loc 1 2012 6
 3940 00b6 002B     		cmp	r3, #0
 3941 00b8 36D0     		beq	.L200
 3942              	.L203:
 3943              	.LBB429:
2013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3944              		.loc 1 2014 5 discriminator 1
 3945 00ba 7B68     		ldr	r3, [r7, #4]
 3946 00bc 1B68     		ldr	r3, [r3]
 3947 00be 1433     		adds	r3, r3, #20
 3948 00c0 FB60     		str	r3, [r7, #12]
 3949              	.LBB430:
 3950              	.LBB431:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3951              		.loc 2 1072 4
 3952 00c2 FB68     		ldr	r3, [r7, #12]
 3953              		.syntax unified
 3954              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3955 00c4 53E8003F 		ldrex r3, [r3]
 3956              	@ 0 "" 2
 3957              		.thumb
 3958              		.syntax unified
 3959 00c8 BB60     		str	r3, [r7, #8]
ARM GAS  /tmp//ccY11c6d.s 			page 126


1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3960              		.loc 2 1073 10
 3961 00ca BB68     		ldr	r3, [r7, #8]
 3962              	.LBE431:
 3963              	.LBE430:
 3964              		.loc 1 2014 5 discriminator 1
 3965 00cc 23F04003 		bic	r3, r3, #64
 3966 00d0 BB65     		str	r3, [r7, #88]
 3967 00d2 7B68     		ldr	r3, [r7, #4]
 3968 00d4 1B68     		ldr	r3, [r3]
 3969 00d6 1433     		adds	r3, r3, #20
 3970 00d8 BA6D     		ldr	r2, [r7, #88]
 3971 00da BA61     		str	r2, [r7, #24]
 3972 00dc 7B61     		str	r3, [r7, #20]
 3973              	.LBB432:
 3974              	.LBB433:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3975              		.loc 2 1123 4
 3976 00de 7969     		ldr	r1, [r7, #20]
 3977 00e0 BA69     		ldr	r2, [r7, #24]
 3978              		.syntax unified
 3979              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3980 00e2 41E80023 		strex r3, r2, [r1]
 3981              	@ 0 "" 2
 3982              		.thumb
 3983              		.syntax unified
 3984 00e6 3B61     		str	r3, [r7, #16]
 3985              		.loc 2 1124 10
 3986 00e8 3B69     		ldr	r3, [r7, #16]
 3987              	.LBE433:
 3988              	.LBE432:
 3989              		.loc 1 2014 5 discriminator 1
 3990 00ea 002B     		cmp	r3, #0
 3991 00ec E5D1     		bne	.L203
 3992              	.LBE429:
2015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
2017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 3993              		.loc 1 2017 14
 3994 00ee 7B68     		ldr	r3, [r7, #4]
 3995 00f0 DB6B     		ldr	r3, [r3, #60]
 3996              		.loc 1 2017 8
 3997 00f2 002B     		cmp	r3, #0
 3998 00f4 18D0     		beq	.L200
2018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
2020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
2021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 3999              		.loc 1 2021 12
 4000 00f6 7B68     		ldr	r3, [r7, #4]
 4001 00f8 DB6B     		ldr	r3, [r3, #60]
 4002              		.loc 1 2021 40
 4003 00fa 0022     		movs	r2, #0
 4004 00fc 5A63     		str	r2, [r3, #52]
2022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 4005              		.loc 1 2023 11
ARM GAS  /tmp//ccY11c6d.s 			page 127


 4006 00fe 7B68     		ldr	r3, [r7, #4]
 4007 0100 DB6B     		ldr	r3, [r3, #60]
 4008 0102 1846     		mov	r0, r3
 4009 0104 FFF7FEFF 		bl	HAL_DMA_Abort
 4010 0108 0346     		mov	r3, r0
 4011              		.loc 1 2023 10 discriminator 1
 4012 010a 002B     		cmp	r3, #0
 4013 010c 0CD0     		beq	.L200
2024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 4014              		.loc 1 2025 13
 4015 010e 7B68     		ldr	r3, [r7, #4]
 4016 0110 DB6B     		ldr	r3, [r3, #60]
 4017 0112 1846     		mov	r0, r3
 4018 0114 FFF7FEFF 		bl	HAL_DMA_GetError
 4019 0118 0346     		mov	r3, r0
 4020              		.loc 1 2025 12 discriminator 1
 4021 011a 202B     		cmp	r3, #32
 4022 011c 04D1     		bne	.L200
2026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
2028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 4023              		.loc 1 2028 28
 4024 011e 7B68     		ldr	r3, [r7, #4]
 4025 0120 1022     		movs	r2, #16
 4026 0122 5A64     		str	r2, [r3, #68]
2029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 4027              		.loc 1 2030 18
 4028 0124 0323     		movs	r3, #3
 4029 0126 0AE0     		b	.L204
 4030              	.L200:
2031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Rx transfer counter */
2037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 4031              		.loc 1 2037 22
 4032 0128 7B68     		ldr	r3, [r7, #4]
 4033 012a 0022     		movs	r2, #0
 4034 012c DA85     		strh	r2, [r3, #46]	@ movhi
2038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
2040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 4035              		.loc 1 2040 18
 4036 012e 7B68     		ldr	r3, [r7, #4]
 4037 0130 2022     		movs	r2, #32
 4038 0132 83F84220 		strb	r2, [r3, #66]
2041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 4039              		.loc 1 2041 24
 4040 0136 7B68     		ldr	r3, [r7, #4]
 4041 0138 0022     		movs	r2, #0
 4042 013a 1A63     		str	r2, [r3, #48]
2042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
ARM GAS  /tmp//ccY11c6d.s 			page 128


 4043              		.loc 1 2043 10
 4044 013c 0023     		movs	r3, #0
 4045              	.L204:
2044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4046              		.loc 1 2044 1
 4047 013e 1846     		mov	r0, r3
 4048 0140 6837     		adds	r7, r7, #104
 4049              	.LCFI119:
 4050              		.cfi_def_cfa_offset 8
 4051 0142 BD46     		mov	sp, r7
 4052              	.LCFI120:
 4053              		.cfi_def_cfa_register 13
 4054              		@ sp needed
 4055 0144 80BD     		pop	{r7, pc}
 4056              		.cfi_endproc
 4057              	.LFE87:
 4059              		.section	.text.HAL_UART_Abort_IT,"ax",%progbits
 4060              		.align	1
 4061              		.global	HAL_UART_Abort_IT
 4062              		.syntax unified
 4063              		.thumb
 4064              		.thumb_func
 4066              	HAL_UART_Abort_IT:
 4067              	.LFB88:
2045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
2048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
2050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
2051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
2052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
2055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
2061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4068              		.loc 1 2061 1
 4069              		.cfi_startproc
 4070              		@ args = 0, pretend = 0, frame = 136
 4071              		@ frame_needed = 1, uses_anonymous_args = 0
 4072 0000 80B5     		push	{r7, lr}
 4073              	.LCFI121:
 4074              		.cfi_def_cfa_offset 8
 4075              		.cfi_offset 7, -8
 4076              		.cfi_offset 14, -4
 4077 0002 A2B0     		sub	sp, sp, #136
 4078              	.LCFI122:
 4079              		.cfi_def_cfa_offset 144
 4080 0004 00AF     		add	r7, sp, #0
 4081              	.LCFI123:
 4082              		.cfi_def_cfa_register 7
 4083 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp//ccY11c6d.s 			page 129


2062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t AbortCplt = 0x01U;
 4084              		.loc 1 2062 12
 4085 0008 0123     		movs	r3, #1
 4086 000a C7F88430 		str	r3, [r7, #132]
 4087              	.L208:
 4088              	.LBB434:
2063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USA
 4089              		.loc 1 2065 3 discriminator 1
 4090 000e 7B68     		ldr	r3, [r7, #4]
 4091 0010 1B68     		ldr	r3, [r3]
 4092 0012 0C33     		adds	r3, r3, #12
 4093 0014 3B66     		str	r3, [r7, #96]
 4094              	.LBB435:
 4095              	.LBB436:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4096              		.loc 2 1072 4
 4097 0016 3B6E     		ldr	r3, [r7, #96]
 4098              		.syntax unified
 4099              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4100 0018 53E8003F 		ldrex r3, [r3]
 4101              	@ 0 "" 2
 4102              		.thumb
 4103              		.syntax unified
 4104 001c FB65     		str	r3, [r7, #92]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4105              		.loc 2 1073 10
 4106 001e FB6D     		ldr	r3, [r7, #92]
 4107              	.LBE436:
 4108              	.LBE435:
 4109              		.loc 1 2065 3 discriminator 1
 4110 0020 23F4F073 		bic	r3, r3, #480
 4111 0024 C7F88030 		str	r3, [r7, #128]
 4112 0028 7B68     		ldr	r3, [r7, #4]
 4113 002a 1B68     		ldr	r3, [r3]
 4114 002c 0C33     		adds	r3, r3, #12
 4115 002e D7F88020 		ldr	r2, [r7, #128]
 4116 0032 FA66     		str	r2, [r7, #108]
 4117 0034 BB66     		str	r3, [r7, #104]
 4118              	.LBB437:
 4119              	.LBB438:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4120              		.loc 2 1123 4
 4121 0036 B96E     		ldr	r1, [r7, #104]
 4122 0038 FA6E     		ldr	r2, [r7, #108]
 4123              		.syntax unified
 4124              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4125 003a 41E80023 		strex r3, r2, [r1]
 4126              	@ 0 "" 2
 4127              		.thumb
 4128              		.syntax unified
 4129 003e 7B66     		str	r3, [r7, #100]
 4130              		.loc 2 1124 10
 4131 0040 7B6E     		ldr	r3, [r7, #100]
 4132              	.LBE438:
 4133              	.LBE437:
ARM GAS  /tmp//ccY11c6d.s 			page 130


 4134              		.loc 1 2065 3 discriminator 1
 4135 0042 002B     		cmp	r3, #0
 4136 0044 E3D1     		bne	.L208
 4137              	.L211:
 4138              	.LBE434:
 4139              	.LBB439:
2066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4140              		.loc 1 2066 3 discriminator 1
 4141 0046 7B68     		ldr	r3, [r7, #4]
 4142 0048 1B68     		ldr	r3, [r3]
 4143 004a 1433     		adds	r3, r3, #20
 4144 004c FB64     		str	r3, [r7, #76]
 4145              	.LBB440:
 4146              	.LBB441:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4147              		.loc 2 1072 4
 4148 004e FB6C     		ldr	r3, [r7, #76]
 4149              		.syntax unified
 4150              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4151 0050 53E8003F 		ldrex r3, [r3]
 4152              	@ 0 "" 2
 4153              		.thumb
 4154              		.syntax unified
 4155 0054 BB64     		str	r3, [r7, #72]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4156              		.loc 2 1073 10
 4157 0056 BB6C     		ldr	r3, [r7, #72]
 4158              	.LBE441:
 4159              	.LBE440:
 4160              		.loc 1 2066 3 discriminator 1
 4161 0058 23F00103 		bic	r3, r3, #1
 4162 005c FB67     		str	r3, [r7, #124]
 4163 005e 7B68     		ldr	r3, [r7, #4]
 4164 0060 1B68     		ldr	r3, [r3]
 4165 0062 1433     		adds	r3, r3, #20
 4166 0064 FA6F     		ldr	r2, [r7, #124]
 4167 0066 BA65     		str	r2, [r7, #88]
 4168 0068 7B65     		str	r3, [r7, #84]
 4169              	.LBB442:
 4170              	.LBB443:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4171              		.loc 2 1123 4
 4172 006a 796D     		ldr	r1, [r7, #84]
 4173 006c BA6D     		ldr	r2, [r7, #88]
 4174              		.syntax unified
 4175              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4176 006e 41E80023 		strex r3, r2, [r1]
 4177              	@ 0 "" 2
 4178              		.thumb
 4179              		.syntax unified
 4180 0072 3B65     		str	r3, [r7, #80]
 4181              		.loc 2 1124 10
 4182 0074 3B6D     		ldr	r3, [r7, #80]
 4183              	.LBE443:
 4184              	.LBE442:
 4185              		.loc 1 2066 3 discriminator 1
 4186 0076 002B     		cmp	r3, #0
ARM GAS  /tmp//ccY11c6d.s 			page 131


 4187 0078 E5D1     		bne	.L211
 4188              	.LBE439:
2067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 4189              		.loc 1 2069 12
 4190 007a 7B68     		ldr	r3, [r7, #4]
 4191 007c 1B6B     		ldr	r3, [r3, #48]
 4192              		.loc 1 2069 6
 4193 007e 012B     		cmp	r3, #1
 4194 0080 19D1     		bne	.L212
 4195              	.L215:
 4196              	.LBB444:
2070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 4197              		.loc 1 2071 5 discriminator 1
 4198 0082 7B68     		ldr	r3, [r7, #4]
 4199 0084 1B68     		ldr	r3, [r3]
 4200 0086 0C33     		adds	r3, r3, #12
 4201 0088 BB63     		str	r3, [r7, #56]
 4202              	.LBB445:
 4203              	.LBB446:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4204              		.loc 2 1072 4
 4205 008a BB6B     		ldr	r3, [r7, #56]
 4206              		.syntax unified
 4207              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4208 008c 53E8003F 		ldrex r3, [r3]
 4209              	@ 0 "" 2
 4210              		.thumb
 4211              		.syntax unified
 4212 0090 7B63     		str	r3, [r7, #52]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4213              		.loc 2 1073 10
 4214 0092 7B6B     		ldr	r3, [r7, #52]
 4215              	.LBE446:
 4216              	.LBE445:
 4217              		.loc 1 2071 5 discriminator 1
 4218 0094 23F01003 		bic	r3, r3, #16
 4219 0098 BB67     		str	r3, [r7, #120]
 4220 009a 7B68     		ldr	r3, [r7, #4]
 4221 009c 1B68     		ldr	r3, [r3]
 4222 009e 0C33     		adds	r3, r3, #12
 4223 00a0 BA6F     		ldr	r2, [r7, #120]
 4224 00a2 7A64     		str	r2, [r7, #68]
 4225 00a4 3B64     		str	r3, [r7, #64]
 4226              	.LBB447:
 4227              	.LBB448:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4228              		.loc 2 1123 4
 4229 00a6 396C     		ldr	r1, [r7, #64]
 4230 00a8 7A6C     		ldr	r2, [r7, #68]
 4231              		.syntax unified
 4232              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4233 00aa 41E80023 		strex r3, r2, [r1]
 4234              	@ 0 "" 2
 4235              		.thumb
ARM GAS  /tmp//ccY11c6d.s 			page 132


 4236              		.syntax unified
 4237 00ae FB63     		str	r3, [r7, #60]
 4238              		.loc 2 1124 10
 4239 00b0 FB6B     		ldr	r3, [r7, #60]
 4240              	.LBE448:
 4241              	.LBE447:
 4242              		.loc 1 2071 5 discriminator 1
 4243 00b2 002B     		cmp	r3, #0
 4244 00b4 E5D1     		bne	.L215
 4245              	.L212:
 4246              	.LBE444:
2072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
2075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      before any call to DMA Abort functions */
2076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Tx Handle is valid */
2077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmatx != NULL)
 4247              		.loc 1 2077 12
 4248 00b6 7B68     		ldr	r3, [r7, #4]
 4249 00b8 9B6B     		ldr	r3, [r3, #56]
 4250              		.loc 1 2077 6
 4251 00ba 002B     		cmp	r3, #0
 4252 00bc 0FD0     		beq	.L216
2078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Otherwise, set it to NULL */
2081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 4253              		.loc 1 2081 9
 4254 00be 7B68     		ldr	r3, [r7, #4]
 4255 00c0 1B68     		ldr	r3, [r3]
 4256 00c2 5B69     		ldr	r3, [r3, #20]
 4257 00c4 03F08003 		and	r3, r3, #128
 4258              		.loc 1 2081 8
 4259 00c8 002B     		cmp	r3, #0
 4260 00ca 04D0     		beq	.L217
2082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 4261              		.loc 1 2083 12
 4262 00cc 7B68     		ldr	r3, [r7, #4]
 4263 00ce 9B6B     		ldr	r3, [r3, #56]
 4264              		.loc 1 2083 40
 4265 00d0 534A     		ldr	r2, .L232
 4266 00d2 5A63     		str	r2, [r3, #52]
 4267 00d4 03E0     		b	.L216
 4268              	.L217:
2084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 4269              		.loc 1 2087 12
 4270 00d6 7B68     		ldr	r3, [r7, #4]
 4271 00d8 9B6B     		ldr	r3, [r3, #56]
 4272              		.loc 1 2087 40
 4273 00da 0022     		movs	r2, #0
 4274 00dc 5A63     		str	r2, [r3, #52]
 4275              	.L216:
2088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
ARM GAS  /tmp//ccY11c6d.s 			page 133


2089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Rx Handle is valid */
2091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmarx != NULL)
 4276              		.loc 1 2091 12
 4277 00de 7B68     		ldr	r3, [r7, #4]
 4278 00e0 DB6B     		ldr	r3, [r3, #60]
 4279              		.loc 1 2091 6
 4280 00e2 002B     		cmp	r3, #0
 4281 00e4 0FD0     		beq	.L218
2092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
2094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Otherwise, set it to NULL */
2095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 4282              		.loc 1 2095 9
 4283 00e6 7B68     		ldr	r3, [r7, #4]
 4284 00e8 1B68     		ldr	r3, [r3]
 4285 00ea 5B69     		ldr	r3, [r3, #20]
 4286 00ec 03F04003 		and	r3, r3, #64
 4287              		.loc 1 2095 8
 4288 00f0 002B     		cmp	r3, #0
 4289 00f2 04D0     		beq	.L219
2096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 4290              		.loc 1 2097 12
 4291 00f4 7B68     		ldr	r3, [r7, #4]
 4292 00f6 DB6B     		ldr	r3, [r3, #60]
 4293              		.loc 1 2097 40
 4294 00f8 4A4A     		ldr	r2, .L232+4
 4295 00fa 5A63     		str	r2, [r3, #52]
 4296 00fc 03E0     		b	.L218
 4297              	.L219:
2098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 4298              		.loc 1 2101 12
 4299 00fe 7B68     		ldr	r3, [r7, #4]
 4300 0100 DB6B     		ldr	r3, [r3, #60]
 4301              		.loc 1 2101 40
 4302 0102 0022     		movs	r2, #0
 4303 0104 5A63     		str	r2, [r3, #52]
 4304              	.L218:
2102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
2106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 4305              		.loc 1 2106 7
 4306 0106 7B68     		ldr	r3, [r7, #4]
 4307 0108 1B68     		ldr	r3, [r3]
 4308 010a 5B69     		ldr	r3, [r3, #20]
 4309 010c 03F08003 		and	r3, r3, #128
 4310              		.loc 1 2106 6
 4311 0110 002B     		cmp	r3, #0
 4312 0112 2DD0     		beq	.L220
 4313              	.L223:
 4314              	.LBB449:
ARM GAS  /tmp//ccY11c6d.s 			page 134


2107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
2109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 4315              		.loc 1 2109 5 discriminator 1
 4316 0114 7B68     		ldr	r3, [r7, #4]
 4317 0116 1B68     		ldr	r3, [r3]
 4318 0118 1433     		adds	r3, r3, #20
 4319 011a 7B62     		str	r3, [r7, #36]
 4320              	.LBB450:
 4321              	.LBB451:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4322              		.loc 2 1072 4
 4323 011c 7B6A     		ldr	r3, [r7, #36]
 4324              		.syntax unified
 4325              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4326 011e 53E8003F 		ldrex r3, [r3]
 4327              	@ 0 "" 2
 4328              		.thumb
 4329              		.syntax unified
 4330 0122 3B62     		str	r3, [r7, #32]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4331              		.loc 2 1073 10
 4332 0124 3B6A     		ldr	r3, [r7, #32]
 4333              	.LBE451:
 4334              	.LBE450:
 4335              		.loc 1 2109 5 discriminator 1
 4336 0126 23F08003 		bic	r3, r3, #128
 4337 012a 7B67     		str	r3, [r7, #116]
 4338 012c 7B68     		ldr	r3, [r7, #4]
 4339 012e 1B68     		ldr	r3, [r3]
 4340 0130 1433     		adds	r3, r3, #20
 4341 0132 7A6F     		ldr	r2, [r7, #116]
 4342 0134 3A63     		str	r2, [r7, #48]
 4343 0136 FB62     		str	r3, [r7, #44]
 4344              	.LBB452:
 4345              	.LBB453:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4346              		.loc 2 1123 4
 4347 0138 F96A     		ldr	r1, [r7, #44]
 4348 013a 3A6B     		ldr	r2, [r7, #48]
 4349              		.syntax unified
 4350              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4351 013c 41E80023 		strex r3, r2, [r1]
 4352              	@ 0 "" 2
 4353              		.thumb
 4354              		.syntax unified
 4355 0140 BB62     		str	r3, [r7, #40]
 4356              		.loc 2 1124 10
 4357 0142 BB6A     		ldr	r3, [r7, #40]
 4358              	.LBE453:
 4359              	.LBE452:
 4360              		.loc 1 2109 5 discriminator 1
 4361 0144 002B     		cmp	r3, #0
 4362 0146 E5D1     		bne	.L223
 4363              	.LBE449:
2110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
ARM GAS  /tmp//ccY11c6d.s 			page 135


2112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 4364              		.loc 1 2112 14
 4365 0148 7B68     		ldr	r3, [r7, #4]
 4366 014a 9B6B     		ldr	r3, [r3, #56]
 4367              		.loc 1 2112 8
 4368 014c 002B     		cmp	r3, #0
 4369 014e 0FD0     		beq	.L220
2113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised :
2115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA TX */
2118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 4370              		.loc 1 2118 11
 4371 0150 7B68     		ldr	r3, [r7, #4]
 4372 0152 9B6B     		ldr	r3, [r3, #56]
 4373 0154 1846     		mov	r0, r3
 4374 0156 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 4375 015a 0346     		mov	r3, r0
 4376              		.loc 1 2118 10 discriminator 1
 4377 015c 002B     		cmp	r3, #0
 4378 015e 04D0     		beq	.L224
2119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
 4379              		.loc 1 2120 14
 4380 0160 7B68     		ldr	r3, [r7, #4]
 4381 0162 9B6B     		ldr	r3, [r3, #56]
 4382              		.loc 1 2120 42
 4383 0164 0022     		movs	r2, #0
 4384 0166 5A63     		str	r2, [r3, #52]
 4385 0168 02E0     		b	.L220
 4386              	.L224:
2121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x00U;
 4387              		.loc 1 2124 19
 4388 016a 0023     		movs	r3, #0
 4389 016c C7F88430 		str	r3, [r7, #132]
 4390              	.L220:
2125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 4391              		.loc 1 2130 7
 4392 0170 7B68     		ldr	r3, [r7, #4]
 4393 0172 1B68     		ldr	r3, [r3]
 4394 0174 5B69     		ldr	r3, [r3, #20]
 4395 0176 03F04003 		and	r3, r3, #64
 4396              		.loc 1 2130 6
 4397 017a 002B     		cmp	r3, #0
 4398 017c 30D0     		beq	.L225
 4399              	.L228:
 4400              	.LBB454:
2131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
ARM GAS  /tmp//ccY11c6d.s 			page 136


2132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 4401              		.loc 1 2132 5 discriminator 1
 4402 017e 7B68     		ldr	r3, [r7, #4]
 4403 0180 1B68     		ldr	r3, [r3]
 4404 0182 1433     		adds	r3, r3, #20
 4405 0184 3B61     		str	r3, [r7, #16]
 4406              	.LBB455:
 4407              	.LBB456:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4408              		.loc 2 1072 4
 4409 0186 3B69     		ldr	r3, [r7, #16]
 4410              		.syntax unified
 4411              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4412 0188 53E8003F 		ldrex r3, [r3]
 4413              	@ 0 "" 2
 4414              		.thumb
 4415              		.syntax unified
 4416 018c FB60     		str	r3, [r7, #12]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4417              		.loc 2 1073 10
 4418 018e FB68     		ldr	r3, [r7, #12]
 4419              	.LBE456:
 4420              	.LBE455:
 4421              		.loc 1 2132 5 discriminator 1
 4422 0190 23F04003 		bic	r3, r3, #64
 4423 0194 3B67     		str	r3, [r7, #112]
 4424 0196 7B68     		ldr	r3, [r7, #4]
 4425 0198 1B68     		ldr	r3, [r3]
 4426 019a 1433     		adds	r3, r3, #20
 4427 019c 3A6F     		ldr	r2, [r7, #112]
 4428 019e FA61     		str	r2, [r7, #28]
 4429 01a0 BB61     		str	r3, [r7, #24]
 4430              	.LBB457:
 4431              	.LBB458:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4432              		.loc 2 1123 4
 4433 01a2 B969     		ldr	r1, [r7, #24]
 4434 01a4 FA69     		ldr	r2, [r7, #28]
 4435              		.syntax unified
 4436              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4437 01a6 41E80023 		strex r3, r2, [r1]
 4438              	@ 0 "" 2
 4439              		.thumb
 4440              		.syntax unified
 4441 01aa 7B61     		str	r3, [r7, #20]
 4442              		.loc 2 1124 10
 4443 01ac 7B69     		ldr	r3, [r7, #20]
 4444              	.LBE458:
 4445              	.LBE457:
 4446              		.loc 1 2132 5 discriminator 1
 4447 01ae 002B     		cmp	r3, #0
 4448 01b0 E5D1     		bne	.L228
 4449              	.LBE454:
2133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
2135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 4450              		.loc 1 2135 14
ARM GAS  /tmp//ccY11c6d.s 			page 137


 4451 01b2 7B68     		ldr	r3, [r7, #4]
 4452 01b4 DB6B     		ldr	r3, [r3, #60]
 4453              		.loc 1 2135 8
 4454 01b6 002B     		cmp	r3, #0
 4455 01b8 12D0     		beq	.L225
2136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised :
2138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA RX */
2141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 4456              		.loc 1 2141 11
 4457 01ba 7B68     		ldr	r3, [r7, #4]
 4458 01bc DB6B     		ldr	r3, [r3, #60]
 4459 01be 1846     		mov	r0, r3
 4460 01c0 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 4461 01c4 0346     		mov	r3, r0
 4462              		.loc 1 2141 10 discriminator 1
 4463 01c6 002B     		cmp	r3, #0
 4464 01c8 07D0     		beq	.L229
2142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
 4465              		.loc 1 2143 14
 4466 01ca 7B68     		ldr	r3, [r7, #4]
 4467 01cc DB6B     		ldr	r3, [r3, #60]
 4468              		.loc 1 2143 42
 4469 01ce 0022     		movs	r2, #0
 4470 01d0 5A63     		str	r2, [r3, #52]
2144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x01U;
 4471              		.loc 1 2144 19
 4472 01d2 0123     		movs	r3, #1
 4473 01d4 C7F88430 		str	r3, [r7, #132]
 4474 01d8 02E0     		b	.L225
 4475              	.L229:
2145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x00U;
 4476              		.loc 1 2148 19
 4477 01da 0023     		movs	r3, #0
 4478 01dc C7F88430 		str	r3, [r7, #132]
 4479              	.L225:
2149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
2154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (AbortCplt == 0x01U)
 4480              		.loc 1 2154 6
 4481 01e0 D7F88430 		ldr	r3, [r7, #132]
 4482 01e4 012B     		cmp	r3, #1
 4483 01e6 16D1     		bne	.L230
2155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
2157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 4484              		.loc 1 2157 24
 4485 01e8 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp//ccY11c6d.s 			page 138


 4486 01ea 0022     		movs	r2, #0
 4487 01ec DA84     		strh	r2, [r3, #38]	@ movhi
2158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 4488              		.loc 1 2158 24
 4489 01ee 7B68     		ldr	r3, [r7, #4]
 4490 01f0 0022     		movs	r2, #0
 4491 01f2 DA85     		strh	r2, [r3, #46]	@ movhi
2159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset ErrorCode */
2161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 4492              		.loc 1 2161 22
 4493 01f4 7B68     		ldr	r3, [r7, #4]
 4494 01f6 0022     		movs	r2, #0
 4495 01f8 5A64     		str	r2, [r3, #68]
2162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
2164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
 4496              		.loc 1 2164 20
 4497 01fa 7B68     		ldr	r3, [r7, #4]
 4498 01fc 2022     		movs	r2, #32
 4499 01fe 83F84120 		strb	r2, [r3, #65]
2165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 4500              		.loc 1 2165 20
 4501 0202 7B68     		ldr	r3, [r7, #4]
 4502 0204 2022     		movs	r2, #32
 4503 0206 83F84220 		strb	r2, [r3, #66]
2166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 4504              		.loc 1 2166 26
 4505 020a 7B68     		ldr	r3, [r7, #4]
 4506 020c 0022     		movs	r2, #0
 4507 020e 1A63     		str	r2, [r3, #48]
2167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call registered Abort complete callback */
2171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->AbortCpltCallback(huart);
2172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort complete callback */
2174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
 4508              		.loc 1 2174 5
 4509 0210 7868     		ldr	r0, [r7, #4]
 4510 0212 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 4511              	.L230:
2175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4512              		.loc 1 2178 10
 4513 0216 0023     		movs	r3, #0
2179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4514              		.loc 1 2179 1
 4515 0218 1846     		mov	r0, r3
 4516 021a 8837     		adds	r7, r7, #136
 4517              	.LCFI124:
 4518              		.cfi_def_cfa_offset 8
 4519 021c BD46     		mov	sp, r7
 4520              	.LCFI125:
ARM GAS  /tmp//ccY11c6d.s 			page 139


 4521              		.cfi_def_cfa_register 13
 4522              		@ sp needed
 4523 021e 80BD     		pop	{r7, pc}
 4524              	.L233:
 4525              		.align	2
 4526              	.L232:
 4527 0220 00000000 		.word	UART_DMATxAbortCallback
 4528 0224 00000000 		.word	UART_DMARxAbortCallback
 4529              		.cfi_endproc
 4530              	.LFE88:
 4532              		.section	.text.HAL_UART_AbortTransmit_IT,"ax",%progbits
 4533              		.align	1
 4534              		.global	HAL_UART_AbortTransmit_IT
 4535              		.syntax unified
 4536              		.thumb
 4537              		.thumb_func
 4539              	HAL_UART_AbortTransmit_IT:
 4540              	.LFB89:
2180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
2183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
2185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
2186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
2187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
2190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
2196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4541              		.loc 1 2196 1
 4542              		.cfi_startproc
 4543              		@ args = 0, pretend = 0, frame = 56
 4544              		@ frame_needed = 1, uses_anonymous_args = 0
 4545 0000 80B5     		push	{r7, lr}
 4546              	.LCFI126:
 4547              		.cfi_def_cfa_offset 8
 4548              		.cfi_offset 7, -8
 4549              		.cfi_offset 14, -4
 4550 0002 8EB0     		sub	sp, sp, #56
 4551              	.LCFI127:
 4552              		.cfi_def_cfa_offset 64
 4553 0004 00AF     		add	r7, sp, #0
 4554              	.LCFI128:
 4555              		.cfi_def_cfa_register 7
 4556 0006 7860     		str	r0, [r7, #4]
 4557              	.L237:
 4558              	.LBB459:
2197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
2198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 4559              		.loc 1 2198 3 discriminator 1
 4560 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp//ccY11c6d.s 			page 140


 4561 000a 1B68     		ldr	r3, [r3]
 4562 000c 0C33     		adds	r3, r3, #12
 4563 000e 3B62     		str	r3, [r7, #32]
 4564              	.LBB460:
 4565              	.LBB461:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4566              		.loc 2 1072 4
 4567 0010 3B6A     		ldr	r3, [r7, #32]
 4568              		.syntax unified
 4569              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4570 0012 53E8003F 		ldrex r3, [r3]
 4571              	@ 0 "" 2
 4572              		.thumb
 4573              		.syntax unified
 4574 0016 FB61     		str	r3, [r7, #28]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4575              		.loc 2 1073 10
 4576 0018 FB69     		ldr	r3, [r7, #28]
 4577              	.LBE461:
 4578              	.LBE460:
 4579              		.loc 1 2198 3 discriminator 1
 4580 001a 23F0C003 		bic	r3, r3, #192
 4581 001e 7B63     		str	r3, [r7, #52]
 4582 0020 7B68     		ldr	r3, [r7, #4]
 4583 0022 1B68     		ldr	r3, [r3]
 4584 0024 0C33     		adds	r3, r3, #12
 4585 0026 7A6B     		ldr	r2, [r7, #52]
 4586 0028 FA62     		str	r2, [r7, #44]
 4587 002a BB62     		str	r3, [r7, #40]
 4588              	.LBB462:
 4589              	.LBB463:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4590              		.loc 2 1123 4
 4591 002c B96A     		ldr	r1, [r7, #40]
 4592 002e FA6A     		ldr	r2, [r7, #44]
 4593              		.syntax unified
 4594              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4595 0030 41E80023 		strex r3, r2, [r1]
 4596              	@ 0 "" 2
 4597              		.thumb
 4598              		.syntax unified
 4599 0034 7B62     		str	r3, [r7, #36]
 4600              		.loc 2 1124 10
 4601 0036 7B6A     		ldr	r3, [r7, #36]
 4602              	.LBE463:
 4603              	.LBE462:
 4604              		.loc 1 2198 3 discriminator 1
 4605 0038 002B     		cmp	r3, #0
 4606 003a E5D1     		bne	.L237
 4607              	.LBE459:
2199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
2201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 4608              		.loc 1 2201 7
 4609 003c 7B68     		ldr	r3, [r7, #4]
 4610 003e 1B68     		ldr	r3, [r3]
 4611 0040 5B69     		ldr	r3, [r3, #20]
ARM GAS  /tmp//ccY11c6d.s 			page 141


 4612 0042 03F08003 		and	r3, r3, #128
 4613              		.loc 1 2201 6
 4614 0046 002B     		cmp	r3, #0
 4615 0048 3CD0     		beq	.L238
 4616              	.L241:
 4617              	.LBB464:
2202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 4618              		.loc 1 2203 5 discriminator 1
 4619 004a 7B68     		ldr	r3, [r7, #4]
 4620 004c 1B68     		ldr	r3, [r3]
 4621 004e 1433     		adds	r3, r3, #20
 4622 0050 FB60     		str	r3, [r7, #12]
 4623              	.LBB465:
 4624              	.LBB466:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4625              		.loc 2 1072 4
 4626 0052 FB68     		ldr	r3, [r7, #12]
 4627              		.syntax unified
 4628              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4629 0054 53E8003F 		ldrex r3, [r3]
 4630              	@ 0 "" 2
 4631              		.thumb
 4632              		.syntax unified
 4633 0058 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4634              		.loc 2 1073 10
 4635 005a BB68     		ldr	r3, [r7, #8]
 4636              	.LBE466:
 4637              	.LBE465:
 4638              		.loc 1 2203 5 discriminator 1
 4639 005c 23F08003 		bic	r3, r3, #128
 4640 0060 3B63     		str	r3, [r7, #48]
 4641 0062 7B68     		ldr	r3, [r7, #4]
 4642 0064 1B68     		ldr	r3, [r3]
 4643 0066 1433     		adds	r3, r3, #20
 4644 0068 3A6B     		ldr	r2, [r7, #48]
 4645 006a BA61     		str	r2, [r7, #24]
 4646 006c 7B61     		str	r3, [r7, #20]
 4647              	.LBB467:
 4648              	.LBB468:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4649              		.loc 2 1123 4
 4650 006e 7969     		ldr	r1, [r7, #20]
 4651 0070 BA69     		ldr	r2, [r7, #24]
 4652              		.syntax unified
 4653              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4654 0072 41E80023 		strex r3, r2, [r1]
 4655              	@ 0 "" 2
 4656              		.thumb
 4657              		.syntax unified
 4658 0076 3B61     		str	r3, [r7, #16]
 4659              		.loc 2 1124 10
 4660 0078 3B69     		ldr	r3, [r7, #16]
 4661              	.LBE468:
 4662              	.LBE467:
 4663              		.loc 1 2203 5 discriminator 1
ARM GAS  /tmp//ccY11c6d.s 			page 142


 4664 007a 002B     		cmp	r3, #0
 4665 007c E5D1     		bne	.L241
 4666              	.LBE464:
2204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
2206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 4667              		.loc 1 2206 14
 4668 007e 7B68     		ldr	r3, [r7, #4]
 4669 0080 9B6B     		ldr	r3, [r3, #56]
 4670              		.loc 1 2206 8
 4671 0082 002B     		cmp	r3, #0
 4672 0084 13D0     		beq	.L242
2207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 4673              		.loc 1 2210 12
 4674 0086 7B68     		ldr	r3, [r7, #4]
 4675 0088 9B6B     		ldr	r3, [r3, #56]
 4676              		.loc 1 2210 40
 4677 008a 164A     		ldr	r2, .L245
 4678 008c 5A63     		str	r2, [r3, #52]
2211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA TX */
2213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 4679              		.loc 1 2213 11
 4680 008e 7B68     		ldr	r3, [r7, #4]
 4681 0090 9B6B     		ldr	r3, [r3, #56]
 4682 0092 1846     		mov	r0, r3
 4683 0094 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 4684 0098 0346     		mov	r3, r0
 4685              		.loc 1 2213 10 discriminator 1
 4686 009a 002B     		cmp	r3, #0
 4687 009c 1CD0     		beq	.L243
2214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
2216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
 4688              		.loc 1 2216 14
 4689 009e 7B68     		ldr	r3, [r7, #4]
 4690 00a0 9B6B     		ldr	r3, [r3, #56]
 4691              		.loc 1 2216 22
 4692 00a2 5B6B     		ldr	r3, [r3, #52]
 4693              		.loc 1 2216 47
 4694 00a4 7A68     		ldr	r2, [r7, #4]
 4695 00a6 926B     		ldr	r2, [r2, #56]
 4696              		.loc 1 2216 9
 4697 00a8 1046     		mov	r0, r2
 4698 00aa 9847     		blx	r3
 4699              	.LVL0:
 4700 00ac 14E0     		b	.L243
 4701              	.L242:
2217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Reset Tx transfer counter */
2222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->TxXferCount = 0x00U;
ARM GAS  /tmp//ccY11c6d.s 			page 143


 4702              		.loc 1 2222 26
 4703 00ae 7B68     		ldr	r3, [r7, #4]
 4704 00b0 0022     		movs	r2, #0
 4705 00b2 DA84     		strh	r2, [r3, #38]	@ movhi
2223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Restore huart->gState to Ready */
2225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
 4706              		.loc 1 2225 21
 4707 00b4 7B68     		ldr	r3, [r7, #4]
 4708 00b6 2022     		movs	r2, #32
 4709 00b8 83F84120 		strb	r2, [r3, #65]
2226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call registered Abort Transmit Complete Callback */
2230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->AbortTransmitCpltCallback(huart);
2231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call legacy weak Abort Transmit Complete Callback */
2233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
 4710              		.loc 1 2233 7
 4711 00bc 7868     		ldr	r0, [r7, #4]
 4712 00be FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 4713 00c2 09E0     		b	.L243
 4714              	.L238:
2234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Tx transfer counter */
2240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 4715              		.loc 1 2240 24
 4716 00c4 7B68     		ldr	r3, [r7, #4]
 4717 00c6 0022     		movs	r2, #0
 4718 00c8 DA84     		strh	r2, [r3, #38]	@ movhi
2241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->gState to Ready */
2243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 4719              		.loc 1 2243 19
 4720 00ca 7B68     		ldr	r3, [r7, #4]
 4721 00cc 2022     		movs	r2, #32
 4722 00ce 83F84120 		strb	r2, [r3, #65]
2244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call registered Abort Transmit Complete Callback */
2248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->AbortTransmitCpltCallback(huart);
2249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort Transmit Complete Callback */
2251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
 4723              		.loc 1 2251 5
 4724 00d2 7868     		ldr	r0, [r7, #4]
 4725 00d4 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 4726              	.L243:
2252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp//ccY11c6d.s 			page 144


2255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4727              		.loc 1 2255 10
 4728 00d8 0023     		movs	r3, #0
2256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4729              		.loc 1 2256 1
 4730 00da 1846     		mov	r0, r3
 4731 00dc 3837     		adds	r7, r7, #56
 4732              	.LCFI129:
 4733              		.cfi_def_cfa_offset 8
 4734 00de BD46     		mov	sp, r7
 4735              	.LCFI130:
 4736              		.cfi_def_cfa_register 13
 4737              		@ sp needed
 4738 00e0 80BD     		pop	{r7, pc}
 4739              	.L246:
 4740 00e2 00BF     		.align	2
 4741              	.L245:
 4742 00e4 00000000 		.word	UART_DMATxOnlyAbortCallback
 4743              		.cfi_endproc
 4744              	.LFE89:
 4746              		.section	.text.HAL_UART_AbortReceive_IT,"ax",%progbits
 4747              		.align	1
 4748              		.global	HAL_UART_AbortReceive_IT
 4749              		.syntax unified
 4750              		.thumb
 4751              		.thumb_func
 4753              	HAL_UART_AbortReceive_IT:
 4754              	.LFB90:
2257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
2260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
2262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
2263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
2264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
2267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
2273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4755              		.loc 1 2273 1
 4756              		.cfi_startproc
 4757              		@ args = 0, pretend = 0, frame = 104
 4758              		@ frame_needed = 1, uses_anonymous_args = 0
 4759 0000 80B5     		push	{r7, lr}
 4760              	.LCFI131:
 4761              		.cfi_def_cfa_offset 8
 4762              		.cfi_offset 7, -8
 4763              		.cfi_offset 14, -4
 4764 0002 9AB0     		sub	sp, sp, #104
 4765              	.LCFI132:
 4766              		.cfi_def_cfa_offset 112
ARM GAS  /tmp//ccY11c6d.s 			page 145


 4767 0004 00AF     		add	r7, sp, #0
 4768              	.LCFI133:
 4769              		.cfi_def_cfa_register 7
 4770 0006 7860     		str	r0, [r7, #4]
 4771              	.L250:
 4772              	.LBB469:
2274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 4773              		.loc 1 2275 3 discriminator 1
 4774 0008 7B68     		ldr	r3, [r7, #4]
 4775 000a 1B68     		ldr	r3, [r3]
 4776 000c 0C33     		adds	r3, r3, #12
 4777 000e BB64     		str	r3, [r7, #72]
 4778              	.LBB470:
 4779              	.LBB471:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4780              		.loc 2 1072 4
 4781 0010 BB6C     		ldr	r3, [r7, #72]
 4782              		.syntax unified
 4783              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4784 0012 53E8003F 		ldrex r3, [r3]
 4785              	@ 0 "" 2
 4786              		.thumb
 4787              		.syntax unified
 4788 0016 7B64     		str	r3, [r7, #68]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4789              		.loc 2 1073 10
 4790 0018 7B6C     		ldr	r3, [r7, #68]
 4791              	.LBE471:
 4792              	.LBE470:
 4793              		.loc 1 2275 3 discriminator 1
 4794 001a 23F49073 		bic	r3, r3, #288
 4795 001e 7B66     		str	r3, [r7, #100]
 4796 0020 7B68     		ldr	r3, [r7, #4]
 4797 0022 1B68     		ldr	r3, [r3]
 4798 0024 0C33     		adds	r3, r3, #12
 4799 0026 7A6E     		ldr	r2, [r7, #100]
 4800 0028 7A65     		str	r2, [r7, #84]
 4801 002a 3B65     		str	r3, [r7, #80]
 4802              	.LBB472:
 4803              	.LBB473:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4804              		.loc 2 1123 4
 4805 002c 396D     		ldr	r1, [r7, #80]
 4806 002e 7A6D     		ldr	r2, [r7, #84]
 4807              		.syntax unified
 4808              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4809 0030 41E80023 		strex r3, r2, [r1]
 4810              	@ 0 "" 2
 4811              		.thumb
 4812              		.syntax unified
 4813 0034 FB64     		str	r3, [r7, #76]
 4814              		.loc 2 1124 10
 4815 0036 FB6C     		ldr	r3, [r7, #76]
 4816              	.LBE473:
 4817              	.LBE472:
 4818              		.loc 1 2275 3 discriminator 1
ARM GAS  /tmp//ccY11c6d.s 			page 146


 4819 0038 002B     		cmp	r3, #0
 4820 003a E5D1     		bne	.L250
 4821              	.L253:
 4822              	.LBE469:
 4823              	.LBB474:
2276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4824              		.loc 1 2276 3 discriminator 1
 4825 003c 7B68     		ldr	r3, [r7, #4]
 4826 003e 1B68     		ldr	r3, [r3]
 4827 0040 1433     		adds	r3, r3, #20
 4828 0042 7B63     		str	r3, [r7, #52]
 4829              	.LBB475:
 4830              	.LBB476:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4831              		.loc 2 1072 4
 4832 0044 7B6B     		ldr	r3, [r7, #52]
 4833              		.syntax unified
 4834              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4835 0046 53E8003F 		ldrex r3, [r3]
 4836              	@ 0 "" 2
 4837              		.thumb
 4838              		.syntax unified
 4839 004a 3B63     		str	r3, [r7, #48]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4840              		.loc 2 1073 10
 4841 004c 3B6B     		ldr	r3, [r7, #48]
 4842              	.LBE476:
 4843              	.LBE475:
 4844              		.loc 1 2276 3 discriminator 1
 4845 004e 23F00103 		bic	r3, r3, #1
 4846 0052 3B66     		str	r3, [r7, #96]
 4847 0054 7B68     		ldr	r3, [r7, #4]
 4848 0056 1B68     		ldr	r3, [r3]
 4849 0058 1433     		adds	r3, r3, #20
 4850 005a 3A6E     		ldr	r2, [r7, #96]
 4851 005c 3A64     		str	r2, [r7, #64]
 4852 005e FB63     		str	r3, [r7, #60]
 4853              	.LBB477:
 4854              	.LBB478:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4855              		.loc 2 1123 4
 4856 0060 F96B     		ldr	r1, [r7, #60]
 4857 0062 3A6C     		ldr	r2, [r7, #64]
 4858              		.syntax unified
 4859              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4860 0064 41E80023 		strex r3, r2, [r1]
 4861              	@ 0 "" 2
 4862              		.thumb
 4863              		.syntax unified
 4864 0068 BB63     		str	r3, [r7, #56]
 4865              		.loc 2 1124 10
 4866 006a BB6B     		ldr	r3, [r7, #56]
 4867              	.LBE478:
 4868              	.LBE477:
 4869              		.loc 1 2276 3 discriminator 1
 4870 006c 002B     		cmp	r3, #0
 4871 006e E5D1     		bne	.L253
ARM GAS  /tmp//ccY11c6d.s 			page 147


 4872              	.LBE474:
2277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 4873              		.loc 1 2279 12
 4874 0070 7B68     		ldr	r3, [r7, #4]
 4875 0072 1B6B     		ldr	r3, [r3, #48]
 4876              		.loc 1 2279 6
 4877 0074 012B     		cmp	r3, #1
 4878 0076 19D1     		bne	.L254
 4879              	.L257:
 4880              	.LBB479:
2280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 4881              		.loc 1 2281 5 discriminator 1
 4882 0078 7B68     		ldr	r3, [r7, #4]
 4883 007a 1B68     		ldr	r3, [r3]
 4884 007c 0C33     		adds	r3, r3, #12
 4885 007e 3B62     		str	r3, [r7, #32]
 4886              	.LBB480:
 4887              	.LBB481:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4888              		.loc 2 1072 4
 4889 0080 3B6A     		ldr	r3, [r7, #32]
 4890              		.syntax unified
 4891              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4892 0082 53E8003F 		ldrex r3, [r3]
 4893              	@ 0 "" 2
 4894              		.thumb
 4895              		.syntax unified
 4896 0086 FB61     		str	r3, [r7, #28]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4897              		.loc 2 1073 10
 4898 0088 FB69     		ldr	r3, [r7, #28]
 4899              	.LBE481:
 4900              	.LBE480:
 4901              		.loc 1 2281 5 discriminator 1
 4902 008a 23F01003 		bic	r3, r3, #16
 4903 008e FB65     		str	r3, [r7, #92]
 4904 0090 7B68     		ldr	r3, [r7, #4]
 4905 0092 1B68     		ldr	r3, [r3]
 4906 0094 0C33     		adds	r3, r3, #12
 4907 0096 FA6D     		ldr	r2, [r7, #92]
 4908 0098 FA62     		str	r2, [r7, #44]
 4909 009a BB62     		str	r3, [r7, #40]
 4910              	.LBB482:
 4911              	.LBB483:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4912              		.loc 2 1123 4
 4913 009c B96A     		ldr	r1, [r7, #40]
 4914 009e FA6A     		ldr	r2, [r7, #44]
 4915              		.syntax unified
 4916              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4917 00a0 41E80023 		strex r3, r2, [r1]
 4918              	@ 0 "" 2
 4919              		.thumb
 4920              		.syntax unified
ARM GAS  /tmp//ccY11c6d.s 			page 148


 4921 00a4 7B62     		str	r3, [r7, #36]
 4922              		.loc 2 1124 10
 4923 00a6 7B6A     		ldr	r3, [r7, #36]
 4924              	.LBE483:
 4925              	.LBE482:
 4926              		.loc 1 2281 5 discriminator 1
 4927 00a8 002B     		cmp	r3, #0
 4928 00aa E5D1     		bne	.L257
 4929              	.L254:
 4930              	.LBE479:
2282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 4931              		.loc 1 2285 7
 4932 00ac 7B68     		ldr	r3, [r7, #4]
 4933 00ae 1B68     		ldr	r3, [r3]
 4934 00b0 5B69     		ldr	r3, [r3, #20]
 4935 00b2 03F04003 		and	r3, r3, #64
 4936              		.loc 1 2285 6
 4937 00b6 002B     		cmp	r3, #0
 4938 00b8 3FD0     		beq	.L258
 4939              	.L261:
 4940              	.LBB484:
2286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 4941              		.loc 1 2287 5 discriminator 1
 4942 00ba 7B68     		ldr	r3, [r7, #4]
 4943 00bc 1B68     		ldr	r3, [r3]
 4944 00be 1433     		adds	r3, r3, #20
 4945 00c0 FB60     		str	r3, [r7, #12]
 4946              	.LBB485:
 4947              	.LBB486:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4948              		.loc 2 1072 4
 4949 00c2 FB68     		ldr	r3, [r7, #12]
 4950              		.syntax unified
 4951              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4952 00c4 53E8003F 		ldrex r3, [r3]
 4953              	@ 0 "" 2
 4954              		.thumb
 4955              		.syntax unified
 4956 00c8 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4957              		.loc 2 1073 10
 4958 00ca BB68     		ldr	r3, [r7, #8]
 4959              	.LBE486:
 4960              	.LBE485:
 4961              		.loc 1 2287 5 discriminator 1
 4962 00cc 23F04003 		bic	r3, r3, #64
 4963 00d0 BB65     		str	r3, [r7, #88]
 4964 00d2 7B68     		ldr	r3, [r7, #4]
 4965 00d4 1B68     		ldr	r3, [r3]
 4966 00d6 1433     		adds	r3, r3, #20
 4967 00d8 BA6D     		ldr	r2, [r7, #88]
 4968 00da BA61     		str	r2, [r7, #24]
 4969 00dc 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp//ccY11c6d.s 			page 149


 4970              	.LBB487:
 4971              	.LBB488:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4972              		.loc 2 1123 4
 4973 00de 7969     		ldr	r1, [r7, #20]
 4974 00e0 BA69     		ldr	r2, [r7, #24]
 4975              		.syntax unified
 4976              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4977 00e2 41E80023 		strex r3, r2, [r1]
 4978              	@ 0 "" 2
 4979              		.thumb
 4980              		.syntax unified
 4981 00e6 3B61     		str	r3, [r7, #16]
 4982              		.loc 2 1124 10
 4983 00e8 3B69     		ldr	r3, [r7, #16]
 4984              	.LBE488:
 4985              	.LBE487:
 4986              		.loc 1 2287 5 discriminator 1
 4987 00ea 002B     		cmp	r3, #0
 4988 00ec E5D1     		bne	.L261
 4989              	.LBE484:
2288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
2290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 4990              		.loc 1 2290 14
 4991 00ee 7B68     		ldr	r3, [r7, #4]
 4992 00f0 DB6B     		ldr	r3, [r3, #60]
 4993              		.loc 1 2290 8
 4994 00f2 002B     		cmp	r3, #0
 4995 00f4 13D0     		beq	.L262
2291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 4996              		.loc 1 2294 12
 4997 00f6 7B68     		ldr	r3, [r7, #4]
 4998 00f8 DB6B     		ldr	r3, [r3, #60]
 4999              		.loc 1 2294 40
 5000 00fa 194A     		ldr	r2, .L265
 5001 00fc 5A63     		str	r2, [r3, #52]
2295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA RX */
2297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 5002              		.loc 1 2297 11
 5003 00fe 7B68     		ldr	r3, [r7, #4]
 5004 0100 DB6B     		ldr	r3, [r3, #60]
 5005 0102 1846     		mov	r0, r3
 5006 0104 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 5007 0108 0346     		mov	r3, r0
 5008              		.loc 1 2297 10 discriminator 1
 5009 010a 002B     		cmp	r3, #0
 5010 010c 22D0     		beq	.L263
2298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
2300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
 5011              		.loc 1 2300 14
 5012 010e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp//ccY11c6d.s 			page 150


 5013 0110 DB6B     		ldr	r3, [r3, #60]
 5014              		.loc 1 2300 22
 5015 0112 5B6B     		ldr	r3, [r3, #52]
 5016              		.loc 1 2300 47
 5017 0114 7A68     		ldr	r2, [r7, #4]
 5018 0116 D26B     		ldr	r2, [r2, #60]
 5019              		.loc 1 2300 9
 5020 0118 1046     		mov	r0, r2
 5021 011a 9847     		blx	r3
 5022              	.LVL1:
 5023 011c 1AE0     		b	.L263
 5024              	.L262:
2301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Reset Rx transfer counter */
2306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxXferCount = 0x00U;
 5025              		.loc 1 2306 26
 5026 011e 7B68     		ldr	r3, [r7, #4]
 5027 0120 0022     		movs	r2, #0
 5028 0122 DA85     		strh	r2, [r3, #46]	@ movhi
2307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
2309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 5029              		.loc 1 2309 22
 5030 0124 7B68     		ldr	r3, [r7, #4]
 5031 0126 2022     		movs	r2, #32
 5032 0128 83F84220 		strb	r2, [r3, #66]
2310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 5033              		.loc 1 2310 28
 5034 012c 7B68     		ldr	r3, [r7, #4]
 5035 012e 0022     		movs	r2, #0
 5036 0130 1A63     		str	r2, [r3, #48]
2311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call registered Abort Receive Complete Callback */
2315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->AbortReceiveCpltCallback(huart);
2316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call legacy weak Abort Receive Complete Callback */
2318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
 5037              		.loc 1 2318 7
 5038 0132 7868     		ldr	r0, [r7, #4]
 5039 0134 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 5040 0138 0CE0     		b	.L263
 5041              	.L258:
2319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Rx transfer counter */
2325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 5042              		.loc 1 2325 24
 5043 013a 7B68     		ldr	r3, [r7, #4]
 5044 013c 0022     		movs	r2, #0
ARM GAS  /tmp//ccY11c6d.s 			page 151


 5045 013e DA85     		strh	r2, [r3, #46]	@ movhi
2326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
2328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 5046              		.loc 1 2328 20
 5047 0140 7B68     		ldr	r3, [r7, #4]
 5048 0142 2022     		movs	r2, #32
 5049 0144 83F84220 		strb	r2, [r3, #66]
2329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 5050              		.loc 1 2329 26
 5051 0148 7B68     		ldr	r3, [r7, #4]
 5052 014a 0022     		movs	r2, #0
 5053 014c 1A63     		str	r2, [r3, #48]
2330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call registered Abort Receive Complete Callback */
2334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->AbortReceiveCpltCallback(huart);
2335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort Receive Complete Callback */
2337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
 5054              		.loc 1 2337 5
 5055 014e 7868     		ldr	r0, [r7, #4]
 5056 0150 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 5057              	.L263:
2338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 5058              		.loc 1 2341 10
 5059 0154 0023     		movs	r3, #0
2342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5060              		.loc 1 2342 1
 5061 0156 1846     		mov	r0, r3
 5062 0158 6837     		adds	r7, r7, #104
 5063              	.LCFI134:
 5064              		.cfi_def_cfa_offset 8
 5065 015a BD46     		mov	sp, r7
 5066              	.LCFI135:
 5067              		.cfi_def_cfa_register 13
 5068              		@ sp needed
 5069 015c 80BD     		pop	{r7, pc}
 5070              	.L266:
 5071 015e 00BF     		.align	2
 5072              	.L265:
 5073 0160 00000000 		.word	UART_DMARxOnlyAbortCallback
 5074              		.cfi_endproc
 5075              	.LFE90:
 5077              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 5078              		.align	1
 5079              		.global	HAL_UART_IRQHandler
 5080              		.syntax unified
 5081              		.thumb
 5082              		.thumb_func
 5084              	HAL_UART_IRQHandler:
 5085              	.LFB91:
2343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp//ccY11c6d.s 			page 152


2344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  This function handles UART interrupt request.
2346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
2351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5086              		.loc 1 2351 1
 5087              		.cfi_startproc
 5088              		@ args = 0, pretend = 0, frame = 232
 5089              		@ frame_needed = 1, uses_anonymous_args = 0
 5090 0000 80B5     		push	{r7, lr}
 5091              	.LCFI136:
 5092              		.cfi_def_cfa_offset 8
 5093              		.cfi_offset 7, -8
 5094              		.cfi_offset 14, -4
 5095 0002 BAB0     		sub	sp, sp, #232
 5096              	.LCFI137:
 5097              		.cfi_def_cfa_offset 240
 5098 0004 00AF     		add	r7, sp, #0
 5099              	.LCFI138:
 5100              		.cfi_def_cfa_register 7
 5101 0006 7860     		str	r0, [r7, #4]
2352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 5102              		.loc 1 2352 25
 5103 0008 7B68     		ldr	r3, [r7, #4]
 5104 000a 1B68     		ldr	r3, [r3]
 5105              		.loc 1 2352 12
 5106 000c 1B68     		ldr	r3, [r3]
 5107 000e C7F8E430 		str	r3, [r7, #228]
2353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 5108              		.loc 1 2353 25
 5109 0012 7B68     		ldr	r3, [r7, #4]
 5110 0014 1B68     		ldr	r3, [r3]
 5111              		.loc 1 2353 12
 5112 0016 DB68     		ldr	r3, [r3, #12]
 5113 0018 C7F8E030 		str	r3, [r7, #224]
2354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 5114              		.loc 1 2354 25
 5115 001c 7B68     		ldr	r3, [r7, #4]
 5116 001e 1B68     		ldr	r3, [r3]
 5117              		.loc 1 2354 12
 5118 0020 5B69     		ldr	r3, [r3, #20]
 5119 0022 C7F8DC30 		str	r3, [r7, #220]
2355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t errorflags = 0x00U;
 5120              		.loc 1 2355 12
 5121 0026 0023     		movs	r3, #0
 5122 0028 C7F8D830 		str	r3, [r7, #216]
2356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 5123              		.loc 1 2356 12
 5124 002c 0023     		movs	r3, #0
 5125 002e C7F8D430 		str	r3, [r7, #212]
2357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If no error occurs */
2359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 5126              		.loc 1 2359 14
ARM GAS  /tmp//ccY11c6d.s 			page 153


 5127 0032 D7F8E430 		ldr	r3, [r7, #228]
 5128 0036 03F00F03 		and	r3, r3, #15
 5129 003a C7F8D830 		str	r3, [r7, #216]
2360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (errorflags == RESET)
 5130              		.loc 1 2360 6
 5131 003e D7F8D830 		ldr	r3, [r7, #216]
 5132 0042 002B     		cmp	r3, #0
 5133 0044 0FD1     		bne	.L268
2361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART in mode Receiver -------------------------------------------------*/
2363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 5134              		.loc 1 2363 20
 5135 0046 D7F8E430 		ldr	r3, [r7, #228]
 5136 004a 03F02003 		and	r3, r3, #32
 5137              		.loc 1 2363 8
 5138 004e 002B     		cmp	r3, #0
 5139 0050 09D0     		beq	.L268
 5140              		.loc 1 2363 59 discriminator 1
 5141 0052 D7F8E030 		ldr	r3, [r7, #224]
 5142 0056 03F02003 		and	r3, r3, #32
 5143              		.loc 1 2363 47 discriminator 1
 5144 005a 002B     		cmp	r3, #0
 5145 005c 03D0     		beq	.L268
2364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       UART_Receive_IT(huart);
 5146              		.loc 1 2365 7
 5147 005e 7868     		ldr	r0, [r7, #4]
 5148 0060 FFF7FEFF 		bl	UART_Receive_IT
2366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
 5149              		.loc 1 2366 7
 5150 0064 5BE2     		b	.L267
 5151              	.L268:
2367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If some errors occur */
2371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 5152              		.loc 1 2371 6
 5153 0066 D7F8D830 		ldr	r3, [r7, #216]
 5154 006a 002B     		cmp	r3, #0
 5155 006c 00F0DE80 		beq	.L270
 5156              		.loc 1 2371 42 discriminator 1
 5157 0070 D7F8DC30 		ldr	r3, [r7, #220]
 5158 0074 03F00103 		and	r3, r3, #1
 5159              		.loc 1 2371 29 discriminator 1
 5160 0078 002B     		cmp	r3, #0
 5161 007a 06D1     		bne	.L271
2372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                                 || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 5162              		.loc 1 2372 45
 5163 007c D7F8E030 		ldr	r3, [r7, #224]
 5164 0080 03F49073 		and	r3, r3, #288
 5165              		.loc 1 2372 33
 5166 0084 002B     		cmp	r3, #0
 5167 0086 00F0D180 		beq	.L270
 5168              	.L271:
2373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART parity error interrupt occurred ----------------------------------*/
ARM GAS  /tmp//ccY11c6d.s 			page 154


2375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 5169              		.loc 1 2375 20
 5170 008a D7F8E430 		ldr	r3, [r7, #228]
 5171 008e 03F00103 		and	r3, r3, #1
 5172              		.loc 1 2375 8
 5173 0092 002B     		cmp	r3, #0
 5174 0094 0BD0     		beq	.L272
 5175              		.loc 1 2375 57 discriminator 1
 5176 0096 D7F8E030 		ldr	r3, [r7, #224]
 5177 009a 03F48073 		and	r3, r3, #256
 5178              		.loc 1 2375 45 discriminator 1
 5179 009e 002B     		cmp	r3, #0
 5180 00a0 05D0     		beq	.L272
2376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
 5181              		.loc 1 2377 12
 5182 00a2 7B68     		ldr	r3, [r7, #4]
 5183 00a4 5B6C     		ldr	r3, [r3, #68]
 5184              		.loc 1 2377 24
 5185 00a6 43F00102 		orr	r2, r3, #1
 5186 00aa 7B68     		ldr	r3, [r7, #4]
 5187 00ac 5A64     		str	r2, [r3, #68]
 5188              	.L272:
2378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART noise error interrupt occurred -----------------------------------*/
2381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 5189              		.loc 1 2381 20
 5190 00ae D7F8E430 		ldr	r3, [r7, #228]
 5191 00b2 03F00403 		and	r3, r3, #4
 5192              		.loc 1 2381 8
 5193 00b6 002B     		cmp	r3, #0
 5194 00b8 0BD0     		beq	.L273
 5195              		.loc 1 2381 57 discriminator 1
 5196 00ba D7F8DC30 		ldr	r3, [r7, #220]
 5197 00be 03F00103 		and	r3, r3, #1
 5198              		.loc 1 2381 45 discriminator 1
 5199 00c2 002B     		cmp	r3, #0
 5200 00c4 05D0     		beq	.L273
2382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
 5201              		.loc 1 2383 12
 5202 00c6 7B68     		ldr	r3, [r7, #4]
 5203 00c8 5B6C     		ldr	r3, [r3, #68]
 5204              		.loc 1 2383 24
 5205 00ca 43F00202 		orr	r2, r3, #2
 5206 00ce 7B68     		ldr	r3, [r7, #4]
 5207 00d0 5A64     		str	r2, [r3, #68]
 5208              	.L273:
2384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART frame error interrupt occurred -----------------------------------*/
2387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 5209              		.loc 1 2387 20
 5210 00d2 D7F8E430 		ldr	r3, [r7, #228]
 5211 00d6 03F00203 		and	r3, r3, #2
 5212              		.loc 1 2387 8
ARM GAS  /tmp//ccY11c6d.s 			page 155


 5213 00da 002B     		cmp	r3, #0
 5214 00dc 0BD0     		beq	.L274
 5215              		.loc 1 2387 57 discriminator 1
 5216 00de D7F8DC30 		ldr	r3, [r7, #220]
 5217 00e2 03F00103 		and	r3, r3, #1
 5218              		.loc 1 2387 45 discriminator 1
 5219 00e6 002B     		cmp	r3, #0
 5220 00e8 05D0     		beq	.L274
2388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
 5221              		.loc 1 2389 12
 5222 00ea 7B68     		ldr	r3, [r7, #4]
 5223 00ec 5B6C     		ldr	r3, [r3, #68]
 5224              		.loc 1 2389 24
 5225 00ee 43F00402 		orr	r2, r3, #4
 5226 00f2 7B68     		ldr	r3, [r7, #4]
 5227 00f4 5A64     		str	r2, [r3, #68]
 5228              	.L274:
2390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART Over-Run interrupt occurred --------------------------------------*/
2393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 5229              		.loc 1 2393 20
 5230 00f6 D7F8E430 		ldr	r3, [r7, #228]
 5231 00fa 03F00803 		and	r3, r3, #8
 5232              		.loc 1 2393 8
 5233 00fe 002B     		cmp	r3, #0
 5234 0100 11D0     		beq	.L275
 5235              		.loc 1 2393 59 discriminator 1
 5236 0102 D7F8E030 		ldr	r3, [r7, #224]
 5237 0106 03F02003 		and	r3, r3, #32
 5238              		.loc 1 2393 46 discriminator 1
 5239 010a 002B     		cmp	r3, #0
 5240 010c 05D1     		bne	.L276
2394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                                                  || ((cr3its & USART_CR3_EIE) != RESET)))
 5241              		.loc 1 2394 62
 5242 010e D7F8DC30 		ldr	r3, [r7, #220]
 5243 0112 03F00103 		and	r3, r3, #1
 5244              		.loc 1 2394 50
 5245 0116 002B     		cmp	r3, #0
 5246 0118 05D0     		beq	.L275
 5247              	.L276:
2395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
 5248              		.loc 1 2396 12
 5249 011a 7B68     		ldr	r3, [r7, #4]
 5250 011c 5B6C     		ldr	r3, [r3, #68]
 5251              		.loc 1 2396 24
 5252 011e 43F00802 		orr	r2, r3, #8
 5253 0122 7B68     		ldr	r3, [r7, #4]
 5254 0124 5A64     		str	r2, [r3, #68]
 5255              	.L275:
2397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call UART Error Call back function if need be --------------------------*/
2400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 5256              		.loc 1 2400 14
ARM GAS  /tmp//ccY11c6d.s 			page 156


 5257 0126 7B68     		ldr	r3, [r7, #4]
 5258 0128 5B6C     		ldr	r3, [r3, #68]
 5259              		.loc 1 2400 8
 5260 012a 002B     		cmp	r3, #0
 5261 012c 00F0F281 		beq	.L314
2401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART in mode Receiver -----------------------------------------------*/
2403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 5262              		.loc 1 2403 22
 5263 0130 D7F8E430 		ldr	r3, [r7, #228]
 5264 0134 03F02003 		and	r3, r3, #32
 5265              		.loc 1 2403 10
 5266 0138 002B     		cmp	r3, #0
 5267 013a 08D0     		beq	.L278
 5268              		.loc 1 2403 61 discriminator 1
 5269 013c D7F8E030 		ldr	r3, [r7, #224]
 5270 0140 03F02003 		and	r3, r3, #32
 5271              		.loc 1 2403 49 discriminator 1
 5272 0144 002B     		cmp	r3, #0
 5273 0146 02D0     		beq	.L278
2404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         UART_Receive_IT(huart);
 5274              		.loc 1 2405 9
 5275 0148 7868     		ldr	r0, [r7, #4]
 5276 014a FFF7FEFF 		bl	UART_Receive_IT
 5277              	.L278:
2406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
2409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          consider error as blocking */
2410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 5278              		.loc 1 2410 20
 5279 014e 7B68     		ldr	r3, [r7, #4]
 5280 0150 1B68     		ldr	r3, [r3]
 5281 0152 5B69     		ldr	r3, [r3, #20]
 5282 0154 03F04003 		and	r3, r3, #64
 5283 0158 002B     		cmp	r3, #0
 5284 015a 14BF     		ite	ne
 5285 015c 0123     		movne	r3, #1
 5286 015e 0023     		moveq	r3, #0
 5287 0160 DBB2     		uxtb	r3, r3
 5288              		.loc 1 2410 18
 5289 0162 C7F8D430 		str	r3, [r7, #212]
2411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 5290              		.loc 1 2411 18
 5291 0166 7B68     		ldr	r3, [r7, #4]
 5292 0168 5B6C     		ldr	r3, [r3, #68]
 5293              		.loc 1 2411 30
 5294 016a 03F00803 		and	r3, r3, #8
 5295              		.loc 1 2411 10
 5296 016e 002B     		cmp	r3, #0
 5297 0170 03D1     		bne	.L279
 5298              		.loc 1 2411 62 discriminator 1
 5299 0172 D7F8D430 		ldr	r3, [r7, #212]
 5300 0176 002B     		cmp	r3, #0
 5301 0178 4FD0     		beq	.L280
 5302              	.L279:
ARM GAS  /tmp//ccY11c6d.s 			page 157


2412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Blocking error : transfer is aborted
2414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
2415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
2416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         UART_EndRxTransfer(huart);
 5303              		.loc 1 2416 9
 5304 017a 7868     		ldr	r0, [r7, #4]
 5305 017c FFF7FEFF 		bl	UART_EndRxTransfer
2417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
2419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 5306              		.loc 1 2419 13
 5307 0180 7B68     		ldr	r3, [r7, #4]
 5308 0182 1B68     		ldr	r3, [r3]
 5309 0184 5B69     		ldr	r3, [r3, #20]
 5310 0186 03F04003 		and	r3, r3, #64
 5311              		.loc 1 2419 12
 5312 018a 002B     		cmp	r3, #0
 5313 018c 41D0     		beq	.L281
 5314              	.L284:
 5315              	.LBB489:
2420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 5316              		.loc 1 2421 11 discriminator 1
 5317 018e 7B68     		ldr	r3, [r7, #4]
 5318 0190 1B68     		ldr	r3, [r3]
 5319 0192 1433     		adds	r3, r3, #20
 5320 0194 C7F89C30 		str	r3, [r7, #156]
 5321              	.LBB490:
 5322              	.LBB491:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5323              		.loc 2 1072 4
 5324 0198 D7F89C30 		ldr	r3, [r7, #156]
 5325              		.syntax unified
 5326              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5327 019c 53E8003F 		ldrex r3, [r3]
 5328              	@ 0 "" 2
 5329              		.thumb
 5330              		.syntax unified
 5331 01a0 C7F89830 		str	r3, [r7, #152]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5332              		.loc 2 1073 10
 5333 01a4 D7F89830 		ldr	r3, [r7, #152]
 5334              	.LBE491:
 5335              	.LBE490:
 5336              		.loc 1 2421 11 discriminator 1
 5337 01a8 23F04003 		bic	r3, r3, #64
 5338 01ac C7F8D030 		str	r3, [r7, #208]
 5339 01b0 7B68     		ldr	r3, [r7, #4]
 5340 01b2 1B68     		ldr	r3, [r3]
 5341 01b4 1433     		adds	r3, r3, #20
 5342 01b6 D7F8D020 		ldr	r2, [r7, #208]
 5343 01ba C7F8A820 		str	r2, [r7, #168]
 5344 01be C7F8A430 		str	r3, [r7, #164]
 5345              	.LBB492:
 5346              	.LBB493:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp//ccY11c6d.s 			page 158


 5347              		.loc 2 1123 4
 5348 01c2 D7F8A410 		ldr	r1, [r7, #164]
 5349 01c6 D7F8A820 		ldr	r2, [r7, #168]
 5350              		.syntax unified
 5351              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5352 01ca 41E80023 		strex r3, r2, [r1]
 5353              	@ 0 "" 2
 5354              		.thumb
 5355              		.syntax unified
 5356 01ce C7F8A030 		str	r3, [r7, #160]
 5357              		.loc 2 1124 10
 5358 01d2 D7F8A030 		ldr	r3, [r7, #160]
 5359              	.LBE493:
 5360              	.LBE492:
 5361              		.loc 1 2421 11 discriminator 1
 5362 01d6 002B     		cmp	r3, #0
 5363 01d8 D9D1     		bne	.L284
 5364              	.LBE489:
2422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Abort the UART DMA Rx channel */
2424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           if (huart->hdmarx != NULL)
 5365              		.loc 1 2424 20
 5366 01da 7B68     		ldr	r3, [r7, #4]
 5367 01dc DB6B     		ldr	r3, [r3, #60]
 5368              		.loc 1 2424 14
 5369 01de 002B     		cmp	r3, #0
 5370 01e0 13D0     		beq	.L285
2425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           {
2426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /* Set the UART DMA Abort callback :
2427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
2428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 5371              		.loc 1 2428 18
 5372 01e2 7B68     		ldr	r3, [r7, #4]
 5373 01e4 DB6B     		ldr	r3, [r3, #60]
 5374              		.loc 1 2428 46
 5375 01e6 7E4A     		ldr	r2, .L318
 5376 01e8 5A63     		str	r2, [r3, #52]
2429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 5377              		.loc 1 2429 17
 5378 01ea 7B68     		ldr	r3, [r7, #4]
 5379 01ec DB6B     		ldr	r3, [r3, #60]
 5380 01ee 1846     		mov	r0, r3
 5381 01f0 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 5382 01f4 0346     		mov	r3, r0
 5383              		.loc 1 2429 16 discriminator 1
 5384 01f6 002B     		cmp	r3, #0
 5385 01f8 16D0     		beq	.L315
2430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             {
2431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****               /* Call Directly XferAbortCallback function in case of error */
2432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
 5386              		.loc 1 2432 20
 5387 01fa 7B68     		ldr	r3, [r7, #4]
 5388 01fc DB6B     		ldr	r3, [r3, #60]
 5389              		.loc 1 2432 28
 5390 01fe 5B6B     		ldr	r3, [r3, #52]
 5391              		.loc 1 2432 53
 5392 0200 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp//ccY11c6d.s 			page 159


 5393 0202 D26B     		ldr	r2, [r2, #60]
 5394              		.loc 1 2432 15
 5395 0204 1046     		mov	r0, r2
 5396 0206 9847     		blx	r3
 5397              	.LVL2:
2419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 5398              		.loc 1 2419 12
 5399 0208 0EE0     		b	.L315
 5400              	.L285:
2433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             }
2434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           }
2435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           else
2436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           {
2437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /* Call user error callback */
2438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /*Call registered error callback*/
2440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             huart->ErrorCallback(huart);
2441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /*Call legacy weak error callback*/
2443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
 5401              		.loc 1 2443 13
 5402 020a 7868     		ldr	r0, [r7, #4]
 5403 020c FFF7FEFF 		bl	HAL_UART_ErrorCallback
2419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 5404              		.loc 1 2419 12
 5405 0210 0AE0     		b	.L315
 5406              	.L281:
2444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           }
2446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
2448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Call user error callback */
2450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /*Call registered error callback*/
2452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCallback(huart);
2453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /*Call legacy weak error callback*/
2455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
 5407              		.loc 1 2455 11
 5408 0212 7868     		ldr	r0, [r7, #4]
 5409 0214 FFF7FEFF 		bl	HAL_UART_ErrorCallback
2419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 5410              		.loc 1 2419 12
 5411 0218 06E0     		b	.L315
 5412              	.L280:
2456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Non Blocking error : transfer could go on.
2462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Error is notified to user through user error callback */
2463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered error callback*/
2465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback(huart);
2466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
ARM GAS  /tmp//ccY11c6d.s 			page 160


2467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak error callback*/
2468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
 5413              		.loc 1 2468 9
 5414 021a 7868     		ldr	r0, [r7, #4]
 5415 021c FFF7FEFF 		bl	HAL_UART_ErrorCallback
2469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
 5416              		.loc 1 2471 26
 5417 0220 7B68     		ldr	r3, [r7, #4]
 5418 0222 0022     		movs	r2, #0
 5419 0224 5A64     		str	r2, [r3, #68]
2472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 5420              		.loc 1 2474 5
 5421 0226 75E1     		b	.L314
 5422              	.L315:
2419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 5423              		.loc 1 2419 12
 5424 0228 00BF     		nop
 5425              		.loc 1 2474 5
 5426 022a 73E1     		b	.L314
 5427              	.L270:
2475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   } /* End if some error occurs */
2476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check current reception Mode :
2478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      If Reception till IDLE event has been selected : */
2479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 5428              		.loc 1 2479 13
 5429 022c 7B68     		ldr	r3, [r7, #4]
 5430 022e 1B6B     		ldr	r3, [r3, #48]
 5431              		.loc 1 2479 6
 5432 0230 012B     		cmp	r3, #1
 5433 0232 40F04F81 		bne	.L287
2480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       && ((isrflags & USART_SR_IDLE) != 0U)
 5434              		.loc 1 2480 21
 5435 0236 D7F8E430 		ldr	r3, [r7, #228]
 5436 023a 03F01003 		and	r3, r3, #16
 5437              		.loc 1 2480 7
 5438 023e 002B     		cmp	r3, #0
 5439 0240 00F04881 		beq	.L287
2481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       && ((cr1its & USART_SR_IDLE) != 0U))
 5440              		.loc 1 2481 19
 5441 0244 D7F8E030 		ldr	r3, [r7, #224]
 5442 0248 03F01003 		and	r3, r3, #16
 5443              		.loc 1 2481 7
 5444 024c 002B     		cmp	r3, #0
 5445 024e 00F04181 		beq	.L287
 5446              	.LBB494:
2482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_IDLEFLAG(huart);
 5447              		.loc 1 2483 5
 5448 0252 0023     		movs	r3, #0
 5449 0254 BB60     		str	r3, [r7, #8]
 5450 0256 7B68     		ldr	r3, [r7, #4]
 5451 0258 1B68     		ldr	r3, [r3]
ARM GAS  /tmp//ccY11c6d.s 			page 161


 5452 025a 1B68     		ldr	r3, [r3]
 5453 025c BB60     		str	r3, [r7, #8]
 5454 025e 7B68     		ldr	r3, [r7, #4]
 5455 0260 1B68     		ldr	r3, [r3]
 5456 0262 5B68     		ldr	r3, [r3, #4]
 5457 0264 BB60     		str	r3, [r7, #8]
 5458 0266 BB68     		ldr	r3, [r7, #8]
 5459              	.LBE494:
2484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check if DMA mode is enabled in UART */
2486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 5460              		.loc 1 2486 9
 5461 0268 7B68     		ldr	r3, [r7, #4]
 5462 026a 1B68     		ldr	r3, [r3]
 5463 026c 5B69     		ldr	r3, [r3, #20]
 5464 026e 03F04003 		and	r3, r3, #64
 5465              		.loc 1 2486 8
 5466 0272 002B     		cmp	r3, #0
 5467 0274 00F0B680 		beq	.L288
 5468              	.LBB495:
2487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* DMA mode enabled */
2489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check received length : If all expected data are received, do nothing,
2490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          (DMA cplt callback will be called).
2491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          Otherwise, if at least one data has already been received, IDLE event is to be notified to
2492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 5469              		.loc 1 2492 50
 5470 0278 7B68     		ldr	r3, [r7, #4]
 5471 027a DB6B     		ldr	r3, [r3, #60]
 5472 027c 1B68     		ldr	r3, [r3]
 5473 027e 5B68     		ldr	r3, [r3, #4]
 5474              		.loc 1 2492 16
 5475 0280 A7F8BE30 		strh	r3, [r7, #190]	@ movhi
2493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if ((nb_remaining_rx_data > 0U)
 5476              		.loc 1 2493 10
 5477 0284 B7F8BE30 		ldrh	r3, [r7, #190]
 5478 0288 002B     		cmp	r3, #0
 5479 028a 00F04581 		beq	.L316
2494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           && (nb_remaining_rx_data < huart->RxXferSize))
 5480              		.loc 1 2494 43
 5481 028e 7B68     		ldr	r3, [r7, #4]
 5482 0290 9B8D     		ldrh	r3, [r3, #44]
 5483              		.loc 1 2494 11
 5484 0292 B7F8BE20 		ldrh	r2, [r7, #190]
 5485 0296 9A42     		cmp	r2, r3
 5486 0298 80F03E81 		bcs	.L316
2495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Reception is not complete */
2497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxXferCount = nb_remaining_rx_data;
 5487              		.loc 1 2497 28
 5488 029c 7B68     		ldr	r3, [r7, #4]
 5489 029e B7F8BE20 		ldrh	r2, [r7, #190]	@ movhi
 5490 02a2 DA85     		strh	r2, [r3, #46]	@ movhi
2498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* In Normal mode, end DMA xfer and HAL UART Rx process*/
2500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 5491              		.loc 1 2500 18
ARM GAS  /tmp//ccY11c6d.s 			page 162


 5492 02a4 7B68     		ldr	r3, [r7, #4]
 5493 02a6 DB6B     		ldr	r3, [r3, #60]
 5494              		.loc 1 2500 32
 5495 02a8 9B69     		ldr	r3, [r3, #24]
 5496              		.loc 1 2500 12
 5497 02aa 202B     		cmp	r3, #32
 5498 02ac 00F08880 		beq	.L290
 5499              	.L293:
 5500              	.LBB496:
2501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
2503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 5501              		.loc 1 2503 11 discriminator 1
 5502 02b0 7B68     		ldr	r3, [r7, #4]
 5503 02b2 1B68     		ldr	r3, [r3]
 5504 02b4 0C33     		adds	r3, r3, #12
 5505 02b6 C7F88830 		str	r3, [r7, #136]
 5506              	.LBB497:
 5507              	.LBB498:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5508              		.loc 2 1072 4
 5509 02ba D7F88830 		ldr	r3, [r7, #136]
 5510              		.syntax unified
 5511              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5512 02be 53E8003F 		ldrex r3, [r3]
 5513              	@ 0 "" 2
 5514              		.thumb
 5515              		.syntax unified
 5516 02c2 C7F88430 		str	r3, [r7, #132]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5517              		.loc 2 1073 10
 5518 02c6 D7F88430 		ldr	r3, [r7, #132]
 5519              	.LBE498:
 5520              	.LBE497:
 5521              		.loc 1 2503 11 discriminator 1
 5522 02ca 23F48073 		bic	r3, r3, #256
 5523 02ce C7F8B830 		str	r3, [r7, #184]
 5524 02d2 7B68     		ldr	r3, [r7, #4]
 5525 02d4 1B68     		ldr	r3, [r3]
 5526 02d6 0C33     		adds	r3, r3, #12
 5527 02d8 D7F8B820 		ldr	r2, [r7, #184]
 5528 02dc C7F89420 		str	r2, [r7, #148]
 5529 02e0 C7F89030 		str	r3, [r7, #144]
 5530              	.LBB499:
 5531              	.LBB500:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5532              		.loc 2 1123 4
 5533 02e4 D7F89010 		ldr	r1, [r7, #144]
 5534 02e8 D7F89420 		ldr	r2, [r7, #148]
 5535              		.syntax unified
 5536              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5537 02ec 41E80023 		strex r3, r2, [r1]
 5538              	@ 0 "" 2
 5539              		.thumb
 5540              		.syntax unified
 5541 02f0 C7F88C30 		str	r3, [r7, #140]
 5542              		.loc 2 1124 10
ARM GAS  /tmp//ccY11c6d.s 			page 163


 5543 02f4 D7F88C30 		ldr	r3, [r7, #140]
 5544              	.LBE500:
 5545              	.LBE499:
 5546              		.loc 1 2503 11 discriminator 1
 5547 02f8 002B     		cmp	r3, #0
 5548 02fa D9D1     		bne	.L293
 5549              	.L296:
 5550              	.LBE496:
 5551              	.LBB501:
2504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5552              		.loc 1 2504 11 discriminator 1
 5553 02fc 7B68     		ldr	r3, [r7, #4]
 5554 02fe 1B68     		ldr	r3, [r3]
 5555 0300 1433     		adds	r3, r3, #20
 5556 0302 7B67     		str	r3, [r7, #116]
 5557              	.LBB502:
 5558              	.LBB503:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5559              		.loc 2 1072 4
 5560 0304 7B6F     		ldr	r3, [r7, #116]
 5561              		.syntax unified
 5562              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5563 0306 53E8003F 		ldrex r3, [r3]
 5564              	@ 0 "" 2
 5565              		.thumb
 5566              		.syntax unified
 5567 030a 3B67     		str	r3, [r7, #112]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5568              		.loc 2 1073 10
 5569 030c 3B6F     		ldr	r3, [r7, #112]
 5570              	.LBE503:
 5571              	.LBE502:
 5572              		.loc 1 2504 11 discriminator 1
 5573 030e 23F00103 		bic	r3, r3, #1
 5574 0312 C7F8B430 		str	r3, [r7, #180]
 5575 0316 7B68     		ldr	r3, [r7, #4]
 5576 0318 1B68     		ldr	r3, [r3]
 5577 031a 1433     		adds	r3, r3, #20
 5578 031c D7F8B420 		ldr	r2, [r7, #180]
 5579 0320 C7F88020 		str	r2, [r7, #128]
 5580 0324 FB67     		str	r3, [r7, #124]
 5581              	.LBB504:
 5582              	.LBB505:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5583              		.loc 2 1123 4
 5584 0326 F96F     		ldr	r1, [r7, #124]
 5585 0328 D7F88020 		ldr	r2, [r7, #128]
 5586              		.syntax unified
 5587              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5588 032c 41E80023 		strex r3, r2, [r1]
 5589              	@ 0 "" 2
 5590              		.thumb
 5591              		.syntax unified
 5592 0330 BB67     		str	r3, [r7, #120]
 5593              		.loc 2 1124 10
 5594 0332 BB6F     		ldr	r3, [r7, #120]
 5595              	.LBE505:
ARM GAS  /tmp//ccY11c6d.s 			page 164


 5596              	.LBE504:
 5597              		.loc 1 2504 11 discriminator 1
 5598 0334 002B     		cmp	r3, #0
 5599 0336 E1D1     		bne	.L296
 5600              	.L299:
 5601              	.LBE501:
 5602              	.LBB506:
2505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
2507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              in the UART CR3 register */
2508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 5603              		.loc 1 2508 11 discriminator 1
 5604 0338 7B68     		ldr	r3, [r7, #4]
 5605 033a 1B68     		ldr	r3, [r3]
 5606 033c 1433     		adds	r3, r3, #20
 5607 033e 3B66     		str	r3, [r7, #96]
 5608              	.LBB507:
 5609              	.LBB508:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5610              		.loc 2 1072 4
 5611 0340 3B6E     		ldr	r3, [r7, #96]
 5612              		.syntax unified
 5613              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5614 0342 53E8003F 		ldrex r3, [r3]
 5615              	@ 0 "" 2
 5616              		.thumb
 5617              		.syntax unified
 5618 0346 FB65     		str	r3, [r7, #92]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5619              		.loc 2 1073 10
 5620 0348 FB6D     		ldr	r3, [r7, #92]
 5621              	.LBE508:
 5622              	.LBE507:
 5623              		.loc 1 2508 11 discriminator 1
 5624 034a 23F04003 		bic	r3, r3, #64
 5625 034e C7F8B030 		str	r3, [r7, #176]
 5626 0352 7B68     		ldr	r3, [r7, #4]
 5627 0354 1B68     		ldr	r3, [r3]
 5628 0356 1433     		adds	r3, r3, #20
 5629 0358 D7F8B020 		ldr	r2, [r7, #176]
 5630 035c FA66     		str	r2, [r7, #108]
 5631 035e BB66     		str	r3, [r7, #104]
 5632              	.LBB509:
 5633              	.LBB510:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5634              		.loc 2 1123 4
 5635 0360 B96E     		ldr	r1, [r7, #104]
 5636 0362 FA6E     		ldr	r2, [r7, #108]
 5637              		.syntax unified
 5638              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5639 0364 41E80023 		strex r3, r2, [r1]
 5640              	@ 0 "" 2
 5641              		.thumb
 5642              		.syntax unified
 5643 0368 7B66     		str	r3, [r7, #100]
 5644              		.loc 2 1124 10
 5645 036a 7B6E     		ldr	r3, [r7, #100]
ARM GAS  /tmp//ccY11c6d.s 			page 165


 5646              	.LBE510:
 5647              	.LBE509:
 5648              		.loc 1 2508 11 discriminator 1
 5649 036c 002B     		cmp	r3, #0
 5650 036e E3D1     		bne	.L299
 5651              	.LBE506:
2509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* At end of Rx process, restore huart->RxState to Ready */
2511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 5652              		.loc 1 2511 26
 5653 0370 7B68     		ldr	r3, [r7, #4]
 5654 0372 2022     		movs	r2, #32
 5655 0374 83F84220 		strb	r2, [r3, #66]
2512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 5656              		.loc 1 2512 32
 5657 0378 7B68     		ldr	r3, [r7, #4]
 5658 037a 0022     		movs	r2, #0
 5659 037c 1A63     		str	r2, [r3, #48]
 5660              	.L302:
 5661              	.LBB511:
2513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 5662              		.loc 1 2514 11 discriminator 1
 5663 037e 7B68     		ldr	r3, [r7, #4]
 5664 0380 1B68     		ldr	r3, [r3]
 5665 0382 0C33     		adds	r3, r3, #12
 5666 0384 FB64     		str	r3, [r7, #76]
 5667              	.LBB512:
 5668              	.LBB513:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5669              		.loc 2 1072 4
 5670 0386 FB6C     		ldr	r3, [r7, #76]
 5671              		.syntax unified
 5672              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5673 0388 53E8003F 		ldrex r3, [r3]
 5674              	@ 0 "" 2
 5675              		.thumb
 5676              		.syntax unified
 5677 038c BB64     		str	r3, [r7, #72]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5678              		.loc 2 1073 10
 5679 038e BB6C     		ldr	r3, [r7, #72]
 5680              	.LBE513:
 5681              	.LBE512:
 5682              		.loc 1 2514 11 discriminator 1
 5683 0390 23F01003 		bic	r3, r3, #16
 5684 0394 C7F8AC30 		str	r3, [r7, #172]
 5685 0398 7B68     		ldr	r3, [r7, #4]
 5686 039a 1B68     		ldr	r3, [r3]
 5687 039c 0C33     		adds	r3, r3, #12
 5688 039e D7F8AC20 		ldr	r2, [r7, #172]
 5689 03a2 BA65     		str	r2, [r7, #88]
 5690 03a4 7B65     		str	r3, [r7, #84]
 5691              	.LBB514:
 5692              	.LBB515:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5693              		.loc 2 1123 4
ARM GAS  /tmp//ccY11c6d.s 			page 166


 5694 03a6 796D     		ldr	r1, [r7, #84]
 5695 03a8 BA6D     		ldr	r2, [r7, #88]
 5696              		.syntax unified
 5697              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5698 03aa 41E80023 		strex r3, r2, [r1]
 5699              	@ 0 "" 2
 5700              		.thumb
 5701              		.syntax unified
 5702 03ae 3B65     		str	r3, [r7, #80]
 5703              		.loc 2 1124 10
 5704 03b0 3B6D     		ldr	r3, [r7, #80]
 5705              	.LBE515:
 5706              	.LBE514:
 5707              		.loc 1 2514 11 discriminator 1
 5708 03b2 002B     		cmp	r3, #0
 5709 03b4 E3D1     		bne	.L302
 5710              	.LBE511:
2515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Last bytes received, so no need as the abort is immediate */
2517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           (void)HAL_DMA_Abort(huart->hdmarx);
 5711              		.loc 1 2517 17
 5712 03b6 7B68     		ldr	r3, [r7, #4]
 5713 03b8 DB6B     		ldr	r3, [r3, #60]
 5714 03ba 1846     		mov	r0, r3
 5715 03bc FFF7FEFF 		bl	HAL_DMA_Abort
 5716              	.L290:
2518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Initialize type of RxEvent that correspond to RxEvent callback execution;
2521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         In this case, Rx Event type is Idle Event */
2522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 5717              		.loc 1 2522 28
 5718 03c0 7B68     		ldr	r3, [r7, #4]
 5719 03c2 0222     		movs	r2, #2
 5720 03c4 5A63     		str	r2, [r3, #52]
2523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered Rx Event callback*/
2526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
2527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
2529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 5721              		.loc 1 2529 49
 5722 03c6 7B68     		ldr	r3, [r7, #4]
 5723 03c8 9A8D     		ldrh	r2, [r3, #44]
 5724              		.loc 1 2529 69
 5725 03ca 7B68     		ldr	r3, [r7, #4]
 5726 03cc DB8D     		ldrh	r3, [r3, #46]	@ movhi
 5727 03ce 9BB2     		uxth	r3, r3
 5728              		.loc 1 2529 9
 5729 03d0 D31A     		subs	r3, r2, r3
 5730 03d2 9BB2     		uxth	r3, r3
 5731 03d4 1946     		mov	r1, r3
 5732 03d6 7868     		ldr	r0, [r7, #4]
 5733 03d8 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
2530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
ARM GAS  /tmp//ccY11c6d.s 			page 167


2532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
 5734              		.loc 1 2532 7
 5735 03dc 9CE0     		b	.L316
 5736              	.L319:
 5737 03de 00BF     		.align	2
 5738              	.L318:
 5739 03e0 00000000 		.word	UART_DMAAbortOnError
 5740              	.L288:
 5741              	.LBE495:
 5742              	.LBB516:
2533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* DMA mode not enabled */
2537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check received length : If all expected data are received, do nothing.
2538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          Otherwise, if at least one data has already been received, IDLE event is to be notified to
2539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 5743              		.loc 1 2539 34
 5744 03e4 7B68     		ldr	r3, [r7, #4]
 5745 03e6 9A8D     		ldrh	r2, [r3, #44]
 5746              		.loc 1 2539 54
 5747 03e8 7B68     		ldr	r3, [r7, #4]
 5748 03ea DB8D     		ldrh	r3, [r3, #46]	@ movhi
 5749 03ec 9BB2     		uxth	r3, r3
 5750              		.loc 1 2539 16
 5751 03ee D31A     		subs	r3, r2, r3
 5752 03f0 A7F8CE30 		strh	r3, [r7, #206]	@ movhi
2540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if ((huart->RxXferCount > 0U)
 5753              		.loc 1 2540 17
 5754 03f4 7B68     		ldr	r3, [r7, #4]
 5755 03f6 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 5756 03f8 9BB2     		uxth	r3, r3
 5757              		.loc 1 2540 10
 5758 03fa 002B     		cmp	r3, #0
 5759 03fc 00F08E80 		beq	.L317
2541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           && (nb_rx_data > 0U))
 5760              		.loc 1 2541 11
 5761 0400 B7F8CE30 		ldrh	r3, [r7, #206]
 5762 0404 002B     		cmp	r3, #0
 5763 0406 00F08980 		beq	.L317
 5764              	.L306:
 5765              	.LBB517:
2542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable the UART Parity Error Interrupt and RXNE interrupts */
2544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 5766              		.loc 1 2544 9 discriminator 1
 5767 040a 7B68     		ldr	r3, [r7, #4]
 5768 040c 1B68     		ldr	r3, [r3]
 5769 040e 0C33     		adds	r3, r3, #12
 5770 0410 BB63     		str	r3, [r7, #56]
 5771              	.LBB518:
 5772              	.LBB519:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5773              		.loc 2 1072 4
 5774 0412 BB6B     		ldr	r3, [r7, #56]
 5775              		.syntax unified
 5776              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp//ccY11c6d.s 			page 168


 5777 0414 53E8003F 		ldrex r3, [r3]
 5778              	@ 0 "" 2
 5779              		.thumb
 5780              		.syntax unified
 5781 0418 7B63     		str	r3, [r7, #52]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5782              		.loc 2 1073 10
 5783 041a 7B6B     		ldr	r3, [r7, #52]
 5784              	.LBE519:
 5785              	.LBE518:
 5786              		.loc 1 2544 9 discriminator 1
 5787 041c 23F49073 		bic	r3, r3, #288
 5788 0420 C7F8C830 		str	r3, [r7, #200]
 5789 0424 7B68     		ldr	r3, [r7, #4]
 5790 0426 1B68     		ldr	r3, [r3]
 5791 0428 0C33     		adds	r3, r3, #12
 5792 042a D7F8C820 		ldr	r2, [r7, #200]
 5793 042e 7A64     		str	r2, [r7, #68]
 5794 0430 3B64     		str	r3, [r7, #64]
 5795              	.LBB520:
 5796              	.LBB521:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5797              		.loc 2 1123 4
 5798 0432 396C     		ldr	r1, [r7, #64]
 5799 0434 7A6C     		ldr	r2, [r7, #68]
 5800              		.syntax unified
 5801              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5802 0436 41E80023 		strex r3, r2, [r1]
 5803              	@ 0 "" 2
 5804              		.thumb
 5805              		.syntax unified
 5806 043a FB63     		str	r3, [r7, #60]
 5807              		.loc 2 1124 10
 5808 043c FB6B     		ldr	r3, [r7, #60]
 5809              	.LBE521:
 5810              	.LBE520:
 5811              		.loc 1 2544 9 discriminator 1
 5812 043e 002B     		cmp	r3, #0
 5813 0440 E3D1     		bne	.L306
 5814              	.L309:
 5815              	.LBE517:
 5816              	.LBB522:
2545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
2547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5817              		.loc 1 2547 9 discriminator 1
 5818 0442 7B68     		ldr	r3, [r7, #4]
 5819 0444 1B68     		ldr	r3, [r3]
 5820 0446 1433     		adds	r3, r3, #20
 5821 0448 7B62     		str	r3, [r7, #36]
 5822              	.LBB523:
 5823              	.LBB524:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5824              		.loc 2 1072 4
 5825 044a 7B6A     		ldr	r3, [r7, #36]
 5826              		.syntax unified
 5827              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp//ccY11c6d.s 			page 169


 5828 044c 53E8003F 		ldrex r3, [r3]
 5829              	@ 0 "" 2
 5830              		.thumb
 5831              		.syntax unified
 5832 0450 3B62     		str	r3, [r7, #32]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5833              		.loc 2 1073 10
 5834 0452 3B6A     		ldr	r3, [r7, #32]
 5835              	.LBE524:
 5836              	.LBE523:
 5837              		.loc 1 2547 9 discriminator 1
 5838 0454 23F00103 		bic	r3, r3, #1
 5839 0458 C7F8C430 		str	r3, [r7, #196]
 5840 045c 7B68     		ldr	r3, [r7, #4]
 5841 045e 1B68     		ldr	r3, [r3]
 5842 0460 1433     		adds	r3, r3, #20
 5843 0462 D7F8C420 		ldr	r2, [r7, #196]
 5844 0466 3A63     		str	r2, [r7, #48]
 5845 0468 FB62     		str	r3, [r7, #44]
 5846              	.LBB525:
 5847              	.LBB526:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5848              		.loc 2 1123 4
 5849 046a F96A     		ldr	r1, [r7, #44]
 5850 046c 3A6B     		ldr	r2, [r7, #48]
 5851              		.syntax unified
 5852              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5853 046e 41E80023 		strex r3, r2, [r1]
 5854              	@ 0 "" 2
 5855              		.thumb
 5856              		.syntax unified
 5857 0472 BB62     		str	r3, [r7, #40]
 5858              		.loc 2 1124 10
 5859 0474 BB6A     		ldr	r3, [r7, #40]
 5860              	.LBE526:
 5861              	.LBE525:
 5862              		.loc 1 2547 9 discriminator 1
 5863 0476 002B     		cmp	r3, #0
 5864 0478 E3D1     		bne	.L309
 5865              	.LBE522:
2548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Rx process is completed, restore huart->RxState to Ready */
2550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 5866              		.loc 1 2550 24
 5867 047a 7B68     		ldr	r3, [r7, #4]
 5868 047c 2022     		movs	r2, #32
 5869 047e 83F84220 		strb	r2, [r3, #66]
2551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 5870              		.loc 1 2551 30
 5871 0482 7B68     		ldr	r3, [r7, #4]
 5872 0484 0022     		movs	r2, #0
 5873 0486 1A63     		str	r2, [r3, #48]
 5874              	.L312:
 5875              	.LBB527:
2552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 5876              		.loc 1 2553 9 discriminator 1
ARM GAS  /tmp//ccY11c6d.s 			page 170


 5877 0488 7B68     		ldr	r3, [r7, #4]
 5878 048a 1B68     		ldr	r3, [r3]
 5879 048c 0C33     		adds	r3, r3, #12
 5880 048e 3B61     		str	r3, [r7, #16]
 5881              	.LBB528:
 5882              	.LBB529:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5883              		.loc 2 1072 4
 5884 0490 3B69     		ldr	r3, [r7, #16]
 5885              		.syntax unified
 5886              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5887 0492 53E8003F 		ldrex r3, [r3]
 5888              	@ 0 "" 2
 5889              		.thumb
 5890              		.syntax unified
 5891 0496 FB60     		str	r3, [r7, #12]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5892              		.loc 2 1073 10
 5893 0498 FB68     		ldr	r3, [r7, #12]
 5894              	.LBE529:
 5895              	.LBE528:
 5896              		.loc 1 2553 9 discriminator 1
 5897 049a 23F01003 		bic	r3, r3, #16
 5898 049e C7F8C030 		str	r3, [r7, #192]
 5899 04a2 7B68     		ldr	r3, [r7, #4]
 5900 04a4 1B68     		ldr	r3, [r3]
 5901 04a6 0C33     		adds	r3, r3, #12
 5902 04a8 D7F8C020 		ldr	r2, [r7, #192]
 5903 04ac FA61     		str	r2, [r7, #28]
 5904 04ae BB61     		str	r3, [r7, #24]
 5905              	.LBB530:
 5906              	.LBB531:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5907              		.loc 2 1123 4
 5908 04b0 B969     		ldr	r1, [r7, #24]
 5909 04b2 FA69     		ldr	r2, [r7, #28]
 5910              		.syntax unified
 5911              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5912 04b4 41E80023 		strex r3, r2, [r1]
 5913              	@ 0 "" 2
 5914              		.thumb
 5915              		.syntax unified
 5916 04b8 7B61     		str	r3, [r7, #20]
 5917              		.loc 2 1124 10
 5918 04ba 7B69     		ldr	r3, [r7, #20]
 5919              	.LBE531:
 5920              	.LBE530:
 5921              		.loc 1 2553 9 discriminator 1
 5922 04bc 002B     		cmp	r3, #0
 5923 04be E3D1     		bne	.L312
 5924              	.LBE527:
2554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Initialize type of RxEvent that correspond to RxEvent callback execution;
2556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            In this case, Rx Event type is Idle Event */
2557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 5925              		.loc 1 2557 28
 5926 04c0 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp//ccY11c6d.s 			page 171


 5927 04c2 0222     		movs	r2, #2
 5928 04c4 5A63     		str	r2, [r3, #52]
2558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered Rx complete callback*/
2561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxEventCallback(huart, nb_rx_data);
2562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
2564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 5929              		.loc 1 2564 9
 5930 04c6 B7F8CE30 		ldrh	r3, [r7, #206]
 5931 04ca 1946     		mov	r1, r3
 5932 04cc 7868     		ldr	r0, [r7, #4]
 5933 04ce FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
2565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
 5934              		.loc 1 2567 7
 5935 04d2 23E0     		b	.L317
 5936              	.L287:
 5937              	.LBE516:
2568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
2572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 5938              		.loc 1 2572 18
 5939 04d4 D7F8E430 		ldr	r3, [r7, #228]
 5940 04d8 03F08003 		and	r3, r3, #128
 5941              		.loc 1 2572 6
 5942 04dc 002B     		cmp	r3, #0
 5943 04de 09D0     		beq	.L313
 5944              		.loc 1 2572 56 discriminator 1
 5945 04e0 D7F8E030 		ldr	r3, [r7, #224]
 5946 04e4 03F08003 		and	r3, r3, #128
 5947              		.loc 1 2572 44 discriminator 1
 5948 04e8 002B     		cmp	r3, #0
 5949 04ea 03D0     		beq	.L313
2573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_Transmit_IT(huart);
 5950              		.loc 1 2574 5
 5951 04ec 7868     		ldr	r0, [r7, #4]
 5952 04ee FFF7FEFF 		bl	UART_Transmit_IT
2575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 5953              		.loc 1 2575 5
 5954 04f2 14E0     		b	.L267
 5955              	.L313:
2576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* UART in mode Transmitter end --------------------------------------------*/
2579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 5956              		.loc 1 2579 18
 5957 04f4 D7F8E430 		ldr	r3, [r7, #228]
 5958 04f8 03F04003 		and	r3, r3, #64
 5959              		.loc 1 2579 6
 5960 04fc 002B     		cmp	r3, #0
 5961 04fe 0ED0     		beq	.L267
ARM GAS  /tmp//ccY11c6d.s 			page 172


 5962              		.loc 1 2579 55 discriminator 1
 5963 0500 D7F8E030 		ldr	r3, [r7, #224]
 5964 0504 03F04003 		and	r3, r3, #64
 5965              		.loc 1 2579 43 discriminator 1
 5966 0508 002B     		cmp	r3, #0
 5967 050a 08D0     		beq	.L267
2580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
 5968              		.loc 1 2581 5
 5969 050c 7868     		ldr	r0, [r7, #4]
 5970 050e FFF7FEFF 		bl	UART_EndTransmit_IT
2582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 5971              		.loc 1 2582 5
 5972 0512 04E0     		b	.L267
 5973              	.L314:
2474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   } /* End if some error occurs */
 5974              		.loc 1 2474 5
 5975 0514 00BF     		nop
 5976 0516 02E0     		b	.L267
 5977              	.L316:
 5978              	.LBB532:
2532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 5979              		.loc 1 2532 7
 5980 0518 00BF     		nop
 5981 051a 00E0     		b	.L267
 5982              	.L317:
 5983              	.LBE532:
 5984              	.LBB533:
2567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 5985              		.loc 1 2567 7
 5986 051c 00BF     		nop
 5987              	.L267:
 5988              	.LBE533:
2583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5989              		.loc 1 2584 1
 5990 051e E837     		adds	r7, r7, #232
 5991              	.LCFI139:
 5992              		.cfi_def_cfa_offset 8
 5993 0520 BD46     		mov	sp, r7
 5994              	.LCFI140:
 5995              		.cfi_def_cfa_register 13
 5996              		@ sp needed
 5997 0522 80BD     		pop	{r7, pc}
 5998              		.cfi_endproc
 5999              	.LFE91:
 6001              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 6002              		.align	1
 6003              		.weak	HAL_UART_TxCpltCallback
 6004              		.syntax unified
 6005              		.thumb
 6006              		.thumb_func
 6008              	HAL_UART_TxCpltCallback:
 6009              	.LFB92:
2585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Tx Transfer completed callbacks.
ARM GAS  /tmp//ccY11c6d.s 			page 173


2588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
2593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6010              		.loc 1 2593 1
 6011              		.cfi_startproc
 6012              		@ args = 0, pretend = 0, frame = 8
 6013              		@ frame_needed = 1, uses_anonymous_args = 0
 6014              		@ link register save eliminated.
 6015 0000 80B4     		push	{r7}
 6016              	.LCFI141:
 6017              		.cfi_def_cfa_offset 4
 6018              		.cfi_offset 7, -4
 6019 0002 83B0     		sub	sp, sp, #12
 6020              	.LCFI142:
 6021              		.cfi_def_cfa_offset 16
 6022 0004 00AF     		add	r7, sp, #0
 6023              	.LCFI143:
 6024              		.cfi_def_cfa_register 7
 6025 0006 7860     		str	r0, [r7, #4]
2594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
2598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6026              		.loc 1 2599 1
 6027 0008 00BF     		nop
 6028 000a 0C37     		adds	r7, r7, #12
 6029              	.LCFI144:
 6030              		.cfi_def_cfa_offset 4
 6031 000c BD46     		mov	sp, r7
 6032              	.LCFI145:
 6033              		.cfi_def_cfa_register 13
 6034              		@ sp needed
 6035 000e 80BC     		pop	{r7}
 6036              	.LCFI146:
 6037              		.cfi_restore 7
 6038              		.cfi_def_cfa_offset 0
 6039 0010 7047     		bx	lr
 6040              		.cfi_endproc
 6041              	.LFE92:
 6043              		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 6044              		.align	1
 6045              		.weak	HAL_UART_TxHalfCpltCallback
 6046              		.syntax unified
 6047              		.thumb
 6048              		.thumb_func
 6050              	HAL_UART_TxHalfCpltCallback:
 6051              	.LFB93:
2600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callbacks.
2603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
ARM GAS  /tmp//ccY11c6d.s 			page 174


2605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
2608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6052              		.loc 1 2608 1
 6053              		.cfi_startproc
 6054              		@ args = 0, pretend = 0, frame = 8
 6055              		@ frame_needed = 1, uses_anonymous_args = 0
 6056              		@ link register save eliminated.
 6057 0000 80B4     		push	{r7}
 6058              	.LCFI147:
 6059              		.cfi_def_cfa_offset 4
 6060              		.cfi_offset 7, -4
 6061 0002 83B0     		sub	sp, sp, #12
 6062              	.LCFI148:
 6063              		.cfi_def_cfa_offset 16
 6064 0004 00AF     		add	r7, sp, #0
 6065              	.LCFI149:
 6066              		.cfi_def_cfa_register 7
 6067 0006 7860     		str	r0, [r7, #4]
2609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_TxHalfCpltCallback could be implemented in the user file
2613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6068              		.loc 1 2614 1
 6069 0008 00BF     		nop
 6070 000a 0C37     		adds	r7, r7, #12
 6071              	.LCFI150:
 6072              		.cfi_def_cfa_offset 4
 6073 000c BD46     		mov	sp, r7
 6074              	.LCFI151:
 6075              		.cfi_def_cfa_register 13
 6076              		@ sp needed
 6077 000e 80BC     		pop	{r7}
 6078              	.LCFI152:
 6079              		.cfi_restore 7
 6080              		.cfi_def_cfa_offset 0
 6081 0010 7047     		bx	lr
 6082              		.cfi_endproc
 6083              	.LFE93:
 6085              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 6086              		.align	1
 6087              		.weak	HAL_UART_RxCpltCallback
 6088              		.syntax unified
 6089              		.thumb
 6090              		.thumb_func
 6092              	HAL_UART_RxCpltCallback:
 6093              	.LFB94:
2615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Rx Transfer completed callbacks.
2618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
ARM GAS  /tmp//ccY11c6d.s 			page 175


2622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
2623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6094              		.loc 1 2623 1
 6095              		.cfi_startproc
 6096              		@ args = 0, pretend = 0, frame = 8
 6097              		@ frame_needed = 1, uses_anonymous_args = 0
 6098              		@ link register save eliminated.
 6099 0000 80B4     		push	{r7}
 6100              	.LCFI153:
 6101              		.cfi_def_cfa_offset 4
 6102              		.cfi_offset 7, -4
 6103 0002 83B0     		sub	sp, sp, #12
 6104              	.LCFI154:
 6105              		.cfi_def_cfa_offset 16
 6106 0004 00AF     		add	r7, sp, #0
 6107              	.LCFI155:
 6108              		.cfi_def_cfa_register 7
 6109 0006 7860     		str	r0, [r7, #4]
2624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_RxCpltCallback could be implemented in the user file
2628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6110              		.loc 1 2629 1
 6111 0008 00BF     		nop
 6112 000a 0C37     		adds	r7, r7, #12
 6113              	.LCFI156:
 6114              		.cfi_def_cfa_offset 4
 6115 000c BD46     		mov	sp, r7
 6116              	.LCFI157:
 6117              		.cfi_def_cfa_register 13
 6118              		@ sp needed
 6119 000e 80BC     		pop	{r7}
 6120              	.LCFI158:
 6121              		.cfi_restore 7
 6122              		.cfi_def_cfa_offset 0
 6123 0010 7047     		bx	lr
 6124              		.cfi_endproc
 6125              	.LFE94:
 6127              		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 6128              		.align	1
 6129              		.weak	HAL_UART_RxHalfCpltCallback
 6130              		.syntax unified
 6131              		.thumb
 6132              		.thumb_func
 6134              	HAL_UART_RxHalfCpltCallback:
 6135              	.LFB95:
2630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callbacks.
2633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
2638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
ARM GAS  /tmp//ccY11c6d.s 			page 176


 6136              		.loc 1 2638 1
 6137              		.cfi_startproc
 6138              		@ args = 0, pretend = 0, frame = 8
 6139              		@ frame_needed = 1, uses_anonymous_args = 0
 6140              		@ link register save eliminated.
 6141 0000 80B4     		push	{r7}
 6142              	.LCFI159:
 6143              		.cfi_def_cfa_offset 4
 6144              		.cfi_offset 7, -4
 6145 0002 83B0     		sub	sp, sp, #12
 6146              	.LCFI160:
 6147              		.cfi_def_cfa_offset 16
 6148 0004 00AF     		add	r7, sp, #0
 6149              	.LCFI161:
 6150              		.cfi_def_cfa_register 7
 6151 0006 7860     		str	r0, [r7, #4]
2639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_RxHalfCpltCallback could be implemented in the user file
2643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6152              		.loc 1 2644 1
 6153 0008 00BF     		nop
 6154 000a 0C37     		adds	r7, r7, #12
 6155              	.LCFI162:
 6156              		.cfi_def_cfa_offset 4
 6157 000c BD46     		mov	sp, r7
 6158              	.LCFI163:
 6159              		.cfi_def_cfa_register 13
 6160              		@ sp needed
 6161 000e 80BC     		pop	{r7}
 6162              	.LCFI164:
 6163              		.cfi_restore 7
 6164              		.cfi_def_cfa_offset 0
 6165 0010 7047     		bx	lr
 6166              		.cfi_endproc
 6167              	.LFE95:
 6169              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 6170              		.align	1
 6171              		.weak	HAL_UART_ErrorCallback
 6172              		.syntax unified
 6173              		.thumb
 6174              		.thumb_func
 6176              	HAL_UART_ErrorCallback:
 6177              	.LFB96:
2645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART error callbacks.
2648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
2653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6178              		.loc 1 2653 1
 6179              		.cfi_startproc
ARM GAS  /tmp//ccY11c6d.s 			page 177


 6180              		@ args = 0, pretend = 0, frame = 8
 6181              		@ frame_needed = 1, uses_anonymous_args = 0
 6182              		@ link register save eliminated.
 6183 0000 80B4     		push	{r7}
 6184              	.LCFI165:
 6185              		.cfi_def_cfa_offset 4
 6186              		.cfi_offset 7, -4
 6187 0002 83B0     		sub	sp, sp, #12
 6188              	.LCFI166:
 6189              		.cfi_def_cfa_offset 16
 6190 0004 00AF     		add	r7, sp, #0
 6191              	.LCFI167:
 6192              		.cfi_def_cfa_register 7
 6193 0006 7860     		str	r0, [r7, #4]
2654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_ErrorCallback could be implemented in the user file
2658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6194              		.loc 1 2659 1
 6195 0008 00BF     		nop
 6196 000a 0C37     		adds	r7, r7, #12
 6197              	.LCFI168:
 6198              		.cfi_def_cfa_offset 4
 6199 000c BD46     		mov	sp, r7
 6200              	.LCFI169:
 6201              		.cfi_def_cfa_register 13
 6202              		@ sp needed
 6203 000e 80BC     		pop	{r7}
 6204              	.LCFI170:
 6205              		.cfi_restore 7
 6206              		.cfi_def_cfa_offset 0
 6207 0010 7047     		bx	lr
 6208              		.cfi_endproc
 6209              	.LFE96:
 6211              		.section	.text.HAL_UART_AbortCpltCallback,"ax",%progbits
 6212              		.align	1
 6213              		.weak	HAL_UART_AbortCpltCallback
 6214              		.syntax unified
 6215              		.thumb
 6216              		.thumb_func
 6218              	HAL_UART_AbortCpltCallback:
 6219              	.LFB97:
2660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
2667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6220              		.loc 1 2667 1
 6221              		.cfi_startproc
 6222              		@ args = 0, pretend = 0, frame = 8
 6223              		@ frame_needed = 1, uses_anonymous_args = 0
 6224              		@ link register save eliminated.
ARM GAS  /tmp//ccY11c6d.s 			page 178


 6225 0000 80B4     		push	{r7}
 6226              	.LCFI171:
 6227              		.cfi_def_cfa_offset 4
 6228              		.cfi_offset 7, -4
 6229 0002 83B0     		sub	sp, sp, #12
 6230              	.LCFI172:
 6231              		.cfi_def_cfa_offset 16
 6232 0004 00AF     		add	r7, sp, #0
 6233              	.LCFI173:
 6234              		.cfi_def_cfa_register 7
 6235 0006 7860     		str	r0, [r7, #4]
2668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
2673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6236              		.loc 1 2674 1
 6237 0008 00BF     		nop
 6238 000a 0C37     		adds	r7, r7, #12
 6239              	.LCFI174:
 6240              		.cfi_def_cfa_offset 4
 6241 000c BD46     		mov	sp, r7
 6242              	.LCFI175:
 6243              		.cfi_def_cfa_register 13
 6244              		@ sp needed
 6245 000e 80BC     		pop	{r7}
 6246              	.LCFI176:
 6247              		.cfi_restore 7
 6248              		.cfi_def_cfa_offset 0
 6249 0010 7047     		bx	lr
 6250              		.cfi_endproc
 6251              	.LFE97:
 6253              		.section	.text.HAL_UART_AbortTransmitCpltCallback,"ax",%progbits
 6254              		.align	1
 6255              		.weak	HAL_UART_AbortTransmitCpltCallback
 6256              		.syntax unified
 6257              		.thumb
 6258              		.thumb_func
 6260              	HAL_UART_AbortTransmitCpltCallback:
 6261              	.LFB98:
2675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
2682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6262              		.loc 1 2682 1
 6263              		.cfi_startproc
 6264              		@ args = 0, pretend = 0, frame = 8
 6265              		@ frame_needed = 1, uses_anonymous_args = 0
 6266              		@ link register save eliminated.
 6267 0000 80B4     		push	{r7}
 6268              	.LCFI177:
ARM GAS  /tmp//ccY11c6d.s 			page 179


 6269              		.cfi_def_cfa_offset 4
 6270              		.cfi_offset 7, -4
 6271 0002 83B0     		sub	sp, sp, #12
 6272              	.LCFI178:
 6273              		.cfi_def_cfa_offset 16
 6274 0004 00AF     		add	r7, sp, #0
 6275              	.LCFI179:
 6276              		.cfi_def_cfa_register 7
 6277 0006 7860     		str	r0, [r7, #4]
2683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
2688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6278              		.loc 1 2689 1
 6279 0008 00BF     		nop
 6280 000a 0C37     		adds	r7, r7, #12
 6281              	.LCFI180:
 6282              		.cfi_def_cfa_offset 4
 6283 000c BD46     		mov	sp, r7
 6284              	.LCFI181:
 6285              		.cfi_def_cfa_register 13
 6286              		@ sp needed
 6287 000e 80BC     		pop	{r7}
 6288              	.LCFI182:
 6289              		.cfi_restore 7
 6290              		.cfi_def_cfa_offset 0
 6291 0010 7047     		bx	lr
 6292              		.cfi_endproc
 6293              	.LFE98:
 6295              		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
 6296              		.align	1
 6297              		.weak	HAL_UART_AbortReceiveCpltCallback
 6298              		.syntax unified
 6299              		.thumb
 6300              		.thumb_func
 6302              	HAL_UART_AbortReceiveCpltCallback:
 6303              	.LFB99:
2690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
2693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
2697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6304              		.loc 1 2697 1
 6305              		.cfi_startproc
 6306              		@ args = 0, pretend = 0, frame = 8
 6307              		@ frame_needed = 1, uses_anonymous_args = 0
 6308              		@ link register save eliminated.
 6309 0000 80B4     		push	{r7}
 6310              	.LCFI183:
 6311              		.cfi_def_cfa_offset 4
 6312              		.cfi_offset 7, -4
ARM GAS  /tmp//ccY11c6d.s 			page 180


 6313 0002 83B0     		sub	sp, sp, #12
 6314              	.LCFI184:
 6315              		.cfi_def_cfa_offset 16
 6316 0004 00AF     		add	r7, sp, #0
 6317              	.LCFI185:
 6318              		.cfi_def_cfa_register 7
 6319 0006 7860     		str	r0, [r7, #4]
2698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
2703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6320              		.loc 1 2704 1
 6321 0008 00BF     		nop
 6322 000a 0C37     		adds	r7, r7, #12
 6323              	.LCFI186:
 6324              		.cfi_def_cfa_offset 4
 6325 000c BD46     		mov	sp, r7
 6326              	.LCFI187:
 6327              		.cfi_def_cfa_register 13
 6328              		@ sp needed
 6329 000e 80BC     		pop	{r7}
 6330              	.LCFI188:
 6331              		.cfi_restore 7
 6332              		.cfi_def_cfa_offset 0
 6333 0010 7047     		bx	lr
 6334              		.cfi_endproc
 6335              	.LFE99:
 6337              		.section	.text.HAL_UARTEx_RxEventCallback,"ax",%progbits
 6338              		.align	1
 6339              		.weak	HAL_UARTEx_RxEventCallback
 6340              		.syntax unified
 6341              		.thumb
 6342              		.thumb_func
 6344              	HAL_UARTEx_RxEventCallback:
 6345              	.LFB100:
2705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Reception Event Callback (Rx event notification called after use of advanced reception 
2708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle
2709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Number of data available in application reception buffer (indicates a position in
2710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               reception buffer until which, data are available)
2711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
2714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6346              		.loc 1 2714 1
 6347              		.cfi_startproc
 6348              		@ args = 0, pretend = 0, frame = 8
 6349              		@ frame_needed = 1, uses_anonymous_args = 0
 6350              		@ link register save eliminated.
 6351 0000 80B4     		push	{r7}
 6352              	.LCFI189:
 6353              		.cfi_def_cfa_offset 4
 6354              		.cfi_offset 7, -4
ARM GAS  /tmp//ccY11c6d.s 			page 181


 6355 0002 83B0     		sub	sp, sp, #12
 6356              	.LCFI190:
 6357              		.cfi_def_cfa_offset 16
 6358 0004 00AF     		add	r7, sp, #0
 6359              	.LCFI191:
 6360              		.cfi_def_cfa_register 7
 6361 0006 7860     		str	r0, [r7, #4]
 6362 0008 0B46     		mov	r3, r1
 6363 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(Size);
2718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UARTEx_RxEventCallback can be implemented in the user file.
2721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6364              		.loc 1 2722 1
 6365 000c 00BF     		nop
 6366 000e 0C37     		adds	r7, r7, #12
 6367              	.LCFI192:
 6368              		.cfi_def_cfa_offset 4
 6369 0010 BD46     		mov	sp, r7
 6370              	.LCFI193:
 6371              		.cfi_def_cfa_register 13
 6372              		@ sp needed
 6373 0012 80BC     		pop	{r7}
 6374              	.LCFI194:
 6375              		.cfi_restore 7
 6376              		.cfi_def_cfa_offset 0
 6377 0014 7047     		bx	lr
 6378              		.cfi_endproc
 6379              	.LFE100:
 6381              		.section	.text.HAL_LIN_SendBreak,"ax",%progbits
 6382              		.align	1
 6383              		.global	HAL_LIN_SendBreak
 6384              		.syntax unified
 6385              		.thumb
 6386              		.thumb_func
 6388              	HAL_LIN_SendBreak:
 6389              	.LFB101:
2723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
2729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief   UART control functions
2730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
2731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
2732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                       ##### Peripheral Control functions #####
2734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   [..]
2736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART:
2737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_LIN_SendBreak() API can be helpful to transmit the break character.
2738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_MultiProcessor_EnterMuteMode() API can be helpful to enter the UART in mute mode.
ARM GAS  /tmp//ccY11c6d.s 			page 182


2739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_MultiProcessor_ExitMuteMode() API can be helpful to exit the UART mute mode by software
2740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableTransmitter() API to enable the UART transmitter and disables the UART
2741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableReceiver() API to enable the UART receiver and disables the UART trans
2742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
2744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
2745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Transmits break characters.
2749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
2754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6390              		.loc 1 2754 1
 6391              		.cfi_startproc
 6392              		@ args = 0, pretend = 0, frame = 32
 6393              		@ frame_needed = 1, uses_anonymous_args = 0
 6394              		@ link register save eliminated.
 6395 0000 80B4     		push	{r7}
 6396              	.LCFI195:
 6397              		.cfi_def_cfa_offset 4
 6398              		.cfi_offset 7, -4
 6399 0002 89B0     		sub	sp, sp, #36
 6400              	.LCFI196:
 6401              		.cfi_def_cfa_offset 40
 6402 0004 00AF     		add	r7, sp, #0
 6403              	.LCFI197:
 6404              		.cfi_def_cfa_register 7
 6405 0006 7860     		str	r0, [r7, #4]
2755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 6406              		.loc 1 2759 3
 6407 0008 7B68     		ldr	r3, [r7, #4]
 6408 000a 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 6409 000e 012B     		cmp	r3, #1
 6410 0010 01D1     		bne	.L330
 6411              		.loc 1 2759 3 is_stmt 0 discriminator 1
 6412 0012 0223     		movs	r3, #2
 6413              		.loc 1 2759 3
 6414 0014 2AE0     		b	.L331
 6415              	.L330:
 6416              		.loc 1 2759 3 discriminator 2
 6417 0016 7B68     		ldr	r3, [r7, #4]
 6418 0018 0122     		movs	r2, #1
 6419 001a 83F84020 		strb	r2, [r3, #64]
2760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 6420              		.loc 1 2761 17 is_stmt 1
 6421 001e 7B68     		ldr	r3, [r7, #4]
 6422 0020 2422     		movs	r2, #36
 6423 0022 83F84120 		strb	r2, [r3, #65]
ARM GAS  /tmp//ccY11c6d.s 			page 183


 6424              	.L334:
 6425              	.LBB534:
2762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Send break characters */
2764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 6426              		.loc 1 2764 3 discriminator 1
 6427 0026 7B68     		ldr	r3, [r7, #4]
 6428 0028 1B68     		ldr	r3, [r3]
 6429 002a 0C33     		adds	r3, r3, #12
 6430 002c FB60     		str	r3, [r7, #12]
 6431              	.LBB535:
 6432              	.LBB536:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6433              		.loc 2 1072 4
 6434 002e FB68     		ldr	r3, [r7, #12]
 6435              		.syntax unified
 6436              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6437 0030 53E8003F 		ldrex r3, [r3]
 6438              	@ 0 "" 2
 6439              		.thumb
 6440              		.syntax unified
 6441 0034 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6442              		.loc 2 1073 10
 6443 0036 BB68     		ldr	r3, [r7, #8]
 6444              	.LBE536:
 6445              	.LBE535:
 6446              		.loc 1 2764 3 discriminator 1
 6447 0038 43F00103 		orr	r3, r3, #1
 6448 003c FB61     		str	r3, [r7, #28]
 6449 003e 7B68     		ldr	r3, [r7, #4]
 6450 0040 1B68     		ldr	r3, [r3]
 6451 0042 0C33     		adds	r3, r3, #12
 6452 0044 FA69     		ldr	r2, [r7, #28]
 6453 0046 BA61     		str	r2, [r7, #24]
 6454 0048 7B61     		str	r3, [r7, #20]
 6455              	.LBB537:
 6456              	.LBB538:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6457              		.loc 2 1123 4
 6458 004a 7969     		ldr	r1, [r7, #20]
 6459 004c BA69     		ldr	r2, [r7, #24]
 6460              		.syntax unified
 6461              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6462 004e 41E80023 		strex r3, r2, [r1]
 6463              	@ 0 "" 2
 6464              		.thumb
 6465              		.syntax unified
 6466 0052 3B61     		str	r3, [r7, #16]
 6467              		.loc 2 1124 10
 6468 0054 3B69     		ldr	r3, [r7, #16]
 6469              	.LBE538:
 6470              	.LBE537:
 6471              		.loc 1 2764 3 discriminator 1
 6472 0056 002B     		cmp	r3, #0
 6473 0058 E5D1     		bne	.L334
 6474              	.LBE534:
ARM GAS  /tmp//ccY11c6d.s 			page 184


2765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6475              		.loc 1 2766 17
 6476 005a 7B68     		ldr	r3, [r7, #4]
 6477 005c 2022     		movs	r2, #32
 6478 005e 83F84120 		strb	r2, [r3, #65]
2767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 6479              		.loc 1 2769 3
 6480 0062 7B68     		ldr	r3, [r7, #4]
 6481 0064 0022     		movs	r2, #0
 6482 0066 83F84020 		strb	r2, [r3, #64]
2770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 6483              		.loc 1 2771 10
 6484 006a 0023     		movs	r3, #0
 6485              	.L331:
2772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6486              		.loc 1 2772 1
 6487 006c 1846     		mov	r0, r3
 6488 006e 2437     		adds	r7, r7, #36
 6489              	.LCFI198:
 6490              		.cfi_def_cfa_offset 4
 6491 0070 BD46     		mov	sp, r7
 6492              	.LCFI199:
 6493              		.cfi_def_cfa_register 13
 6494              		@ sp needed
 6495 0072 80BC     		pop	{r7}
 6496              	.LCFI200:
 6497              		.cfi_restore 7
 6498              		.cfi_def_cfa_offset 0
 6499 0074 7047     		bx	lr
 6500              		.cfi_endproc
 6501              	.LFE101:
 6503              		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
 6504              		.align	1
 6505              		.global	HAL_MultiProcessor_EnterMuteMode
 6506              		.syntax unified
 6507              		.thumb
 6508              		.thumb_func
 6510              	HAL_MultiProcessor_EnterMuteMode:
 6511              	.LFB102:
2773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enters the UART in mute mode.
2776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
2781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6512              		.loc 1 2781 1
 6513              		.cfi_startproc
 6514              		@ args = 0, pretend = 0, frame = 32
 6515              		@ frame_needed = 1, uses_anonymous_args = 0
 6516              		@ link register save eliminated.
ARM GAS  /tmp//ccY11c6d.s 			page 185


 6517 0000 80B4     		push	{r7}
 6518              	.LCFI201:
 6519              		.cfi_def_cfa_offset 4
 6520              		.cfi_offset 7, -4
 6521 0002 89B0     		sub	sp, sp, #36
 6522              	.LCFI202:
 6523              		.cfi_def_cfa_offset 40
 6524 0004 00AF     		add	r7, sp, #0
 6525              	.LCFI203:
 6526              		.cfi_def_cfa_register 7
 6527 0006 7860     		str	r0, [r7, #4]
2782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 6528              		.loc 1 2786 3
 6529 0008 7B68     		ldr	r3, [r7, #4]
 6530 000a 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 6531 000e 012B     		cmp	r3, #1
 6532 0010 01D1     		bne	.L336
 6533              		.loc 1 2786 3 is_stmt 0 discriminator 1
 6534 0012 0223     		movs	r3, #2
 6535              		.loc 1 2786 3
 6536 0014 2DE0     		b	.L337
 6537              	.L336:
 6538              		.loc 1 2786 3 discriminator 2
 6539 0016 7B68     		ldr	r3, [r7, #4]
 6540 0018 0122     		movs	r2, #1
 6541 001a 83F84020 		strb	r2, [r3, #64]
2787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 6542              		.loc 1 2788 17 is_stmt 1
 6543 001e 7B68     		ldr	r3, [r7, #4]
 6544 0020 2422     		movs	r2, #36
 6545 0022 83F84120 		strb	r2, [r3, #65]
 6546              	.L340:
 6547              	.LBB539:
2789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
2791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 6548              		.loc 1 2791 3 discriminator 1
 6549 0026 7B68     		ldr	r3, [r7, #4]
 6550 0028 1B68     		ldr	r3, [r3]
 6551 002a 0C33     		adds	r3, r3, #12
 6552 002c FB60     		str	r3, [r7, #12]
 6553              	.LBB540:
 6554              	.LBB541:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6555              		.loc 2 1072 4
 6556 002e FB68     		ldr	r3, [r7, #12]
 6557              		.syntax unified
 6558              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6559 0030 53E8003F 		ldrex r3, [r3]
 6560              	@ 0 "" 2
 6561              		.thumb
 6562              		.syntax unified
ARM GAS  /tmp//ccY11c6d.s 			page 186


 6563 0034 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6564              		.loc 2 1073 10
 6565 0036 BB68     		ldr	r3, [r7, #8]
 6566              	.LBE541:
 6567              	.LBE540:
 6568              		.loc 1 2791 3 discriminator 1
 6569 0038 43F00203 		orr	r3, r3, #2
 6570 003c FB61     		str	r3, [r7, #28]
 6571 003e 7B68     		ldr	r3, [r7, #4]
 6572 0040 1B68     		ldr	r3, [r3]
 6573 0042 0C33     		adds	r3, r3, #12
 6574 0044 FA69     		ldr	r2, [r7, #28]
 6575 0046 BA61     		str	r2, [r7, #24]
 6576 0048 7B61     		str	r3, [r7, #20]
 6577              	.LBB542:
 6578              	.LBB543:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6579              		.loc 2 1123 4
 6580 004a 7969     		ldr	r1, [r7, #20]
 6581 004c BA69     		ldr	r2, [r7, #24]
 6582              		.syntax unified
 6583              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6584 004e 41E80023 		strex r3, r2, [r1]
 6585              	@ 0 "" 2
 6586              		.thumb
 6587              		.syntax unified
 6588 0052 3B61     		str	r3, [r7, #16]
 6589              		.loc 2 1124 10
 6590 0054 3B69     		ldr	r3, [r7, #16]
 6591              	.LBE543:
 6592              	.LBE542:
 6593              		.loc 1 2791 3 discriminator 1
 6594 0056 002B     		cmp	r3, #0
 6595 0058 E5D1     		bne	.L340
 6596              	.LBE539:
2792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6597              		.loc 1 2793 17
 6598 005a 7B68     		ldr	r3, [r7, #4]
 6599 005c 2022     		movs	r2, #32
 6600 005e 83F84120 		strb	r2, [r3, #65]
2794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventType = HAL_UART_RXEVENT_TC;
 6601              		.loc 1 2794 22
 6602 0062 7B68     		ldr	r3, [r7, #4]
 6603 0064 0022     		movs	r2, #0
 6604 0066 5A63     		str	r2, [r3, #52]
2795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 6605              		.loc 1 2797 3
 6606 0068 7B68     		ldr	r3, [r7, #4]
 6607 006a 0022     		movs	r2, #0
 6608 006c 83F84020 		strb	r2, [r3, #64]
2798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 6609              		.loc 1 2799 10
ARM GAS  /tmp//ccY11c6d.s 			page 187


 6610 0070 0023     		movs	r3, #0
 6611              	.L337:
2800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6612              		.loc 1 2800 1
 6613 0072 1846     		mov	r0, r3
 6614 0074 2437     		adds	r7, r7, #36
 6615              	.LCFI204:
 6616              		.cfi_def_cfa_offset 4
 6617 0076 BD46     		mov	sp, r7
 6618              	.LCFI205:
 6619              		.cfi_def_cfa_register 13
 6620              		@ sp needed
 6621 0078 80BC     		pop	{r7}
 6622              	.LCFI206:
 6623              		.cfi_restore 7
 6624              		.cfi_def_cfa_offset 0
 6625 007a 7047     		bx	lr
 6626              		.cfi_endproc
 6627              	.LFE102:
 6629              		.section	.text.HAL_MultiProcessor_ExitMuteMode,"ax",%progbits
 6630              		.align	1
 6631              		.global	HAL_MultiProcessor_ExitMuteMode
 6632              		.syntax unified
 6633              		.thumb
 6634              		.thumb_func
 6636              	HAL_MultiProcessor_ExitMuteMode:
 6637              	.LFB103:
2801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Exits the UART mute mode: wake up software.
2804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
2809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6638              		.loc 1 2809 1
 6639              		.cfi_startproc
 6640              		@ args = 0, pretend = 0, frame = 32
 6641              		@ frame_needed = 1, uses_anonymous_args = 0
 6642              		@ link register save eliminated.
 6643 0000 80B4     		push	{r7}
 6644              	.LCFI207:
 6645              		.cfi_def_cfa_offset 4
 6646              		.cfi_offset 7, -4
 6647 0002 89B0     		sub	sp, sp, #36
 6648              	.LCFI208:
 6649              		.cfi_def_cfa_offset 40
 6650 0004 00AF     		add	r7, sp, #0
 6651              	.LCFI209:
 6652              		.cfi_def_cfa_register 7
 6653 0006 7860     		str	r0, [r7, #4]
2810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
ARM GAS  /tmp//ccY11c6d.s 			page 188


 6654              		.loc 1 2814 3
 6655 0008 7B68     		ldr	r3, [r7, #4]
 6656 000a 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 6657 000e 012B     		cmp	r3, #1
 6658 0010 01D1     		bne	.L342
 6659              		.loc 1 2814 3 is_stmt 0 discriminator 1
 6660 0012 0223     		movs	r3, #2
 6661              		.loc 1 2814 3
 6662 0014 2DE0     		b	.L343
 6663              	.L342:
 6664              		.loc 1 2814 3 discriminator 2
 6665 0016 7B68     		ldr	r3, [r7, #4]
 6666 0018 0122     		movs	r2, #1
 6667 001a 83F84020 		strb	r2, [r3, #64]
2815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 6668              		.loc 1 2816 17 is_stmt 1
 6669 001e 7B68     		ldr	r3, [r7, #4]
 6670 0020 2422     		movs	r2, #36
 6671 0022 83F84120 		strb	r2, [r3, #65]
 6672              	.L346:
 6673              	.LBB544:
2817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
2819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 6674              		.loc 1 2819 3 discriminator 1
 6675 0026 7B68     		ldr	r3, [r7, #4]
 6676 0028 1B68     		ldr	r3, [r3]
 6677 002a 0C33     		adds	r3, r3, #12
 6678 002c FB60     		str	r3, [r7, #12]
 6679              	.LBB545:
 6680              	.LBB546:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6681              		.loc 2 1072 4
 6682 002e FB68     		ldr	r3, [r7, #12]
 6683              		.syntax unified
 6684              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6685 0030 53E8003F 		ldrex r3, [r3]
 6686              	@ 0 "" 2
 6687              		.thumb
 6688              		.syntax unified
 6689 0034 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6690              		.loc 2 1073 10
 6691 0036 BB68     		ldr	r3, [r7, #8]
 6692              	.LBE546:
 6693              	.LBE545:
 6694              		.loc 1 2819 3 discriminator 1
 6695 0038 23F00203 		bic	r3, r3, #2
 6696 003c FB61     		str	r3, [r7, #28]
 6697 003e 7B68     		ldr	r3, [r7, #4]
 6698 0040 1B68     		ldr	r3, [r3]
 6699 0042 0C33     		adds	r3, r3, #12
 6700 0044 FA69     		ldr	r2, [r7, #28]
 6701 0046 BA61     		str	r2, [r7, #24]
 6702 0048 7B61     		str	r3, [r7, #20]
 6703              	.LBB547:
ARM GAS  /tmp//ccY11c6d.s 			page 189


 6704              	.LBB548:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6705              		.loc 2 1123 4
 6706 004a 7969     		ldr	r1, [r7, #20]
 6707 004c BA69     		ldr	r2, [r7, #24]
 6708              		.syntax unified
 6709              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6710 004e 41E80023 		strex r3, r2, [r1]
 6711              	@ 0 "" 2
 6712              		.thumb
 6713              		.syntax unified
 6714 0052 3B61     		str	r3, [r7, #16]
 6715              		.loc 2 1124 10
 6716 0054 3B69     		ldr	r3, [r7, #16]
 6717              	.LBE548:
 6718              	.LBE547:
 6719              		.loc 1 2819 3 discriminator 1
 6720 0056 002B     		cmp	r3, #0
 6721 0058 E5D1     		bne	.L346
 6722              	.LBE544:
2820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6723              		.loc 1 2821 17
 6724 005a 7B68     		ldr	r3, [r7, #4]
 6725 005c 2022     		movs	r2, #32
 6726 005e 83F84120 		strb	r2, [r3, #65]
2822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventType = HAL_UART_RXEVENT_TC;
 6727              		.loc 1 2822 22
 6728 0062 7B68     		ldr	r3, [r7, #4]
 6729 0064 0022     		movs	r2, #0
 6730 0066 5A63     		str	r2, [r3, #52]
2823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 6731              		.loc 1 2825 3
 6732 0068 7B68     		ldr	r3, [r7, #4]
 6733 006a 0022     		movs	r2, #0
 6734 006c 83F84020 		strb	r2, [r3, #64]
2826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 6735              		.loc 1 2827 10
 6736 0070 0023     		movs	r3, #0
 6737              	.L343:
2828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6738              		.loc 1 2828 1
 6739 0072 1846     		mov	r0, r3
 6740 0074 2437     		adds	r7, r7, #36
 6741              	.LCFI210:
 6742              		.cfi_def_cfa_offset 4
 6743 0076 BD46     		mov	sp, r7
 6744              	.LCFI211:
 6745              		.cfi_def_cfa_register 13
 6746              		@ sp needed
 6747 0078 80BC     		pop	{r7}
 6748              	.LCFI212:
 6749              		.cfi_restore 7
 6750              		.cfi_def_cfa_offset 0
ARM GAS  /tmp//ccY11c6d.s 			page 190


 6751 007a 7047     		bx	lr
 6752              		.cfi_endproc
 6753              	.LFE103:
 6755              		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 6756              		.align	1
 6757              		.global	HAL_HalfDuplex_EnableTransmitter
 6758              		.syntax unified
 6759              		.thumb
 6760              		.thumb_func
 6762              	HAL_HalfDuplex_EnableTransmitter:
 6763              	.LFB104:
2829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enables the UART transmitter and disables the UART receiver.
2832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
2837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6764              		.loc 1 2837 1
 6765              		.cfi_startproc
 6766              		@ args = 0, pretend = 0, frame = 16
 6767              		@ frame_needed = 1, uses_anonymous_args = 0
 6768              		@ link register save eliminated.
 6769 0000 80B4     		push	{r7}
 6770              	.LCFI213:
 6771              		.cfi_def_cfa_offset 4
 6772              		.cfi_offset 7, -4
 6773 0002 85B0     		sub	sp, sp, #20
 6774              	.LCFI214:
 6775              		.cfi_def_cfa_offset 24
 6776 0004 00AF     		add	r7, sp, #0
 6777              	.LCFI215:
 6778              		.cfi_def_cfa_register 7
 6779 0006 7860     		str	r0, [r7, #4]
2838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 6780              		.loc 1 2838 12
 6781 0008 0023     		movs	r3, #0
 6782 000a FB60     		str	r3, [r7, #12]
2839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 6783              		.loc 1 2841 3
 6784 000c 7B68     		ldr	r3, [r7, #4]
 6785 000e 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 6786 0012 012B     		cmp	r3, #1
 6787 0014 01D1     		bne	.L348
 6788              		.loc 1 2841 3 is_stmt 0 discriminator 1
 6789 0016 0223     		movs	r3, #2
 6790              		.loc 1 2841 3
 6791 0018 20E0     		b	.L349
 6792              	.L348:
 6793              		.loc 1 2841 3 discriminator 2
 6794 001a 7B68     		ldr	r3, [r7, #4]
 6795 001c 0122     		movs	r2, #1
 6796 001e 83F84020 		strb	r2, [r3, #64]
ARM GAS  /tmp//ccY11c6d.s 			page 191


2842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 6797              		.loc 1 2843 17 is_stmt 1
 6798 0022 7B68     		ldr	r3, [r7, #4]
 6799 0024 2422     		movs	r2, #36
 6800 0026 83F84120 		strb	r2, [r3, #65]
2844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 6801              		.loc 1 2846 17
 6802 002a 7B68     		ldr	r3, [r7, #4]
 6803 002c 1B68     		ldr	r3, [r3]
 6804              		.loc 1 2846 10
 6805 002e DB68     		ldr	r3, [r3, #12]
 6806 0030 FB60     		str	r3, [r7, #12]
2847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Clear TE and RE bits */
2849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 6807              		.loc 1 2849 10
 6808 0032 FB68     		ldr	r3, [r7, #12]
 6809 0034 23F00C03 		bic	r3, r3, #12
 6810 0038 FB60     		str	r3, [r7, #12]
2850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
2852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_TE;
 6811              		.loc 1 2852 10
 6812 003a FB68     		ldr	r3, [r7, #12]
 6813 003c 43F00803 		orr	r3, r3, #8
 6814 0040 FB60     		str	r3, [r7, #12]
2853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Write to USART CR1 */
2855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 6815              		.loc 1 2855 3
 6816 0042 7B68     		ldr	r3, [r7, #4]
 6817 0044 1B68     		ldr	r3, [r3]
 6818 0046 FA68     		ldr	r2, [r7, #12]
 6819 0048 DA60     		str	r2, [r3, #12]
2856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6820              		.loc 1 2857 17
 6821 004a 7B68     		ldr	r3, [r7, #4]
 6822 004c 2022     		movs	r2, #32
 6823 004e 83F84120 		strb	r2, [r3, #65]
2858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 6824              		.loc 1 2860 3
 6825 0052 7B68     		ldr	r3, [r7, #4]
 6826 0054 0022     		movs	r2, #0
 6827 0056 83F84020 		strb	r2, [r3, #64]
2861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 6828              		.loc 1 2862 10
 6829 005a 0023     		movs	r3, #0
 6830              	.L349:
2863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6831              		.loc 1 2863 1
ARM GAS  /tmp//ccY11c6d.s 			page 192


 6832 005c 1846     		mov	r0, r3
 6833 005e 1437     		adds	r7, r7, #20
 6834              	.LCFI216:
 6835              		.cfi_def_cfa_offset 4
 6836 0060 BD46     		mov	sp, r7
 6837              	.LCFI217:
 6838              		.cfi_def_cfa_register 13
 6839              		@ sp needed
 6840 0062 80BC     		pop	{r7}
 6841              	.LCFI218:
 6842              		.cfi_restore 7
 6843              		.cfi_def_cfa_offset 0
 6844 0064 7047     		bx	lr
 6845              		.cfi_endproc
 6846              	.LFE104:
 6848              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 6849              		.align	1
 6850              		.global	HAL_HalfDuplex_EnableReceiver
 6851              		.syntax unified
 6852              		.thumb
 6853              		.thumb_func
 6855              	HAL_HalfDuplex_EnableReceiver:
 6856              	.LFB105:
2864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enables the UART receiver and disables the UART transmitter.
2867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
2872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6857              		.loc 1 2872 1
 6858              		.cfi_startproc
 6859              		@ args = 0, pretend = 0, frame = 16
 6860              		@ frame_needed = 1, uses_anonymous_args = 0
 6861              		@ link register save eliminated.
 6862 0000 80B4     		push	{r7}
 6863              	.LCFI219:
 6864              		.cfi_def_cfa_offset 4
 6865              		.cfi_offset 7, -4
 6866 0002 85B0     		sub	sp, sp, #20
 6867              	.LCFI220:
 6868              		.cfi_def_cfa_offset 24
 6869 0004 00AF     		add	r7, sp, #0
 6870              	.LCFI221:
 6871              		.cfi_def_cfa_register 7
 6872 0006 7860     		str	r0, [r7, #4]
2873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 6873              		.loc 1 2873 12
 6874 0008 0023     		movs	r3, #0
 6875 000a FB60     		str	r3, [r7, #12]
2874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 6876              		.loc 1 2876 3
 6877 000c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp//ccY11c6d.s 			page 193


 6878 000e 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 6879 0012 012B     		cmp	r3, #1
 6880 0014 01D1     		bne	.L351
 6881              		.loc 1 2876 3 is_stmt 0 discriminator 1
 6882 0016 0223     		movs	r3, #2
 6883              		.loc 1 2876 3
 6884 0018 20E0     		b	.L352
 6885              	.L351:
 6886              		.loc 1 2876 3 discriminator 2
 6887 001a 7B68     		ldr	r3, [r7, #4]
 6888 001c 0122     		movs	r2, #1
 6889 001e 83F84020 		strb	r2, [r3, #64]
2877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 6890              		.loc 1 2878 17 is_stmt 1
 6891 0022 7B68     		ldr	r3, [r7, #4]
 6892 0024 2422     		movs	r2, #36
 6893 0026 83F84120 		strb	r2, [r3, #65]
2879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 6894              		.loc 1 2881 17
 6895 002a 7B68     		ldr	r3, [r7, #4]
 6896 002c 1B68     		ldr	r3, [r3]
 6897              		.loc 1 2881 10
 6898 002e DB68     		ldr	r3, [r3, #12]
 6899 0030 FB60     		str	r3, [r7, #12]
2882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Clear TE and RE bits */
2884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 6900              		.loc 1 2884 10
 6901 0032 FB68     		ldr	r3, [r7, #12]
 6902 0034 23F00C03 		bic	r3, r3, #12
 6903 0038 FB60     		str	r3, [r7, #12]
2885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
2887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_RE;
 6904              		.loc 1 2887 10
 6905 003a FB68     		ldr	r3, [r7, #12]
 6906 003c 43F00403 		orr	r3, r3, #4
 6907 0040 FB60     		str	r3, [r7, #12]
2888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Write to USART CR1 */
2890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 6908              		.loc 1 2890 3
 6909 0042 7B68     		ldr	r3, [r7, #4]
 6910 0044 1B68     		ldr	r3, [r3]
 6911 0046 FA68     		ldr	r2, [r7, #12]
 6912 0048 DA60     		str	r2, [r3, #12]
2891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6913              		.loc 1 2892 17
 6914 004a 7B68     		ldr	r3, [r7, #4]
 6915 004c 2022     		movs	r2, #32
 6916 004e 83F84120 		strb	r2, [r3, #65]
2893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
ARM GAS  /tmp//ccY11c6d.s 			page 194


2895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 6917              		.loc 1 2895 3
 6918 0052 7B68     		ldr	r3, [r7, #4]
 6919 0054 0022     		movs	r2, #0
 6920 0056 83F84020 		strb	r2, [r3, #64]
2896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 6921              		.loc 1 2897 10
 6922 005a 0023     		movs	r3, #0
 6923              	.L352:
2898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6924              		.loc 1 2898 1
 6925 005c 1846     		mov	r0, r3
 6926 005e 1437     		adds	r7, r7, #20
 6927              	.LCFI222:
 6928              		.cfi_def_cfa_offset 4
 6929 0060 BD46     		mov	sp, r7
 6930              	.LCFI223:
 6931              		.cfi_def_cfa_register 13
 6932              		@ sp needed
 6933 0062 80BC     		pop	{r7}
 6934              	.LCFI224:
 6935              		.cfi_restore 7
 6936              		.cfi_def_cfa_offset 0
 6937 0064 7047     		bx	lr
 6938              		.cfi_endproc
 6939              	.LFE105:
 6941              		.section	.text.HAL_UART_GetState,"ax",%progbits
 6942              		.align	1
 6943              		.global	HAL_UART_GetState
 6944              		.syntax unified
 6945              		.thumb
 6946              		.thumb_func
 6948              	HAL_UART_GetState:
 6949              	.LFB106:
2899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Errors functions
2905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief   UART State and Errors functions
2906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
2907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
2908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                  ##### Peripheral State and Errors functions #####
2910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  [..]
2912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    This subsection provides a set of functions allowing to return the State of
2913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    UART communication process, return Peripheral Errors occurred during communication
2914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    process
2915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    (+) HAL_UART_GetState() API can be helpful to check in run-time the state of the UART peripheral
2916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    (+) HAL_UART_GetError() check in run-time errors that could be occurred during communication.
2917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
2919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
2920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
ARM GAS  /tmp//ccY11c6d.s 			page 195


2921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Returns the UART state.
2924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL state
2927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
2929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6950              		.loc 1 2929 1
 6951              		.cfi_startproc
 6952              		@ args = 0, pretend = 0, frame = 16
 6953              		@ frame_needed = 1, uses_anonymous_args = 0
 6954              		@ link register save eliminated.
 6955 0000 80B4     		push	{r7}
 6956              	.LCFI225:
 6957              		.cfi_def_cfa_offset 4
 6958              		.cfi_offset 7, -4
 6959 0002 85B0     		sub	sp, sp, #20
 6960              	.LCFI226:
 6961              		.cfi_def_cfa_offset 24
 6962 0004 00AF     		add	r7, sp, #0
 6963              	.LCFI227:
 6964              		.cfi_def_cfa_register 7
 6965 0006 7860     		str	r0, [r7, #4]
2930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
 6966              		.loc 1 2930 12
 6967 0008 0023     		movs	r3, #0
 6968 000a FB60     		str	r3, [r7, #12]
 6969              		.loc 1 2930 27
 6970 000c 0023     		movs	r3, #0
 6971 000e BB60     		str	r3, [r7, #8]
2931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   temp1 = huart->gState;
 6972              		.loc 1 2931 16
 6973 0010 7B68     		ldr	r3, [r7, #4]
 6974 0012 93F84130 		ldrb	r3, [r3, #65]
 6975 0016 DBB2     		uxtb	r3, r3
 6976              		.loc 1 2931 9
 6977 0018 FB60     		str	r3, [r7, #12]
2932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   temp2 = huart->RxState;
 6978              		.loc 1 2932 16
 6979 001a 7B68     		ldr	r3, [r7, #4]
 6980 001c 93F84230 		ldrb	r3, [r3, #66]
 6981 0020 DBB2     		uxtb	r3, r3
 6982              		.loc 1 2932 9
 6983 0022 BB60     		str	r3, [r7, #8]
2933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
 6984              		.loc 1 2934 10
 6985 0024 FB68     		ldr	r3, [r7, #12]
 6986 0026 DAB2     		uxtb	r2, r3
 6987 0028 BB68     		ldr	r3, [r7, #8]
 6988 002a DBB2     		uxtb	r3, r3
 6989 002c 1343     		orrs	r3, r3, r2
 6990 002e DBB2     		uxtb	r3, r3
2935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6991              		.loc 1 2935 1
ARM GAS  /tmp//ccY11c6d.s 			page 196


 6992 0030 1846     		mov	r0, r3
 6993 0032 1437     		adds	r7, r7, #20
 6994              	.LCFI228:
 6995              		.cfi_def_cfa_offset 4
 6996 0034 BD46     		mov	sp, r7
 6997              	.LCFI229:
 6998              		.cfi_def_cfa_register 13
 6999              		@ sp needed
 7000 0036 80BC     		pop	{r7}
 7001              	.LCFI230:
 7002              		.cfi_restore 7
 7003              		.cfi_def_cfa_offset 0
 7004 0038 7047     		bx	lr
 7005              		.cfi_endproc
 7006              	.LFE106:
 7008              		.section	.text.HAL_UART_GetError,"ax",%progbits
 7009              		.align	1
 7010              		.global	HAL_UART_GetError
 7011              		.syntax unified
 7012              		.thumb
 7013              		.thumb_func
 7015              	HAL_UART_GetError:
 7016              	.LFB107:
2936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Return the UART error code
2939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART.
2941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval UART Error Code
2942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
2944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 7017              		.loc 1 2944 1
 7018              		.cfi_startproc
 7019              		@ args = 0, pretend = 0, frame = 8
 7020              		@ frame_needed = 1, uses_anonymous_args = 0
 7021              		@ link register save eliminated.
 7022 0000 80B4     		push	{r7}
 7023              	.LCFI231:
 7024              		.cfi_def_cfa_offset 4
 7025              		.cfi_offset 7, -4
 7026 0002 83B0     		sub	sp, sp, #12
 7027              	.LCFI232:
 7028              		.cfi_def_cfa_offset 16
 7029 0004 00AF     		add	r7, sp, #0
 7030              	.LCFI233:
 7031              		.cfi_def_cfa_register 7
 7032 0006 7860     		str	r0, [r7, #4]
2945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return huart->ErrorCode;
 7033              		.loc 1 2945 15
 7034 0008 7B68     		ldr	r3, [r7, #4]
 7035 000a 5B6C     		ldr	r3, [r3, #68]
2946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 7036              		.loc 1 2946 1
 7037 000c 1846     		mov	r0, r3
 7038 000e 0C37     		adds	r7, r7, #12
 7039              	.LCFI234:
ARM GAS  /tmp//ccY11c6d.s 			page 197


 7040              		.cfi_def_cfa_offset 4
 7041 0010 BD46     		mov	sp, r7
 7042              	.LCFI235:
 7043              		.cfi_def_cfa_register 13
 7044              		@ sp needed
 7045 0012 80BC     		pop	{r7}
 7046              	.LCFI236:
 7047              		.cfi_restore 7
 7048              		.cfi_def_cfa_offset 0
 7049 0014 7047     		bx	lr
 7050              		.cfi_endproc
 7051              	.LFE107:
 7053              		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 7054              		.align	1
 7055              		.syntax unified
 7056              		.thumb
 7057              		.thumb_func
 7059              	UART_DMATransmitCplt:
 7060              	.LFB108:
2947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Private_Functions UART Private Functions
2957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
2958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initialize the callbacks to their default values.
2962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval none
2964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
2967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Init the UART Callback settings */
2969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltC
2970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallb
2971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltC
2972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallb
2973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallba
2974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCa
2975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransm
2976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiv
2977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCall
2978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART transmit process complete callback.
2984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
ARM GAS  /tmp//ccY11c6d.s 			page 198


2985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
2989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 7061              		.loc 1 2989 1
 7062              		.cfi_startproc
 7063              		@ args = 0, pretend = 0, frame = 64
 7064              		@ frame_needed = 1, uses_anonymous_args = 0
 7065 0000 80B5     		push	{r7, lr}
 7066              	.LCFI237:
 7067              		.cfi_def_cfa_offset 8
 7068              		.cfi_offset 7, -8
 7069              		.cfi_offset 14, -4
 7070 0002 90B0     		sub	sp, sp, #64
 7071              	.LCFI238:
 7072              		.cfi_def_cfa_offset 72
 7073 0004 00AF     		add	r7, sp, #0
 7074              	.LCFI239:
 7075              		.cfi_def_cfa_register 7
 7076 0006 7860     		str	r0, [r7, #4]
2990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 7077              		.loc 1 2990 23
 7078 0008 7B68     		ldr	r3, [r7, #4]
 7079 000a 5B6A     		ldr	r3, [r3, #36]
 7080 000c FB63     		str	r3, [r7, #60]
2991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
2992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 7081              		.loc 1 2992 12
 7082 000e 7B68     		ldr	r3, [r7, #4]
 7083 0010 1B68     		ldr	r3, [r3]
 7084              		.loc 1 2992 22
 7085 0012 1B68     		ldr	r3, [r3]
 7086              		.loc 1 2992 28
 7087 0014 03F02003 		and	r3, r3, #32
 7088              		.loc 1 2992 6
 7089 0018 002B     		cmp	r3, #0
 7090 001a 37D1     		bne	.L358
2993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 7091              		.loc 1 2994 24
 7092 001c FB6B     		ldr	r3, [r7, #60]
 7093 001e 0022     		movs	r2, #0
 7094 0020 DA84     		strh	r2, [r3, #38]	@ movhi
 7095              	.L361:
 7096              	.LBB549:
2995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by setting the DMAT bit
2997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
2998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 7097              		.loc 1 2998 5 discriminator 1
 7098 0022 FB6B     		ldr	r3, [r7, #60]
 7099 0024 1B68     		ldr	r3, [r3]
 7100 0026 1433     		adds	r3, r3, #20
 7101 0028 7B62     		str	r3, [r7, #36]
 7102              	.LBB550:
 7103              	.LBB551:
ARM GAS  /tmp//ccY11c6d.s 			page 199


1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7104              		.loc 2 1072 4
 7105 002a 7B6A     		ldr	r3, [r7, #36]
 7106              		.syntax unified
 7107              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7108 002c 53E8003F 		ldrex r3, [r3]
 7109              	@ 0 "" 2
 7110              		.thumb
 7111              		.syntax unified
 7112 0030 3B62     		str	r3, [r7, #32]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7113              		.loc 2 1073 10
 7114 0032 3B6A     		ldr	r3, [r7, #32]
 7115              	.LBE551:
 7116              	.LBE550:
 7117              		.loc 1 2998 5 discriminator 1
 7118 0034 23F08003 		bic	r3, r3, #128
 7119 0038 BB63     		str	r3, [r7, #56]
 7120 003a FB6B     		ldr	r3, [r7, #60]
 7121 003c 1B68     		ldr	r3, [r3]
 7122 003e 1433     		adds	r3, r3, #20
 7123 0040 BA6B     		ldr	r2, [r7, #56]
 7124 0042 3A63     		str	r2, [r7, #48]
 7125 0044 FB62     		str	r3, [r7, #44]
 7126              	.LBB552:
 7127              	.LBB553:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7128              		.loc 2 1123 4
 7129 0046 F96A     		ldr	r1, [r7, #44]
 7130 0048 3A6B     		ldr	r2, [r7, #48]
 7131              		.syntax unified
 7132              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7133 004a 41E80023 		strex r3, r2, [r1]
 7134              	@ 0 "" 2
 7135              		.thumb
 7136              		.syntax unified
 7137 004e BB62     		str	r3, [r7, #40]
 7138              		.loc 2 1124 10
 7139 0050 BB6A     		ldr	r3, [r7, #40]
 7140              	.LBE553:
 7141              	.LBE552:
 7142              		.loc 1 2998 5 discriminator 1
 7143 0052 002B     		cmp	r3, #0
 7144 0054 E5D1     		bne	.L361
 7145              	.L364:
 7146              	.LBE549:
 7147              	.LBB554:
2999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
3001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 7148              		.loc 1 3001 5 discriminator 1
 7149 0056 FB6B     		ldr	r3, [r7, #60]
 7150 0058 1B68     		ldr	r3, [r3]
 7151 005a 0C33     		adds	r3, r3, #12
 7152 005c 3B61     		str	r3, [r7, #16]
 7153              	.LBB555:
 7154              	.LBB556:
ARM GAS  /tmp//ccY11c6d.s 			page 200


1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7155              		.loc 2 1072 4
 7156 005e 3B69     		ldr	r3, [r7, #16]
 7157              		.syntax unified
 7158              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7159 0060 53E8003F 		ldrex r3, [r3]
 7160              	@ 0 "" 2
 7161              		.thumb
 7162              		.syntax unified
 7163 0064 FB60     		str	r3, [r7, #12]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7164              		.loc 2 1073 10
 7165 0066 FB68     		ldr	r3, [r7, #12]
 7166              	.LBE556:
 7167              	.LBE555:
 7168              		.loc 1 3001 5 discriminator 1
 7169 0068 43F04003 		orr	r3, r3, #64
 7170 006c 7B63     		str	r3, [r7, #52]
 7171 006e FB6B     		ldr	r3, [r7, #60]
 7172 0070 1B68     		ldr	r3, [r3]
 7173 0072 0C33     		adds	r3, r3, #12
 7174 0074 7A6B     		ldr	r2, [r7, #52]
 7175 0076 FA61     		str	r2, [r7, #28]
 7176 0078 BB61     		str	r3, [r7, #24]
 7177              	.LBB557:
 7178              	.LBB558:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7179              		.loc 2 1123 4
 7180 007a B969     		ldr	r1, [r7, #24]
 7181 007c FA69     		ldr	r2, [r7, #28]
 7182              		.syntax unified
 7183              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7184 007e 41E80023 		strex r3, r2, [r1]
 7185              	@ 0 "" 2
 7186              		.thumb
 7187              		.syntax unified
 7188 0082 7B61     		str	r3, [r7, #20]
 7189              		.loc 2 1124 10
 7190 0084 7B69     		ldr	r3, [r7, #20]
 7191              	.LBE558:
 7192              	.LBE557:
 7193              		.loc 1 3001 5 discriminator 1
 7194 0086 002B     		cmp	r3, #0
 7195 0088 E5D1     		bne	.L364
 7196              	.LBE554:
3002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Circular mode */
3005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Tx complete callback*/
3009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxCpltCallback(huart);
3010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Tx complete callback*/
3012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
3013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
ARM GAS  /tmp//ccY11c6d.s 			page 201


3014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 7197              		.loc 1 3015 1
 7198 008a 02E0     		b	.L366
 7199              	.L358:
3012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 7200              		.loc 1 3012 5
 7201 008c F86B     		ldr	r0, [r7, #60]
 7202 008e FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 7203              	.L366:
 7204              		.loc 1 3015 1
 7205 0092 00BF     		nop
 7206 0094 4037     		adds	r7, r7, #64
 7207              	.LCFI240:
 7208              		.cfi_def_cfa_offset 8
 7209 0096 BD46     		mov	sp, r7
 7210              	.LCFI241:
 7211              		.cfi_def_cfa_register 13
 7212              		@ sp needed
 7213 0098 80BD     		pop	{r7, pc}
 7214              		.cfi_endproc
 7215              	.LFE108:
 7217              		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 7218              		.align	1
 7219              		.syntax unified
 7220              		.thumb
 7221              		.thumb_func
 7223              	UART_DMATxHalfCplt:
 7224              	.LFB109:
3016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback
3019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
3024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 7225              		.loc 1 3024 1
 7226              		.cfi_startproc
 7227              		@ args = 0, pretend = 0, frame = 16
 7228              		@ frame_needed = 1, uses_anonymous_args = 0
 7229 0000 80B5     		push	{r7, lr}
 7230              	.LCFI242:
 7231              		.cfi_def_cfa_offset 8
 7232              		.cfi_offset 7, -8
 7233              		.cfi_offset 14, -4
 7234 0002 84B0     		sub	sp, sp, #16
 7235              	.LCFI243:
 7236              		.cfi_def_cfa_offset 24
 7237 0004 00AF     		add	r7, sp, #0
 7238              	.LCFI244:
 7239              		.cfi_def_cfa_register 7
 7240 0006 7860     		str	r0, [r7, #4]
3025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 7241              		.loc 1 3025 23
 7242 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp//ccY11c6d.s 			page 202


 7243 000a 5B6A     		ldr	r3, [r3, #36]
 7244 000c FB60     		str	r3, [r7, #12]
3026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered Tx complete callback*/
3029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxHalfCpltCallback(huart);
3030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
3032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
 7245              		.loc 1 3032 3
 7246 000e F868     		ldr	r0, [r7, #12]
 7247 0010 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
3033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 7248              		.loc 1 3034 1
 7249 0014 00BF     		nop
 7250 0016 1037     		adds	r7, r7, #16
 7251              	.LCFI245:
 7252              		.cfi_def_cfa_offset 8
 7253 0018 BD46     		mov	sp, r7
 7254              	.LCFI246:
 7255              		.cfi_def_cfa_register 13
 7256              		@ sp needed
 7257 001a 80BD     		pop	{r7, pc}
 7258              		.cfi_endproc
 7259              	.LFE109:
 7261              		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 7262              		.align	1
 7263              		.syntax unified
 7264              		.thumb
 7265              		.thumb_func
 7267              	UART_DMAReceiveCplt:
 7268              	.LFB110:
3035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART receive process complete callback.
3038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
3043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 7269              		.loc 1 3043 1
 7270              		.cfi_startproc
 7271              		@ args = 0, pretend = 0, frame = 112
 7272              		@ frame_needed = 1, uses_anonymous_args = 0
 7273 0000 80B5     		push	{r7, lr}
 7274              	.LCFI247:
 7275              		.cfi_def_cfa_offset 8
 7276              		.cfi_offset 7, -8
 7277              		.cfi_offset 14, -4
 7278 0002 9CB0     		sub	sp, sp, #112
 7279              	.LCFI248:
 7280              		.cfi_def_cfa_offset 120
 7281 0004 00AF     		add	r7, sp, #0
 7282              	.LCFI249:
 7283              		.cfi_def_cfa_register 7
ARM GAS  /tmp//ccY11c6d.s 			page 203


 7284 0006 7860     		str	r0, [r7, #4]
3044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 7285              		.loc 1 3044 23
 7286 0008 7B68     		ldr	r3, [r7, #4]
 7287 000a 5B6A     		ldr	r3, [r3, #36]
 7288 000c FB66     		str	r3, [r7, #108]
3045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
3047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 7289              		.loc 1 3047 12
 7290 000e 7B68     		ldr	r3, [r7, #4]
 7291 0010 1B68     		ldr	r3, [r3]
 7292              		.loc 1 3047 22
 7293 0012 1B68     		ldr	r3, [r3]
 7294              		.loc 1 3047 28
 7295 0014 03F02003 		and	r3, r3, #32
 7296              		.loc 1 3047 6
 7297 0018 002B     		cmp	r3, #0
 7298 001a 72D1     		bne	.L369
3048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0U;
 7299              		.loc 1 3049 24
 7300 001c FB6E     		ldr	r3, [r7, #108]
 7301 001e 0022     		movs	r2, #0
 7302 0020 DA85     		strh	r2, [r3, #46]	@ movhi
 7303              	.L372:
 7304              	.LBB559:
3050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
3052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 7305              		.loc 1 3052 5 discriminator 1
 7306 0022 FB6E     		ldr	r3, [r7, #108]
 7307 0024 1B68     		ldr	r3, [r3]
 7308 0026 0C33     		adds	r3, r3, #12
 7309 0028 FB64     		str	r3, [r7, #76]
 7310              	.LBB560:
 7311              	.LBB561:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7312              		.loc 2 1072 4
 7313 002a FB6C     		ldr	r3, [r7, #76]
 7314              		.syntax unified
 7315              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7316 002c 53E8003F 		ldrex r3, [r3]
 7317              	@ 0 "" 2
 7318              		.thumb
 7319              		.syntax unified
 7320 0030 BB64     		str	r3, [r7, #72]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7321              		.loc 2 1073 10
 7322 0032 BB6C     		ldr	r3, [r7, #72]
 7323              	.LBE561:
 7324              	.LBE560:
 7325              		.loc 1 3052 5 discriminator 1
 7326 0034 23F48073 		bic	r3, r3, #256
 7327 0038 BB66     		str	r3, [r7, #104]
 7328 003a FB6E     		ldr	r3, [r7, #108]
 7329 003c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp//ccY11c6d.s 			page 204


 7330 003e 0C33     		adds	r3, r3, #12
 7331 0040 BA6E     		ldr	r2, [r7, #104]
 7332 0042 BA65     		str	r2, [r7, #88]
 7333 0044 7B65     		str	r3, [r7, #84]
 7334              	.LBB562:
 7335              	.LBB563:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7336              		.loc 2 1123 4
 7337 0046 796D     		ldr	r1, [r7, #84]
 7338 0048 BA6D     		ldr	r2, [r7, #88]
 7339              		.syntax unified
 7340              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7341 004a 41E80023 		strex r3, r2, [r1]
 7342              	@ 0 "" 2
 7343              		.thumb
 7344              		.syntax unified
 7345 004e 3B65     		str	r3, [r7, #80]
 7346              		.loc 2 1124 10
 7347 0050 3B6D     		ldr	r3, [r7, #80]
 7348              	.LBE563:
 7349              	.LBE562:
 7350              		.loc 1 3052 5 discriminator 1
 7351 0052 002B     		cmp	r3, #0
 7352 0054 E5D1     		bne	.L372
 7353              	.L375:
 7354              	.LBE559:
 7355              	.LBB564:
3053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 7356              		.loc 1 3053 5 discriminator 1
 7357 0056 FB6E     		ldr	r3, [r7, #108]
 7358 0058 1B68     		ldr	r3, [r3]
 7359 005a 1433     		adds	r3, r3, #20
 7360 005c BB63     		str	r3, [r7, #56]
 7361              	.LBB565:
 7362              	.LBB566:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7363              		.loc 2 1072 4
 7364 005e BB6B     		ldr	r3, [r7, #56]
 7365              		.syntax unified
 7366              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7367 0060 53E8003F 		ldrex r3, [r3]
 7368              	@ 0 "" 2
 7369              		.thumb
 7370              		.syntax unified
 7371 0064 7B63     		str	r3, [r7, #52]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7372              		.loc 2 1073 10
 7373 0066 7B6B     		ldr	r3, [r7, #52]
 7374              	.LBE566:
 7375              	.LBE565:
 7376              		.loc 1 3053 5 discriminator 1
 7377 0068 23F00103 		bic	r3, r3, #1
 7378 006c 7B66     		str	r3, [r7, #100]
 7379 006e FB6E     		ldr	r3, [r7, #108]
 7380 0070 1B68     		ldr	r3, [r3]
 7381 0072 1433     		adds	r3, r3, #20
 7382 0074 7A6E     		ldr	r2, [r7, #100]
ARM GAS  /tmp//ccY11c6d.s 			page 205


 7383 0076 7A64     		str	r2, [r7, #68]
 7384 0078 3B64     		str	r3, [r7, #64]
 7385              	.LBB567:
 7386              	.LBB568:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7387              		.loc 2 1123 4
 7388 007a 396C     		ldr	r1, [r7, #64]
 7389 007c 7A6C     		ldr	r2, [r7, #68]
 7390              		.syntax unified
 7391              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7392 007e 41E80023 		strex r3, r2, [r1]
 7393              	@ 0 "" 2
 7394              		.thumb
 7395              		.syntax unified
 7396 0082 FB63     		str	r3, [r7, #60]
 7397              		.loc 2 1124 10
 7398 0084 FB6B     		ldr	r3, [r7, #60]
 7399              	.LBE568:
 7400              	.LBE567:
 7401              		.loc 1 3053 5 discriminator 1
 7402 0086 002B     		cmp	r3, #0
 7403 0088 E5D1     		bne	.L375
 7404              	.L378:
 7405              	.LBE564:
 7406              	.LBB569:
3054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by setting the DMAR bit
3056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
3057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 7407              		.loc 1 3057 5 discriminator 1
 7408 008a FB6E     		ldr	r3, [r7, #108]
 7409 008c 1B68     		ldr	r3, [r3]
 7410 008e 1433     		adds	r3, r3, #20
 7411 0090 7B62     		str	r3, [r7, #36]
 7412              	.LBB570:
 7413              	.LBB571:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7414              		.loc 2 1072 4
 7415 0092 7B6A     		ldr	r3, [r7, #36]
 7416              		.syntax unified
 7417              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7418 0094 53E8003F 		ldrex r3, [r3]
 7419              	@ 0 "" 2
 7420              		.thumb
 7421              		.syntax unified
 7422 0098 3B62     		str	r3, [r7, #32]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7423              		.loc 2 1073 10
 7424 009a 3B6A     		ldr	r3, [r7, #32]
 7425              	.LBE571:
 7426              	.LBE570:
 7427              		.loc 1 3057 5 discriminator 1
 7428 009c 23F04003 		bic	r3, r3, #64
 7429 00a0 3B66     		str	r3, [r7, #96]
 7430 00a2 FB6E     		ldr	r3, [r7, #108]
 7431 00a4 1B68     		ldr	r3, [r3]
 7432 00a6 1433     		adds	r3, r3, #20
ARM GAS  /tmp//ccY11c6d.s 			page 206


 7433 00a8 3A6E     		ldr	r2, [r7, #96]
 7434 00aa 3A63     		str	r2, [r7, #48]
 7435 00ac FB62     		str	r3, [r7, #44]
 7436              	.LBB572:
 7437              	.LBB573:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7438              		.loc 2 1123 4
 7439 00ae F96A     		ldr	r1, [r7, #44]
 7440 00b0 3A6B     		ldr	r2, [r7, #48]
 7441              		.syntax unified
 7442              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7443 00b2 41E80023 		strex r3, r2, [r1]
 7444              	@ 0 "" 2
 7445              		.thumb
 7446              		.syntax unified
 7447 00b6 BB62     		str	r3, [r7, #40]
 7448              		.loc 2 1124 10
 7449 00b8 BB6A     		ldr	r3, [r7, #40]
 7450              	.LBE573:
 7451              	.LBE572:
 7452              		.loc 1 3057 5 discriminator 1
 7453 00ba 002B     		cmp	r3, #0
 7454 00bc E5D1     		bne	.L378
 7455              	.LBE569:
3058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
3060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 7456              		.loc 1 3060 20
 7457 00be FB6E     		ldr	r3, [r7, #108]
 7458 00c0 2022     		movs	r2, #32
 7459 00c2 83F84220 		strb	r2, [r3, #66]
3061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
3063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 7460              		.loc 1 3063 14
 7461 00c6 FB6E     		ldr	r3, [r7, #108]
 7462 00c8 1B6B     		ldr	r3, [r3, #48]
 7463              		.loc 1 3063 8
 7464 00ca 012B     		cmp	r3, #1
 7465 00cc 19D1     		bne	.L369
 7466              	.L381:
 7467              	.LBB574:
3064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 7468              		.loc 1 3065 7 discriminator 1
 7469 00ce FB6E     		ldr	r3, [r7, #108]
 7470 00d0 1B68     		ldr	r3, [r3]
 7471 00d2 0C33     		adds	r3, r3, #12
 7472 00d4 3B61     		str	r3, [r7, #16]
 7473              	.LBB575:
 7474              	.LBB576:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7475              		.loc 2 1072 4
 7476 00d6 3B69     		ldr	r3, [r7, #16]
 7477              		.syntax unified
 7478              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7479 00d8 53E8003F 		ldrex r3, [r3]
ARM GAS  /tmp//ccY11c6d.s 			page 207


 7480              	@ 0 "" 2
 7481              		.thumb
 7482              		.syntax unified
 7483 00dc FB60     		str	r3, [r7, #12]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7484              		.loc 2 1073 10
 7485 00de FB68     		ldr	r3, [r7, #12]
 7486              	.LBE576:
 7487              	.LBE575:
 7488              		.loc 1 3065 7 discriminator 1
 7489 00e0 23F01003 		bic	r3, r3, #16
 7490 00e4 FB65     		str	r3, [r7, #92]
 7491 00e6 FB6E     		ldr	r3, [r7, #108]
 7492 00e8 1B68     		ldr	r3, [r3]
 7493 00ea 0C33     		adds	r3, r3, #12
 7494 00ec FA6D     		ldr	r2, [r7, #92]
 7495 00ee FA61     		str	r2, [r7, #28]
 7496 00f0 BB61     		str	r3, [r7, #24]
 7497              	.LBB577:
 7498              	.LBB578:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7499              		.loc 2 1123 4
 7500 00f2 B969     		ldr	r1, [r7, #24]
 7501 00f4 FA69     		ldr	r2, [r7, #28]
 7502              		.syntax unified
 7503              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7504 00f6 41E80023 		strex r3, r2, [r1]
 7505              	@ 0 "" 2
 7506              		.thumb
 7507              		.syntax unified
 7508 00fa 7B61     		str	r3, [r7, #20]
 7509              		.loc 2 1124 10
 7510 00fc 7B69     		ldr	r3, [r7, #20]
 7511              	.LBE578:
 7512              	.LBE577:
 7513              		.loc 1 3065 7 discriminator 1
 7514 00fe 002B     		cmp	r3, #0
 7515 0100 E5D1     		bne	.L381
 7516              	.L369:
 7517              	.LBE574:
3066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize type of RxEvent that correspond to RxEvent callback execution;
3070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    In this case, Rx Event type is Transfer Complete */
3071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventType = HAL_UART_RXEVENT_TC;
 7518              		.loc 1 3071 22
 7519 0102 FB6E     		ldr	r3, [r7, #108]
 7520 0104 0022     		movs	r2, #0
 7521 0106 5A63     		str	r2, [r3, #52]
3072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check current reception Mode :
3074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      If Reception till IDLE event has been selected : use Rx Event callback */
3075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 7522              		.loc 1 3075 12
 7523 0108 FB6E     		ldr	r3, [r7, #108]
 7524 010a 1B6B     		ldr	r3, [r3, #48]
ARM GAS  /tmp//ccY11c6d.s 			page 208


 7525              		.loc 1 3075 6
 7526 010c 012B     		cmp	r3, #1
 7527 010e 06D1     		bne	.L382
3076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx Event callback*/
3079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback(huart, huart->RxXferSize);
3080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx Event callback*/
3082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 7528              		.loc 1 3082 5
 7529 0110 FB6E     		ldr	r3, [r7, #108]
 7530 0112 9B8D     		ldrh	r3, [r3, #44]
 7531 0114 1946     		mov	r1, r3
 7532 0116 F86E     		ldr	r0, [r7, #108]
 7533 0118 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
3083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In other cases : use Rx Complete callback */
3088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx complete callback*/
3090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxCpltCallback(huart);
3091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx complete callback*/
3093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_RxCpltCallback(huart);
3094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 7534              		.loc 1 3096 1
 7535 011c 02E0     		b	.L384
 7536              	.L382:
3093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 7537              		.loc 1 3093 5
 7538 011e F86E     		ldr	r0, [r7, #108]
 7539 0120 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 7540              	.L384:
 7541              		.loc 1 3096 1
 7542 0124 00BF     		nop
 7543 0126 7037     		adds	r7, r7, #112
 7544              	.LCFI250:
 7545              		.cfi_def_cfa_offset 8
 7546 0128 BD46     		mov	sp, r7
 7547              	.LCFI251:
 7548              		.cfi_def_cfa_register 13
 7549              		@ sp needed
 7550 012a 80BD     		pop	{r7, pc}
 7551              		.cfi_endproc
 7552              	.LFE110:
 7554              		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
 7555              		.align	1
 7556              		.syntax unified
 7557              		.thumb
 7558              		.thumb_func
 7560              	UART_DMARxHalfCplt:
 7561              	.LFB111:
ARM GAS  /tmp//ccY11c6d.s 			page 209


3097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback
3100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
3105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 7562              		.loc 1 3105 1
 7563              		.cfi_startproc
 7564              		@ args = 0, pretend = 0, frame = 16
 7565              		@ frame_needed = 1, uses_anonymous_args = 0
 7566 0000 80B5     		push	{r7, lr}
 7567              	.LCFI252:
 7568              		.cfi_def_cfa_offset 8
 7569              		.cfi_offset 7, -8
 7570              		.cfi_offset 14, -4
 7571 0002 84B0     		sub	sp, sp, #16
 7572              	.LCFI253:
 7573              		.cfi_def_cfa_offset 24
 7574 0004 00AF     		add	r7, sp, #0
 7575              	.LCFI254:
 7576              		.cfi_def_cfa_register 7
 7577 0006 7860     		str	r0, [r7, #4]
3106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 7578              		.loc 1 3106 23
 7579 0008 7B68     		ldr	r3, [r7, #4]
 7580 000a 5B6A     		ldr	r3, [r3, #36]
 7581 000c FB60     		str	r3, [r7, #12]
3107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize type of RxEvent that correspond to RxEvent callback execution;
3109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      In this case, Rx Event type is Half Transfer */
3110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventType = HAL_UART_RXEVENT_HT;
 7582              		.loc 1 3110 22
 7583 000e FB68     		ldr	r3, [r7, #12]
 7584 0010 0122     		movs	r2, #1
 7585 0012 5A63     		str	r2, [r3, #52]
3111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check current reception Mode :
3113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      If Reception till IDLE event has been selected : use Rx Event callback */
3114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 7586              		.loc 1 3114 12
 7587 0014 FB68     		ldr	r3, [r7, #12]
 7588 0016 1B6B     		ldr	r3, [r3, #48]
 7589              		.loc 1 3114 6
 7590 0018 012B     		cmp	r3, #1
 7591 001a 08D1     		bne	.L386
3115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx Event callback*/
3118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback(huart, huart->RxXferSize / 2U);
3119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx Event callback*/
3121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 7592              		.loc 1 3121 44
 7593 001c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp//ccY11c6d.s 			page 210


 7594 001e 9B8D     		ldrh	r3, [r3, #44]
 7595              		.loc 1 3121 5
 7596 0020 5B08     		lsrs	r3, r3, #1
 7597 0022 9BB2     		uxth	r3, r3
 7598 0024 1946     		mov	r1, r3
 7599 0026 F868     		ldr	r0, [r7, #12]
 7600 0028 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
3122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In other cases : use Rx Half Complete callback */
3127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx Half complete callback*/
3129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxHalfCpltCallback(huart);
3130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx Half complete callback*/
3132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_RxHalfCpltCallback(huart);
3133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 7601              		.loc 1 3135 1
 7602 002c 02E0     		b	.L388
 7603              	.L386:
3132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 7604              		.loc 1 3132 5
 7605 002e F868     		ldr	r0, [r7, #12]
 7606 0030 FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
 7607              	.L388:
 7608              		.loc 1 3135 1
 7609 0034 00BF     		nop
 7610 0036 1037     		adds	r7, r7, #16
 7611              	.LCFI255:
 7612              		.cfi_def_cfa_offset 8
 7613 0038 BD46     		mov	sp, r7
 7614              	.LCFI256:
 7615              		.cfi_def_cfa_register 13
 7616              		@ sp needed
 7617 003a 80BD     		pop	{r7, pc}
 7618              		.cfi_endproc
 7619              	.LFE111:
 7621              		.section	.text.UART_DMAError,"ax",%progbits
 7622              		.align	1
 7623              		.syntax unified
 7624              		.thumb
 7625              		.thumb_func
 7627              	UART_DMAError:
 7628              	.LFB112:
3136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART communication error callback.
3139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
3144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
ARM GAS  /tmp//ccY11c6d.s 			page 211


 7629              		.loc 1 3144 1
 7630              		.cfi_startproc
 7631              		@ args = 0, pretend = 0, frame = 16
 7632              		@ frame_needed = 1, uses_anonymous_args = 0
 7633 0000 80B5     		push	{r7, lr}
 7634              	.LCFI257:
 7635              		.cfi_def_cfa_offset 8
 7636              		.cfi_offset 7, -8
 7637              		.cfi_offset 14, -4
 7638 0002 84B0     		sub	sp, sp, #16
 7639              	.LCFI258:
 7640              		.cfi_def_cfa_offset 24
 7641 0004 00AF     		add	r7, sp, #0
 7642              	.LCFI259:
 7643              		.cfi_def_cfa_register 7
 7644 0006 7860     		str	r0, [r7, #4]
3145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 7645              		.loc 1 3145 12
 7646 0008 0023     		movs	r3, #0
 7647 000a FB60     		str	r3, [r7, #12]
3146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 7648              		.loc 1 3146 23
 7649 000c 7B68     		ldr	r3, [r7, #4]
 7650 000e 5B6A     		ldr	r3, [r3, #36]
 7651 0010 BB60     		str	r3, [r7, #8]
3147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
3149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 7652              		.loc 1 3149 16
 7653 0012 BB68     		ldr	r3, [r7, #8]
 7654 0014 1B68     		ldr	r3, [r3]
 7655 0016 5B69     		ldr	r3, [r3, #20]
 7656 0018 03F08003 		and	r3, r3, #128
 7657 001c 002B     		cmp	r3, #0
 7658 001e 14BF     		ite	ne
 7659 0020 0123     		movne	r3, #1
 7660 0022 0023     		moveq	r3, #0
 7661 0024 DBB2     		uxtb	r3, r3
 7662              		.loc 1 3149 14
 7663 0026 FB60     		str	r3, [r7, #12]
3150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 7664              		.loc 1 3150 13
 7665 0028 BB68     		ldr	r3, [r7, #8]
 7666 002a 93F84130 		ldrb	r3, [r3, #65]
 7667 002e DBB2     		uxtb	r3, r3
 7668              		.loc 1 3150 6
 7669 0030 212B     		cmp	r3, #33
 7670 0032 08D1     		bne	.L390
 7671              		.loc 1 3150 49 discriminator 1
 7672 0034 FB68     		ldr	r3, [r7, #12]
 7673 0036 002B     		cmp	r3, #0
 7674 0038 05D0     		beq	.L390
3151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 7675              		.loc 1 3152 24
 7676 003a BB68     		ldr	r3, [r7, #8]
 7677 003c 0022     		movs	r2, #0
ARM GAS  /tmp//ccY11c6d.s 			page 212


 7678 003e DA84     		strh	r2, [r3, #38]	@ movhi
3153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 7679              		.loc 1 3153 5
 7680 0040 B868     		ldr	r0, [r7, #8]
 7681 0042 FFF7FEFF 		bl	UART_EndTxTransfer
 7682              	.L390:
3154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
3157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 7683              		.loc 1 3157 16
 7684 0046 BB68     		ldr	r3, [r7, #8]
 7685 0048 1B68     		ldr	r3, [r3]
 7686 004a 5B69     		ldr	r3, [r3, #20]
 7687 004c 03F04003 		and	r3, r3, #64
 7688 0050 002B     		cmp	r3, #0
 7689 0052 14BF     		ite	ne
 7690 0054 0123     		movne	r3, #1
 7691 0056 0023     		moveq	r3, #0
 7692 0058 DBB2     		uxtb	r3, r3
 7693              		.loc 1 3157 14
 7694 005a FB60     		str	r3, [r7, #12]
3158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 7695              		.loc 1 3158 13
 7696 005c BB68     		ldr	r3, [r7, #8]
 7697 005e 93F84230 		ldrb	r3, [r3, #66]
 7698 0062 DBB2     		uxtb	r3, r3
 7699              		.loc 1 3158 6
 7700 0064 222B     		cmp	r3, #34
 7701 0066 08D1     		bne	.L391
 7702              		.loc 1 3158 50 discriminator 1
 7703 0068 FB68     		ldr	r3, [r7, #12]
 7704 006a 002B     		cmp	r3, #0
 7705 006c 05D0     		beq	.L391
3159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 7706              		.loc 1 3160 24
 7707 006e BB68     		ldr	r3, [r7, #8]
 7708 0070 0022     		movs	r2, #0
 7709 0072 DA85     		strh	r2, [r3, #46]	@ movhi
3161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 7710              		.loc 1 3161 5
 7711 0074 B868     		ldr	r0, [r7, #8]
 7712 0076 FFF7FEFF 		bl	UART_EndRxTransfer
 7713              	.L391:
3162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
 7714              		.loc 1 3164 8
 7715 007a BB68     		ldr	r3, [r7, #8]
 7716 007c 5B6C     		ldr	r3, [r3, #68]
 7717              		.loc 1 3164 20
 7718 007e 43F01002 		orr	r2, r3, #16
 7719 0082 BB68     		ldr	r3, [r7, #8]
 7720 0084 5A64     		str	r2, [r3, #68]
3165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered error callback*/
ARM GAS  /tmp//ccY11c6d.s 			page 213


3167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback(huart);
3168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak error callback*/
3170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 7721              		.loc 1 3170 3
 7722 0086 B868     		ldr	r0, [r7, #8]
 7723 0088 FFF7FEFF 		bl	HAL_UART_ErrorCallback
3171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 7724              		.loc 1 3172 1
 7725 008c 00BF     		nop
 7726 008e 1037     		adds	r7, r7, #16
 7727              	.LCFI260:
 7728              		.cfi_def_cfa_offset 8
 7729 0090 BD46     		mov	sp, r7
 7730              	.LCFI261:
 7731              		.cfi_def_cfa_register 13
 7732              		@ sp needed
 7733 0092 80BD     		pop	{r7, pc}
 7734              		.cfi_endproc
 7735              	.LFE112:
 7737              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 7738              		.align	1
 7739              		.syntax unified
 7740              		.thumb
 7741              		.thumb_func
 7743              	UART_WaitOnFlagUntilTimeout:
 7744              	.LFB113:
3173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  This function handles UART Communication Timeout. It waits
3176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         until a flag is no longer in the specified status.
3177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Flag specifies the UART flag to check.
3180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Status The actual Flag status (SET or RESET).
3181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Tickstart Tick start value
3182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
3183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
3186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                                                      uint32_t Tickstart, uint32_t Timeout)
3187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 7745              		.loc 1 3187 1
 7746              		.cfi_startproc
 7747              		@ args = 4, pretend = 0, frame = 24
 7748              		@ frame_needed = 1, uses_anonymous_args = 0
 7749 0000 80B5     		push	{r7, lr}
 7750              	.LCFI262:
 7751              		.cfi_def_cfa_offset 8
 7752              		.cfi_offset 7, -8
 7753              		.cfi_offset 14, -4
 7754 0002 86B0     		sub	sp, sp, #24
 7755              	.LCFI263:
 7756              		.cfi_def_cfa_offset 32
 7757 0004 00AF     		add	r7, sp, #0
 7758              	.LCFI264:
ARM GAS  /tmp//ccY11c6d.s 			page 214


 7759              		.cfi_def_cfa_register 7
 7760 0006 F860     		str	r0, [r7, #12]
 7761 0008 B960     		str	r1, [r7, #8]
 7762 000a 3B60     		str	r3, [r7]
 7763 000c 1346     		mov	r3, r2
 7764 000e FB71     		strb	r3, [r7, #7]
3188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Wait until flag is set */
3189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 7765              		.loc 1 3189 9
 7766 0010 3BE0     		b	.L394
 7767              	.L399:
3190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check for the Timeout */
3192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (Timeout != HAL_MAX_DELAY)
 7768              		.loc 1 3192 8
 7769 0012 3B6A     		ldr	r3, [r7, #32]
 7770 0014 B3F1FF3F 		cmp	r3, #-1
 7771 0018 37D0     		beq	.L394
3193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 7772              		.loc 1 3194 13
 7773 001a FFF7FEFF 		bl	HAL_GetTick
 7774 001e 0246     		mov	r2, r0
 7775              		.loc 1 3194 27 discriminator 1
 7776 0020 3B68     		ldr	r3, [r7]
 7777 0022 D31A     		subs	r3, r2, r3
 7778              		.loc 1 3194 10 discriminator 1
 7779 0024 3A6A     		ldr	r2, [r7, #32]
 7780 0026 9A42     		cmp	r2, r3
 7781 0028 02D3     		bcc	.L395
 7782              		.loc 1 3194 51 discriminator 1
 7783 002a 3B6A     		ldr	r3, [r7, #32]
 7784 002c 002B     		cmp	r3, #0
 7785 002e 01D1     		bne	.L396
 7786              	.L395:
3195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         return HAL_TIMEOUT;
 7787              		.loc 1 3197 16
 7788 0030 0323     		movs	r3, #3
 7789 0032 3AE0     		b	.L397
 7790              	.L396:
3198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag 
 7791              		.loc 1 3200 12
 7792 0034 FB68     		ldr	r3, [r7, #12]
 7793 0036 1B68     		ldr	r3, [r3]
 7794 0038 DB68     		ldr	r3, [r3, #12]
 7795 003a 03F00403 		and	r3, r3, #4
 7796              		.loc 1 3200 10
 7797 003e 002B     		cmp	r3, #0
 7798 0040 23D0     		beq	.L394
 7799              		.loc 1 3200 64 discriminator 1
 7800 0042 BB68     		ldr	r3, [r7, #8]
 7801 0044 802B     		cmp	r3, #128
 7802 0046 20D0     		beq	.L394
ARM GAS  /tmp//ccY11c6d.s 			page 215


 7803              		.loc 1 3200 91 discriminator 2
 7804 0048 BB68     		ldr	r3, [r7, #8]
 7805 004a 402B     		cmp	r3, #64
 7806 004c 1DD0     		beq	.L394
3201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 7807              		.loc 1 3202 13
 7808 004e FB68     		ldr	r3, [r7, #12]
 7809 0050 1B68     		ldr	r3, [r3]
 7810 0052 1B68     		ldr	r3, [r3]
 7811 0054 03F00803 		and	r3, r3, #8
 7812              		.loc 1 3202 12
 7813 0058 082B     		cmp	r3, #8
 7814 005a 16D1     		bne	.L394
 7815              	.LBB579:
3203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
3204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Clear Overrun Error flag*/
3205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           __HAL_UART_CLEAR_OREFLAG(huart);
 7816              		.loc 1 3205 11
 7817 005c 0023     		movs	r3, #0
 7818 005e 7B61     		str	r3, [r7, #20]
 7819 0060 FB68     		ldr	r3, [r7, #12]
 7820 0062 1B68     		ldr	r3, [r3]
 7821 0064 1B68     		ldr	r3, [r3]
 7822 0066 7B61     		str	r3, [r7, #20]
 7823 0068 FB68     		ldr	r3, [r7, #12]
 7824 006a 1B68     		ldr	r3, [r3]
 7825 006c 5B68     		ldr	r3, [r3, #4]
 7826 006e 7B61     		str	r3, [r7, #20]
 7827 0070 7B69     		ldr	r3, [r7, #20]
 7828              	.LBE579:
3206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Blocking error : transfer is aborted
3208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           Set the UART state ready to be able to start again the process,
3209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           Disable Rx Interrupts if ongoing */
3210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           UART_EndRxTransfer(huart);
 7829              		.loc 1 3210 11
 7830 0072 F868     		ldr	r0, [r7, #12]
 7831 0074 FFF7FEFF 		bl	UART_EndRxTransfer
3211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_ORE;
 7832              		.loc 1 3212 28
 7833 0078 FB68     		ldr	r3, [r7, #12]
 7834 007a 0822     		movs	r2, #8
 7835 007c 5A64     		str	r2, [r3, #68]
3213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Process Unlocked */
3215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           __HAL_UNLOCK(huart);
 7836              		.loc 1 3215 11
 7837 007e FB68     		ldr	r3, [r7, #12]
 7838 0080 0022     		movs	r2, #0
 7839 0082 83F84020 		strb	r2, [r3, #64]
3216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_ERROR;
 7840              		.loc 1 3217 18
 7841 0086 0123     		movs	r3, #1
 7842 0088 0FE0     		b	.L397
ARM GAS  /tmp//ccY11c6d.s 			page 216


 7843              	.L394:
3189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 7844              		.loc 1 3189 11
 7845 008a FB68     		ldr	r3, [r7, #12]
 7846 008c 1B68     		ldr	r3, [r3]
 7847 008e 1A68     		ldr	r2, [r3]
 7848 0090 BB68     		ldr	r3, [r7, #8]
 7849 0092 1340     		ands	r3, r3, r2
3189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 7850              		.loc 1 3189 50
 7851 0094 BA68     		ldr	r2, [r7, #8]
 7852 0096 9A42     		cmp	r2, r3
 7853 0098 0CBF     		ite	eq
 7854 009a 0123     		moveq	r3, #1
 7855 009c 0023     		movne	r3, #0
 7856 009e DBB2     		uxtb	r3, r3
 7857 00a0 1A46     		mov	r2, r3
3189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 7858              		.loc 1 3189 59
 7859 00a2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7860 00a4 9A42     		cmp	r2, r3
 7861 00a6 B4D0     		beq	.L399
3218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
3219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 7862              		.loc 1 3222 10
 7863 00a8 0023     		movs	r3, #0
 7864              	.L397:
3223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 7865              		.loc 1 3223 1
 7866 00aa 1846     		mov	r0, r3
 7867 00ac 1837     		adds	r7, r7, #24
 7868              	.LCFI265:
 7869              		.cfi_def_cfa_offset 8
 7870 00ae BD46     		mov	sp, r7
 7871              	.LCFI266:
 7872              		.cfi_def_cfa_register 13
 7873              		@ sp needed
 7874 00b0 80BD     		pop	{r7, pc}
 7875              		.cfi_endproc
 7876              	.LFE113:
 7878              		.section	.text.UART_Start_Receive_IT,"ax",%progbits
 7879              		.align	1
 7880              		.global	UART_Start_Receive_IT
 7881              		.syntax unified
 7882              		.thumb
 7883              		.thumb_func
 7885              	UART_Start_Receive_IT:
 7886              	.LFB114:
3224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Start Receive operation in interrupt mode.
3227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This function could be called by all HAL UART API providing reception in Interrupt mode
3228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When calling this function, parameters validity is considered as already checked,
3229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         i.e. Rx State, buffer address, ...
ARM GAS  /tmp//ccY11c6d.s 			page 217


3230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART Handle is assumed as Locked.
3231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
3232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
3233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
3234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
3237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 7887              		.loc 1 3237 1
 7888              		.cfi_startproc
 7889              		@ args = 0, pretend = 0, frame = 16
 7890              		@ frame_needed = 1, uses_anonymous_args = 0
 7891              		@ link register save eliminated.
 7892 0000 80B4     		push	{r7}
 7893              	.LCFI267:
 7894              		.cfi_def_cfa_offset 4
 7895              		.cfi_offset 7, -4
 7896 0002 85B0     		sub	sp, sp, #20
 7897              	.LCFI268:
 7898              		.cfi_def_cfa_offset 24
 7899 0004 00AF     		add	r7, sp, #0
 7900              	.LCFI269:
 7901              		.cfi_def_cfa_register 7
 7902 0006 F860     		str	r0, [r7, #12]
 7903 0008 B960     		str	r1, [r7, #8]
 7904 000a 1346     		mov	r3, r2
 7905 000c FB80     		strh	r3, [r7, #6]	@ movhi
3238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->pRxBuffPtr = pData;
 7906              		.loc 1 3238 21
 7907 000e FB68     		ldr	r3, [r7, #12]
 7908 0010 BA68     		ldr	r2, [r7, #8]
 7909 0012 9A62     		str	r2, [r3, #40]
3239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferSize = Size;
 7910              		.loc 1 3239 21
 7911 0014 FB68     		ldr	r3, [r7, #12]
 7912 0016 FA88     		ldrh	r2, [r7, #6]	@ movhi
 7913 0018 9A85     		strh	r2, [r3, #44]	@ movhi
3240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = Size;
 7914              		.loc 1 3240 22
 7915 001a FB68     		ldr	r3, [r7, #12]
 7916 001c FA88     		ldrh	r2, [r7, #6]	@ movhi
 7917 001e DA85     		strh	r2, [r3, #46]	@ movhi
3241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 7918              		.loc 1 3242 20
 7919 0020 FB68     		ldr	r3, [r7, #12]
 7920 0022 0022     		movs	r2, #0
 7921 0024 5A64     		str	r2, [r3, #68]
3243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_BUSY_RX;
 7922              		.loc 1 3243 18
 7923 0026 FB68     		ldr	r3, [r7, #12]
 7924 0028 2222     		movs	r2, #34
 7925 002a 83F84220 		strb	r2, [r3, #66]
3244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->Init.Parity != UART_PARITY_NONE)
 7926              		.loc 1 3245 18
 7927 002e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp//ccY11c6d.s 			page 218


 7928 0030 1B69     		ldr	r3, [r3, #16]
 7929              		.loc 1 3245 6
 7930 0032 002B     		cmp	r3, #0
 7931 0034 07D0     		beq	.L401
3246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
3248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 7932              		.loc 1 3248 5
 7933 0036 FB68     		ldr	r3, [r7, #12]
 7934 0038 1B68     		ldr	r3, [r3]
 7935 003a DA68     		ldr	r2, [r3, #12]
 7936 003c FB68     		ldr	r3, [r7, #12]
 7937 003e 1B68     		ldr	r3, [r3]
 7938 0040 42F48072 		orr	r2, r2, #256
 7939 0044 DA60     		str	r2, [r3, #12]
 7940              	.L401:
3249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 7941              		.loc 1 3252 3
 7942 0046 FB68     		ldr	r3, [r7, #12]
 7943 0048 1B68     		ldr	r3, [r3]
 7944 004a 5A69     		ldr	r2, [r3, #20]
 7945 004c FB68     		ldr	r3, [r7, #12]
 7946 004e 1B68     		ldr	r3, [r3]
 7947 0050 42F00102 		orr	r2, r2, #1
 7948 0054 5A61     		str	r2, [r3, #20]
3253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Data Register not empty Interrupt */
3255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 7949              		.loc 1 3255 3
 7950 0056 FB68     		ldr	r3, [r7, #12]
 7951 0058 1B68     		ldr	r3, [r3]
 7952 005a DA68     		ldr	r2, [r3, #12]
 7953 005c FB68     		ldr	r3, [r7, #12]
 7954 005e 1B68     		ldr	r3, [r3]
 7955 0060 42F02002 		orr	r2, r2, #32
 7956 0064 DA60     		str	r2, [r3, #12]
3256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 7957              		.loc 1 3257 10
 7958 0066 0023     		movs	r3, #0
3258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 7959              		.loc 1 3258 1
 7960 0068 1846     		mov	r0, r3
 7961 006a 1437     		adds	r7, r7, #20
 7962              	.LCFI270:
 7963              		.cfi_def_cfa_offset 4
 7964 006c BD46     		mov	sp, r7
 7965              	.LCFI271:
 7966              		.cfi_def_cfa_register 13
 7967              		@ sp needed
 7968 006e 80BC     		pop	{r7}
 7969              	.LCFI272:
 7970              		.cfi_restore 7
 7971              		.cfi_def_cfa_offset 0
ARM GAS  /tmp//ccY11c6d.s 			page 219


 7972 0070 7047     		bx	lr
 7973              		.cfi_endproc
 7974              	.LFE114:
 7976              		.section	.text.UART_Start_Receive_DMA,"ax",%progbits
 7977              		.align	1
 7978              		.global	UART_Start_Receive_DMA
 7979              		.syntax unified
 7980              		.thumb
 7981              		.thumb_func
 7983              	UART_Start_Receive_DMA:
 7984              	.LFB115:
3259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Start Receive operation in DMA mode.
3262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This function could be called by all HAL UART API providing reception in DMA mode.
3263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When calling this function, parameters validity is considered as already checked,
3264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         i.e. Rx State, buffer address, ...
3265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART Handle is assumed as Locked.
3266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
3267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
3268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
3269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
3272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 7985              		.loc 1 3272 1
 7986              		.cfi_startproc
 7987              		@ args = 0, pretend = 0, frame = 96
 7988              		@ frame_needed = 1, uses_anonymous_args = 0
 7989 0000 80B5     		push	{r7, lr}
 7990              	.LCFI273:
 7991              		.cfi_def_cfa_offset 8
 7992              		.cfi_offset 7, -8
 7993              		.cfi_offset 14, -4
 7994 0002 98B0     		sub	sp, sp, #96
 7995              	.LCFI274:
 7996              		.cfi_def_cfa_offset 104
 7997 0004 00AF     		add	r7, sp, #0
 7998              	.LCFI275:
 7999              		.cfi_def_cfa_register 7
 8000 0006 F860     		str	r0, [r7, #12]
 8001 0008 B960     		str	r1, [r7, #8]
 8002 000a 1346     		mov	r3, r2
 8003 000c FB80     		strh	r3, [r7, #6]	@ movhi
3273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
3274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->pRxBuffPtr = pData;
 8004              		.loc 1 3275 21
 8005 000e BA68     		ldr	r2, [r7, #8]
 8006 0010 FB68     		ldr	r3, [r7, #12]
 8007 0012 9A62     		str	r2, [r3, #40]
3276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferSize = Size;
 8008              		.loc 1 3276 21
 8009 0014 FB68     		ldr	r3, [r7, #12]
 8010 0016 FA88     		ldrh	r2, [r7, #6]	@ movhi
 8011 0018 9A85     		strh	r2, [r3, #44]	@ movhi
3277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp//ccY11c6d.s 			page 220


3278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012              		.loc 1 3278 20
 8013 001a FB68     		ldr	r3, [r7, #12]
 8014 001c 0022     		movs	r2, #0
 8015 001e 5A64     		str	r2, [r3, #68]
3279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016              		.loc 1 3279 18
 8017 0020 FB68     		ldr	r3, [r7, #12]
 8018 0022 2222     		movs	r2, #34
 8019 0024 83F84220 		strb	r2, [r3, #66]
3280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART DMA transfer complete callback */
3282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8020              		.loc 1 3282 8
 8021 0028 FB68     		ldr	r3, [r7, #12]
 8022 002a DB6B     		ldr	r3, [r3, #60]
 8023              		.loc 1 3282 35
 8024 002c 3E4A     		ldr	r2, .L415
 8025 002e 9A62     		str	r2, [r3, #40]
3283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART DMA Half transfer complete callback */
3285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8026              		.loc 1 3285 8
 8027 0030 FB68     		ldr	r3, [r7, #12]
 8028 0032 DB6B     		ldr	r3, [r3, #60]
 8029              		.loc 1 3285 39
 8030 0034 3D4A     		ldr	r2, .L415+4
 8031 0036 DA62     		str	r2, [r3, #44]
3286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the DMA error callback */
3288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferErrorCallback = UART_DMAError;
 8032              		.loc 1 3288 8
 8033 0038 FB68     		ldr	r3, [r7, #12]
 8034 003a DB6B     		ldr	r3, [r3, #60]
 8035              		.loc 1 3288 36
 8036 003c 3C4A     		ldr	r2, .L415+8
 8037 003e 1A63     		str	r2, [r3, #48]
3289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the DMA abort callback */
3291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
 8038              		.loc 1 3291 8
 8039 0040 FB68     		ldr	r3, [r7, #12]
 8040 0042 DB6B     		ldr	r3, [r3, #60]
 8041              		.loc 1 3291 36
 8042 0044 0022     		movs	r2, #0
 8043 0046 5A63     		str	r2, [r3, #52]
3292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the DMA stream */
3294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmp = (uint32_t *)&pData;
 8044              		.loc 1 3294 7
 8045 0048 07F10803 		add	r3, r7, #8
 8046 004c FB65     		str	r3, [r7, #92]
3295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8047              		.loc 1 3295 3
 8048 004e FB68     		ldr	r3, [r7, #12]
 8049 0050 D86B     		ldr	r0, [r3, #60]
 8050              		.loc 1 3295 51
ARM GAS  /tmp//ccY11c6d.s 			page 221


 8051 0052 FB68     		ldr	r3, [r7, #12]
 8052 0054 1B68     		ldr	r3, [r3]
 8053              		.loc 1 3295 45
 8054 0056 0433     		adds	r3, r3, #4
 8055              		.loc 1 3295 3
 8056 0058 1946     		mov	r1, r3
 8057 005a FB6D     		ldr	r3, [r7, #92]
 8058 005c 1A68     		ldr	r2, [r3]
 8059 005e FB88     		ldrh	r3, [r7, #6]
 8060 0060 FFF7FEFF 		bl	HAL_DMA_Start_IT
 8061              	.LBB580:
3296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the secon
3298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_CLEAR_OREFLAG(huart);
 8062              		.loc 1 3298 3
 8063 0064 0023     		movs	r3, #0
 8064 0066 3B61     		str	r3, [r7, #16]
 8065 0068 FB68     		ldr	r3, [r7, #12]
 8066 006a 1B68     		ldr	r3, [r3]
 8067 006c 1B68     		ldr	r3, [r3]
 8068 006e 3B61     		str	r3, [r7, #16]
 8069 0070 FB68     		ldr	r3, [r7, #12]
 8070 0072 1B68     		ldr	r3, [r3]
 8071 0074 5B68     		ldr	r3, [r3, #4]
 8072 0076 3B61     		str	r3, [r7, #16]
 8073 0078 3B69     		ldr	r3, [r7, #16]
 8074              	.LBE580:
3299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->Init.Parity != UART_PARITY_NONE)
 8075              		.loc 1 3300 18
 8076 007a FB68     		ldr	r3, [r7, #12]
 8077 007c 1B69     		ldr	r3, [r3, #16]
 8078              		.loc 1 3300 6
 8079 007e 002B     		cmp	r3, #0
 8080 0080 19D0     		beq	.L410
 8081              	.L407:
 8082              	.LBB581:
3301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
3303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8083              		.loc 1 3303 5 discriminator 1
 8084 0082 FB68     		ldr	r3, [r7, #12]
 8085 0084 1B68     		ldr	r3, [r3]
 8086 0086 0C33     		adds	r3, r3, #12
 8087 0088 3B64     		str	r3, [r7, #64]
 8088              	.LBB582:
 8089              	.LBB583:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8090              		.loc 2 1072 4
 8091 008a 3B6C     		ldr	r3, [r7, #64]
 8092              		.syntax unified
 8093              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8094 008c 53E8003F 		ldrex r3, [r3]
 8095              	@ 0 "" 2
 8096              		.thumb
 8097              		.syntax unified
 8098 0090 FB63     		str	r3, [r7, #60]
ARM GAS  /tmp//ccY11c6d.s 			page 222


1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8099              		.loc 2 1073 10
 8100 0092 FB6B     		ldr	r3, [r7, #60]
 8101              	.LBE583:
 8102              	.LBE582:
 8103              		.loc 1 3303 5 discriminator 1
 8104 0094 43F48073 		orr	r3, r3, #256
 8105 0098 BB65     		str	r3, [r7, #88]
 8106 009a FB68     		ldr	r3, [r7, #12]
 8107 009c 1B68     		ldr	r3, [r3]
 8108 009e 0C33     		adds	r3, r3, #12
 8109 00a0 BA6D     		ldr	r2, [r7, #88]
 8110 00a2 FA64     		str	r2, [r7, #76]
 8111 00a4 BB64     		str	r3, [r7, #72]
 8112              	.LBB584:
 8113              	.LBB585:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8114              		.loc 2 1123 4
 8115 00a6 B96C     		ldr	r1, [r7, #72]
 8116 00a8 FA6C     		ldr	r2, [r7, #76]
 8117              		.syntax unified
 8118              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8119 00aa 41E80023 		strex r3, r2, [r1]
 8120              	@ 0 "" 2
 8121              		.thumb
 8122              		.syntax unified
 8123 00ae 7B64     		str	r3, [r7, #68]
 8124              		.loc 2 1124 10
 8125 00b0 7B6C     		ldr	r3, [r7, #68]
 8126              	.LBE585:
 8127              	.LBE584:
 8128              		.loc 1 3303 5 discriminator 1
 8129 00b2 002B     		cmp	r3, #0
 8130 00b4 E5D1     		bne	.L407
 8131              	.L410:
 8132              	.LBE581:
 8133              	.LBB586:
3304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8134              		.loc 1 3307 3 discriminator 1
 8135 00b6 FB68     		ldr	r3, [r7, #12]
 8136 00b8 1B68     		ldr	r3, [r3]
 8137 00ba 1433     		adds	r3, r3, #20
 8138 00bc FB62     		str	r3, [r7, #44]
 8139              	.LBB587:
 8140              	.LBB588:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8141              		.loc 2 1072 4
 8142 00be FB6A     		ldr	r3, [r7, #44]
 8143              		.syntax unified
 8144              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8145 00c0 53E8003F 		ldrex r3, [r3]
 8146              	@ 0 "" 2
 8147              		.thumb
 8148              		.syntax unified
ARM GAS  /tmp//ccY11c6d.s 			page 223


 8149 00c4 BB62     		str	r3, [r7, #40]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8150              		.loc 2 1073 10
 8151 00c6 BB6A     		ldr	r3, [r7, #40]
 8152              	.LBE588:
 8153              	.LBE587:
 8154              		.loc 1 3307 3 discriminator 1
 8155 00c8 43F00103 		orr	r3, r3, #1
 8156 00cc 7B65     		str	r3, [r7, #84]
 8157 00ce FB68     		ldr	r3, [r7, #12]
 8158 00d0 1B68     		ldr	r3, [r3]
 8159 00d2 1433     		adds	r3, r3, #20
 8160 00d4 7A6D     		ldr	r2, [r7, #84]
 8161 00d6 BA63     		str	r2, [r7, #56]
 8162 00d8 7B63     		str	r3, [r7, #52]
 8163              	.LBB589:
 8164              	.LBB590:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8165              		.loc 2 1123 4
 8166 00da 796B     		ldr	r1, [r7, #52]
 8167 00dc BA6B     		ldr	r2, [r7, #56]
 8168              		.syntax unified
 8169              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8170 00de 41E80023 		strex r3, r2, [r1]
 8171              	@ 0 "" 2
 8172              		.thumb
 8173              		.syntax unified
 8174 00e2 3B63     		str	r3, [r7, #48]
 8175              		.loc 2 1124 10
 8176 00e4 3B6B     		ldr	r3, [r7, #48]
 8177              	.LBE590:
 8178              	.LBE589:
 8179              		.loc 1 3307 3 discriminator 1
 8180 00e6 002B     		cmp	r3, #0
 8181 00e8 E5D1     		bne	.L410
 8182              	.L413:
 8183              	.LBE586:
 8184              	.LBB591:
3308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the DMA transfer for the receiver request by setting the DMAR bit
3310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   in the UART CR3 register */
3311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8185              		.loc 1 3311 3 discriminator 1
 8186 00ea FB68     		ldr	r3, [r7, #12]
 8187 00ec 1B68     		ldr	r3, [r3]
 8188 00ee 1433     		adds	r3, r3, #20
 8189 00f0 BB61     		str	r3, [r7, #24]
 8190              	.LBB592:
 8191              	.LBB593:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8192              		.loc 2 1072 4
 8193 00f2 BB69     		ldr	r3, [r7, #24]
 8194              		.syntax unified
 8195              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8196 00f4 53E8003F 		ldrex r3, [r3]
 8197              	@ 0 "" 2
 8198              		.thumb
ARM GAS  /tmp//ccY11c6d.s 			page 224


 8199              		.syntax unified
 8200 00f8 7B61     		str	r3, [r7, #20]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8201              		.loc 2 1073 10
 8202 00fa 7B69     		ldr	r3, [r7, #20]
 8203              	.LBE593:
 8204              	.LBE592:
 8205              		.loc 1 3311 3 discriminator 1
 8206 00fc 43F04003 		orr	r3, r3, #64
 8207 0100 3B65     		str	r3, [r7, #80]
 8208 0102 FB68     		ldr	r3, [r7, #12]
 8209 0104 1B68     		ldr	r3, [r3]
 8210 0106 1433     		adds	r3, r3, #20
 8211 0108 3A6D     		ldr	r2, [r7, #80]
 8212 010a 7A62     		str	r2, [r7, #36]
 8213 010c 3B62     		str	r3, [r7, #32]
 8214              	.LBB594:
 8215              	.LBB595:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8216              		.loc 2 1123 4
 8217 010e 396A     		ldr	r1, [r7, #32]
 8218 0110 7A6A     		ldr	r2, [r7, #36]
 8219              		.syntax unified
 8220              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8221 0112 41E80023 		strex r3, r2, [r1]
 8222              	@ 0 "" 2
 8223              		.thumb
 8224              		.syntax unified
 8225 0116 FB61     		str	r3, [r7, #28]
 8226              		.loc 2 1124 10
 8227 0118 FB69     		ldr	r3, [r7, #28]
 8228              	.LBE595:
 8229              	.LBE594:
 8230              		.loc 1 3311 3 discriminator 1
 8231 011a 002B     		cmp	r3, #0
 8232 011c E5D1     		bne	.L413
 8233              	.LBE591:
3312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 8234              		.loc 1 3313 10
 8235 011e 0023     		movs	r3, #0
3314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 8236              		.loc 1 3314 1
 8237 0120 1846     		mov	r0, r3
 8238 0122 6037     		adds	r7, r7, #96
 8239              	.LCFI276:
 8240              		.cfi_def_cfa_offset 8
 8241 0124 BD46     		mov	sp, r7
 8242              	.LCFI277:
 8243              		.cfi_def_cfa_register 13
 8244              		@ sp needed
 8245 0126 80BD     		pop	{r7, pc}
 8246              	.L416:
 8247              		.align	2
 8248              	.L415:
 8249 0128 00000000 		.word	UART_DMAReceiveCplt
 8250 012c 00000000 		.word	UART_DMARxHalfCplt
ARM GAS  /tmp//ccY11c6d.s 			page 225


 8251 0130 00000000 		.word	UART_DMAError
 8252              		.cfi_endproc
 8253              	.LFE115:
 8255              		.section	.text.UART_EndTxTransfer,"ax",%progbits
 8256              		.align	1
 8257              		.syntax unified
 8258              		.thumb
 8259              		.thumb_func
 8261              	UART_EndTxTransfer:
 8262              	.LFB116:
3315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
3318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
3319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
3322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 8263              		.loc 1 3322 1
 8264              		.cfi_startproc
 8265              		@ args = 0, pretend = 0, frame = 32
 8266              		@ frame_needed = 1, uses_anonymous_args = 0
 8267              		@ link register save eliminated.
 8268 0000 80B4     		push	{r7}
 8269              	.LCFI278:
 8270              		.cfi_def_cfa_offset 4
 8271              		.cfi_offset 7, -4
 8272 0002 89B0     		sub	sp, sp, #36
 8273              	.LCFI279:
 8274              		.cfi_def_cfa_offset 40
 8275 0004 00AF     		add	r7, sp, #0
 8276              	.LCFI280:
 8277              		.cfi_def_cfa_register 7
 8278 0006 7860     		str	r0, [r7, #4]
 8279              	.L420:
 8280              	.LBB596:
3323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
3324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8281              		.loc 1 3324 3 discriminator 1
 8282 0008 7B68     		ldr	r3, [r7, #4]
 8283 000a 1B68     		ldr	r3, [r3]
 8284 000c 0C33     		adds	r3, r3, #12
 8285 000e FB60     		str	r3, [r7, #12]
 8286              	.LBB597:
 8287              	.LBB598:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8288              		.loc 2 1072 4
 8289 0010 FB68     		ldr	r3, [r7, #12]
 8290              		.syntax unified
 8291              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8292 0012 53E8003F 		ldrex r3, [r3]
 8293              	@ 0 "" 2
 8294              		.thumb
 8295              		.syntax unified
 8296 0016 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8297              		.loc 2 1073 10
ARM GAS  /tmp//ccY11c6d.s 			page 226


 8298 0018 BB68     		ldr	r3, [r7, #8]
 8299              	.LBE598:
 8300              	.LBE597:
 8301              		.loc 1 3324 3 discriminator 1
 8302 001a 23F0C003 		bic	r3, r3, #192
 8303 001e FB61     		str	r3, [r7, #28]
 8304 0020 7B68     		ldr	r3, [r7, #4]
 8305 0022 1B68     		ldr	r3, [r3]
 8306 0024 0C33     		adds	r3, r3, #12
 8307 0026 FA69     		ldr	r2, [r7, #28]
 8308 0028 BA61     		str	r2, [r7, #24]
 8309 002a 7B61     		str	r3, [r7, #20]
 8310              	.LBB599:
 8311              	.LBB600:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8312              		.loc 2 1123 4
 8313 002c 7969     		ldr	r1, [r7, #20]
 8314 002e BA69     		ldr	r2, [r7, #24]
 8315              		.syntax unified
 8316              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8317 0030 41E80023 		strex r3, r2, [r1]
 8318              	@ 0 "" 2
 8319              		.thumb
 8320              		.syntax unified
 8321 0034 3B61     		str	r3, [r7, #16]
 8322              		.loc 2 1124 10
 8323 0036 3B69     		ldr	r3, [r7, #16]
 8324              	.LBE600:
 8325              	.LBE599:
 8326              		.loc 1 3324 3 discriminator 1
 8327 0038 002B     		cmp	r3, #0
 8328 003a E5D1     		bne	.L420
 8329              	.LBE596:
3325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
3327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 8330              		.loc 1 3327 17
 8331 003c 7B68     		ldr	r3, [r7, #4]
 8332 003e 2022     		movs	r2, #32
 8333 0040 83F84120 		strb	r2, [r3, #65]
3328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 8334              		.loc 1 3328 1
 8335 0044 00BF     		nop
 8336 0046 2437     		adds	r7, r7, #36
 8337              	.LCFI281:
 8338              		.cfi_def_cfa_offset 4
 8339 0048 BD46     		mov	sp, r7
 8340              	.LCFI282:
 8341              		.cfi_def_cfa_register 13
 8342              		@ sp needed
 8343 004a 80BC     		pop	{r7}
 8344              	.LCFI283:
 8345              		.cfi_restore 7
 8346              		.cfi_def_cfa_offset 0
 8347 004c 7047     		bx	lr
 8348              		.cfi_endproc
 8349              	.LFE116:
ARM GAS  /tmp//ccY11c6d.s 			page 227


 8351              		.section	.text.UART_EndRxTransfer,"ax",%progbits
 8352              		.align	1
 8353              		.syntax unified
 8354              		.thumb
 8355              		.thumb_func
 8357              	UART_EndRxTransfer:
 8358              	.LFB117:
3329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
3332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
3333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
3336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 8359              		.loc 1 3336 1
 8360              		.cfi_startproc
 8361              		@ args = 0, pretend = 0, frame = 80
 8362              		@ frame_needed = 1, uses_anonymous_args = 0
 8363              		@ link register save eliminated.
 8364 0000 80B4     		push	{r7}
 8365              	.LCFI284:
 8366              		.cfi_def_cfa_offset 4
 8367              		.cfi_offset 7, -4
 8368 0002 95B0     		sub	sp, sp, #84
 8369              	.LCFI285:
 8370              		.cfi_def_cfa_offset 88
 8371 0004 00AF     		add	r7, sp, #0
 8372              	.LCFI286:
 8373              		.cfi_def_cfa_register 7
 8374 0006 7860     		str	r0, [r7, #4]
 8375              	.L424:
 8376              	.LBB601:
3337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
3338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8377              		.loc 1 3338 3 discriminator 1
 8378 0008 7B68     		ldr	r3, [r7, #4]
 8379 000a 1B68     		ldr	r3, [r3]
 8380 000c 0C33     		adds	r3, r3, #12
 8381 000e 7B63     		str	r3, [r7, #52]
 8382              	.LBB602:
 8383              	.LBB603:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8384              		.loc 2 1072 4
 8385 0010 7B6B     		ldr	r3, [r7, #52]
 8386              		.syntax unified
 8387              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8388 0012 53E8003F 		ldrex r3, [r3]
 8389              	@ 0 "" 2
 8390              		.thumb
 8391              		.syntax unified
 8392 0016 3B63     		str	r3, [r7, #48]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8393              		.loc 2 1073 10
 8394 0018 3B6B     		ldr	r3, [r7, #48]
 8395              	.LBE603:
 8396              	.LBE602:
ARM GAS  /tmp//ccY11c6d.s 			page 228


 8397              		.loc 1 3338 3 discriminator 1
 8398 001a 23F49073 		bic	r3, r3, #288
 8399 001e FB64     		str	r3, [r7, #76]
 8400 0020 7B68     		ldr	r3, [r7, #4]
 8401 0022 1B68     		ldr	r3, [r3]
 8402 0024 0C33     		adds	r3, r3, #12
 8403 0026 FA6C     		ldr	r2, [r7, #76]
 8404 0028 3A64     		str	r2, [r7, #64]
 8405 002a FB63     		str	r3, [r7, #60]
 8406              	.LBB604:
 8407              	.LBB605:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8408              		.loc 2 1123 4
 8409 002c F96B     		ldr	r1, [r7, #60]
 8410 002e 3A6C     		ldr	r2, [r7, #64]
 8411              		.syntax unified
 8412              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8413 0030 41E80023 		strex r3, r2, [r1]
 8414              	@ 0 "" 2
 8415              		.thumb
 8416              		.syntax unified
 8417 0034 BB63     		str	r3, [r7, #56]
 8418              		.loc 2 1124 10
 8419 0036 BB6B     		ldr	r3, [r7, #56]
 8420              	.LBE605:
 8421              	.LBE604:
 8422              		.loc 1 3338 3 discriminator 1
 8423 0038 002B     		cmp	r3, #0
 8424 003a E5D1     		bne	.L424
 8425              	.L427:
 8426              	.LBE601:
 8427              	.LBB606:
3339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8428              		.loc 1 3339 3 discriminator 1
 8429 003c 7B68     		ldr	r3, [r7, #4]
 8430 003e 1B68     		ldr	r3, [r3]
 8431 0040 1433     		adds	r3, r3, #20
 8432 0042 3B62     		str	r3, [r7, #32]
 8433              	.LBB607:
 8434              	.LBB608:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8435              		.loc 2 1072 4
 8436 0044 3B6A     		ldr	r3, [r7, #32]
 8437              		.syntax unified
 8438              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8439 0046 53E8003F 		ldrex r3, [r3]
 8440              	@ 0 "" 2
 8441              		.thumb
 8442              		.syntax unified
 8443 004a FB61     		str	r3, [r7, #28]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8444              		.loc 2 1073 10
 8445 004c FB69     		ldr	r3, [r7, #28]
 8446              	.LBE608:
 8447              	.LBE607:
 8448              		.loc 1 3339 3 discriminator 1
 8449 004e 23F00103 		bic	r3, r3, #1
ARM GAS  /tmp//ccY11c6d.s 			page 229


 8450 0052 BB64     		str	r3, [r7, #72]
 8451 0054 7B68     		ldr	r3, [r7, #4]
 8452 0056 1B68     		ldr	r3, [r3]
 8453 0058 1433     		adds	r3, r3, #20
 8454 005a BA6C     		ldr	r2, [r7, #72]
 8455 005c FA62     		str	r2, [r7, #44]
 8456 005e BB62     		str	r3, [r7, #40]
 8457              	.LBB609:
 8458              	.LBB610:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8459              		.loc 2 1123 4
 8460 0060 B96A     		ldr	r1, [r7, #40]
 8461 0062 FA6A     		ldr	r2, [r7, #44]
 8462              		.syntax unified
 8463              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8464 0064 41E80023 		strex r3, r2, [r1]
 8465              	@ 0 "" 2
 8466              		.thumb
 8467              		.syntax unified
 8468 0068 7B62     		str	r3, [r7, #36]
 8469              		.loc 2 1124 10
 8470 006a 7B6A     		ldr	r3, [r7, #36]
 8471              	.LBE610:
 8472              	.LBE609:
 8473              		.loc 1 3339 3 discriminator 1
 8474 006c 002B     		cmp	r3, #0
 8475 006e E5D1     		bne	.L427
 8476              	.LBE606:
3340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
3342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8477              		.loc 1 3342 12
 8478 0070 7B68     		ldr	r3, [r7, #4]
 8479 0072 1B6B     		ldr	r3, [r3, #48]
 8480              		.loc 1 3342 6
 8481 0074 012B     		cmp	r3, #1
 8482 0076 19D1     		bne	.L428
 8483              	.L431:
 8484              	.LBB611:
3343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8485              		.loc 1 3344 5 discriminator 1
 8486 0078 7B68     		ldr	r3, [r7, #4]
 8487 007a 1B68     		ldr	r3, [r3]
 8488 007c 0C33     		adds	r3, r3, #12
 8489 007e FB60     		str	r3, [r7, #12]
 8490              	.LBB612:
 8491              	.LBB613:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8492              		.loc 2 1072 4
 8493 0080 FB68     		ldr	r3, [r7, #12]
 8494              		.syntax unified
 8495              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8496 0082 53E8003F 		ldrex r3, [r3]
 8497              	@ 0 "" 2
 8498              		.thumb
 8499              		.syntax unified
ARM GAS  /tmp//ccY11c6d.s 			page 230


 8500 0086 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8501              		.loc 2 1073 10
 8502 0088 BB68     		ldr	r3, [r7, #8]
 8503              	.LBE613:
 8504              	.LBE612:
 8505              		.loc 1 3344 5 discriminator 1
 8506 008a 23F01003 		bic	r3, r3, #16
 8507 008e 7B64     		str	r3, [r7, #68]
 8508 0090 7B68     		ldr	r3, [r7, #4]
 8509 0092 1B68     		ldr	r3, [r3]
 8510 0094 0C33     		adds	r3, r3, #12
 8511 0096 7A6C     		ldr	r2, [r7, #68]
 8512 0098 BA61     		str	r2, [r7, #24]
 8513 009a 7B61     		str	r3, [r7, #20]
 8514              	.LBB614:
 8515              	.LBB615:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8516              		.loc 2 1123 4
 8517 009c 7969     		ldr	r1, [r7, #20]
 8518 009e BA69     		ldr	r2, [r7, #24]
 8519              		.syntax unified
 8520              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8521 00a0 41E80023 		strex r3, r2, [r1]
 8522              	@ 0 "" 2
 8523              		.thumb
 8524              		.syntax unified
 8525 00a4 3B61     		str	r3, [r7, #16]
 8526              		.loc 2 1124 10
 8527 00a6 3B69     		ldr	r3, [r7, #16]
 8528              	.LBE615:
 8529              	.LBE614:
 8530              		.loc 1 3344 5 discriminator 1
 8531 00a8 002B     		cmp	r3, #0
 8532 00aa E5D1     		bne	.L431
 8533              	.L428:
 8534              	.LBE611:
3345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
3348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 8535              		.loc 1 3348 18
 8536 00ac 7B68     		ldr	r3, [r7, #4]
 8537 00ae 2022     		movs	r2, #32
 8538 00b0 83F84220 		strb	r2, [r3, #66]
3349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8539              		.loc 1 3349 24
 8540 00b4 7B68     		ldr	r3, [r7, #4]
 8541 00b6 0022     		movs	r2, #0
 8542 00b8 1A63     		str	r2, [r3, #48]
3350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 8543              		.loc 1 3350 1
 8544 00ba 00BF     		nop
 8545 00bc 5437     		adds	r7, r7, #84
 8546              	.LCFI287:
 8547              		.cfi_def_cfa_offset 4
 8548 00be BD46     		mov	sp, r7
ARM GAS  /tmp//ccY11c6d.s 			page 231


 8549              	.LCFI288:
 8550              		.cfi_def_cfa_register 13
 8551              		@ sp needed
 8552 00c0 80BC     		pop	{r7}
 8553              	.LCFI289:
 8554              		.cfi_restore 7
 8555              		.cfi_def_cfa_offset 0
 8556 00c2 7047     		bx	lr
 8557              		.cfi_endproc
 8558              	.LFE117:
 8560              		.section	.text.UART_DMAAbortOnError,"ax",%progbits
 8561              		.align	1
 8562              		.syntax unified
 8563              		.thumb
 8564              		.thumb_func
 8566              	UART_DMAAbortOnError:
 8567              	.LFB118:
3351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
3354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
3355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
3360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 8568              		.loc 1 3360 1
 8569              		.cfi_startproc
 8570              		@ args = 0, pretend = 0, frame = 16
 8571              		@ frame_needed = 1, uses_anonymous_args = 0
 8572 0000 80B5     		push	{r7, lr}
 8573              	.LCFI290:
 8574              		.cfi_def_cfa_offset 8
 8575              		.cfi_offset 7, -8
 8576              		.cfi_offset 14, -4
 8577 0002 84B0     		sub	sp, sp, #16
 8578              	.LCFI291:
 8579              		.cfi_def_cfa_offset 24
 8580 0004 00AF     		add	r7, sp, #0
 8581              	.LCFI292:
 8582              		.cfi_def_cfa_register 7
 8583 0006 7860     		str	r0, [r7, #4]
3361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8584              		.loc 1 3361 23
 8585 0008 7B68     		ldr	r3, [r7, #4]
 8586 000a 5B6A     		ldr	r3, [r3, #36]
 8587 000c FB60     		str	r3, [r7, #12]
3362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 8588              		.loc 1 3362 22
 8589 000e FB68     		ldr	r3, [r7, #12]
 8590 0010 0022     		movs	r2, #0
 8591 0012 DA85     		strh	r2, [r3, #46]	@ movhi
3363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 8592              		.loc 1 3363 22
 8593 0014 FB68     		ldr	r3, [r7, #12]
 8594 0016 0022     		movs	r2, #0
ARM GAS  /tmp//ccY11c6d.s 			page 232


 8595 0018 DA84     		strh	r2, [r3, #38]	@ movhi
3364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered error callback*/
3367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback(huart);
3368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak error callback*/
3370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 8596              		.loc 1 3370 3
 8597 001a F868     		ldr	r0, [r7, #12]
 8598 001c FFF7FEFF 		bl	HAL_UART_ErrorCallback
3371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 8599              		.loc 1 3372 1
 8600 0020 00BF     		nop
 8601 0022 1037     		adds	r7, r7, #16
 8602              	.LCFI293:
 8603              		.cfi_def_cfa_offset 8
 8604 0024 BD46     		mov	sp, r7
 8605              	.LCFI294:
 8606              		.cfi_def_cfa_register 13
 8607              		@ sp needed
 8608 0026 80BD     		pop	{r7, pc}
 8609              		.cfi_endproc
 8610              	.LFE118:
 8612              		.section	.text.UART_DMATxAbortCallback,"ax",%progbits
 8613              		.align	1
 8614              		.syntax unified
 8615              		.thumb
 8616              		.thumb_func
 8618              	UART_DMATxAbortCallback:
 8619              	.LFB119:
3373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
3376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
3377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
3379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
3384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 8620              		.loc 1 3384 1
 8621              		.cfi_startproc
 8622              		@ args = 0, pretend = 0, frame = 16
 8623              		@ frame_needed = 1, uses_anonymous_args = 0
 8624 0000 80B5     		push	{r7, lr}
 8625              	.LCFI295:
 8626              		.cfi_def_cfa_offset 8
 8627              		.cfi_offset 7, -8
 8628              		.cfi_offset 14, -4
 8629 0002 84B0     		sub	sp, sp, #16
 8630              	.LCFI296:
 8631              		.cfi_def_cfa_offset 24
 8632 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp//ccY11c6d.s 			page 233


 8633              	.LCFI297:
 8634              		.cfi_def_cfa_register 7
 8635 0006 7860     		str	r0, [r7, #4]
3385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8636              		.loc 1 3385 23
 8637 0008 7B68     		ldr	r3, [r7, #4]
 8638 000a 5B6A     		ldr	r3, [r3, #36]
 8639 000c FB60     		str	r3, [r7, #12]
3386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
 8640              		.loc 1 3387 8
 8641 000e FB68     		ldr	r3, [r7, #12]
 8642 0010 9B6B     		ldr	r3, [r3, #56]
 8643              		.loc 1 3387 36
 8644 0012 0022     		movs	r2, #0
 8645 0014 5A63     		str	r2, [r3, #52]
3388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmarx != NULL)
 8646              		.loc 1 3390 12
 8647 0016 FB68     		ldr	r3, [r7, #12]
 8648 0018 DB6B     		ldr	r3, [r3, #60]
 8649              		.loc 1 3390 6
 8650 001a 002B     		cmp	r3, #0
 8651 001c 04D0     		beq	.L434
3391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx->XferAbortCallback != NULL)
 8652              		.loc 1 3392 14
 8653 001e FB68     		ldr	r3, [r7, #12]
 8654 0020 DB6B     		ldr	r3, [r3, #60]
 8655              		.loc 1 3392 22
 8656 0022 5B6B     		ldr	r3, [r3, #52]
 8657              		.loc 1 3392 8
 8658 0024 002B     		cmp	r3, #0
 8659 0026 17D1     		bne	.L436
 8660              	.L434:
3393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
3395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 8661              		.loc 1 3399 22
 8662 0028 FB68     		ldr	r3, [r7, #12]
 8663 002a 0022     		movs	r2, #0
 8664 002c DA84     		strh	r2, [r3, #38]	@ movhi
3400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 8665              		.loc 1 3400 22
 8666 002e FB68     		ldr	r3, [r7, #12]
 8667 0030 0022     		movs	r2, #0
 8668 0032 DA85     		strh	r2, [r3, #46]	@ movhi
3401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
3403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 8669              		.loc 1 3403 20
 8670 0034 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp//ccY11c6d.s 			page 234


 8671 0036 0022     		movs	r2, #0
 8672 0038 5A64     		str	r2, [r3, #68]
3404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 8673              		.loc 1 3406 18
 8674 003a FB68     		ldr	r3, [r7, #12]
 8675 003c 2022     		movs	r2, #32
 8676 003e 83F84120 		strb	r2, [r3, #65]
3407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 8677              		.loc 1 3407 18
 8678 0042 FB68     		ldr	r3, [r7, #12]
 8679 0044 2022     		movs	r2, #32
 8680 0046 83F84220 		strb	r2, [r3, #66]
3408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8681              		.loc 1 3408 24
 8682 004a FB68     		ldr	r3, [r7, #12]
 8683 004c 0022     		movs	r2, #0
 8684 004e 1A63     		str	r2, [r3, #48]
3409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort complete callback */
3413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 8685              		.loc 1 3416 3
 8686 0050 F868     		ldr	r0, [r7, #12]
 8687 0052 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 8688 0056 00E0     		b	.L433
 8689              	.L436:
3394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 8690              		.loc 1 3394 7
 8691 0058 00BF     		nop
 8692              	.L433:
3417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 8693              		.loc 1 3418 1
 8694 005a 1037     		adds	r7, r7, #16
 8695              	.LCFI298:
 8696              		.cfi_def_cfa_offset 8
 8697 005c BD46     		mov	sp, r7
 8698              	.LCFI299:
 8699              		.cfi_def_cfa_register 13
 8700              		@ sp needed
 8701 005e 80BD     		pop	{r7, pc}
 8702              		.cfi_endproc
 8703              	.LFE119:
 8705              		.section	.text.UART_DMARxAbortCallback,"ax",%progbits
 8706              		.align	1
 8707              		.syntax unified
 8708              		.thumb
 8709              		.thumb_func
 8711              	UART_DMARxAbortCallback:
 8712              	.LFB120:
3419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp//ccY11c6d.s 			page 235


3420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
3422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
3423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
3425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
3430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 8713              		.loc 1 3430 1
 8714              		.cfi_startproc
 8715              		@ args = 0, pretend = 0, frame = 16
 8716              		@ frame_needed = 1, uses_anonymous_args = 0
 8717 0000 80B5     		push	{r7, lr}
 8718              	.LCFI300:
 8719              		.cfi_def_cfa_offset 8
 8720              		.cfi_offset 7, -8
 8721              		.cfi_offset 14, -4
 8722 0002 84B0     		sub	sp, sp, #16
 8723              	.LCFI301:
 8724              		.cfi_def_cfa_offset 24
 8725 0004 00AF     		add	r7, sp, #0
 8726              	.LCFI302:
 8727              		.cfi_def_cfa_register 7
 8728 0006 7860     		str	r0, [r7, #4]
3431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8729              		.loc 1 3431 23
 8730 0008 7B68     		ldr	r3, [r7, #4]
 8731 000a 5B6A     		ldr	r3, [r3, #36]
 8732 000c FB60     		str	r3, [r7, #12]
3432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
 8733              		.loc 1 3433 8
 8734 000e FB68     		ldr	r3, [r7, #12]
 8735 0010 DB6B     		ldr	r3, [r3, #60]
 8736              		.loc 1 3433 36
 8737 0012 0022     		movs	r2, #0
 8738 0014 5A63     		str	r2, [r3, #52]
3434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmatx != NULL)
 8739              		.loc 1 3436 12
 8740 0016 FB68     		ldr	r3, [r7, #12]
 8741 0018 9B6B     		ldr	r3, [r3, #56]
 8742              		.loc 1 3436 6
 8743 001a 002B     		cmp	r3, #0
 8744 001c 04D0     		beq	.L438
3437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx->XferAbortCallback != NULL)
 8745              		.loc 1 3438 14
 8746 001e FB68     		ldr	r3, [r7, #12]
 8747 0020 9B6B     		ldr	r3, [r3, #56]
 8748              		.loc 1 3438 22
 8749 0022 5B6B     		ldr	r3, [r3, #52]
 8750              		.loc 1 3438 8
ARM GAS  /tmp//ccY11c6d.s 			page 236


 8751 0024 002B     		cmp	r3, #0
 8752 0026 17D1     		bne	.L440
 8753              	.L438:
3439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
3441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 8754              		.loc 1 3445 22
 8755 0028 FB68     		ldr	r3, [r7, #12]
 8756 002a 0022     		movs	r2, #0
 8757 002c DA84     		strh	r2, [r3, #38]	@ movhi
3446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 8758              		.loc 1 3446 22
 8759 002e FB68     		ldr	r3, [r7, #12]
 8760 0030 0022     		movs	r2, #0
 8761 0032 DA85     		strh	r2, [r3, #46]	@ movhi
3447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
3449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 8762              		.loc 1 3449 20
 8763 0034 FB68     		ldr	r3, [r7, #12]
 8764 0036 0022     		movs	r2, #0
 8765 0038 5A64     		str	r2, [r3, #68]
3450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 8766              		.loc 1 3452 18
 8767 003a FB68     		ldr	r3, [r7, #12]
 8768 003c 2022     		movs	r2, #32
 8769 003e 83F84120 		strb	r2, [r3, #65]
3453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 8770              		.loc 1 3453 18
 8771 0042 FB68     		ldr	r3, [r7, #12]
 8772 0044 2022     		movs	r2, #32
 8773 0046 83F84220 		strb	r2, [r3, #66]
3454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8774              		.loc 1 3454 24
 8775 004a FB68     		ldr	r3, [r7, #12]
 8776 004c 0022     		movs	r2, #0
 8777 004e 1A63     		str	r2, [r3, #48]
3455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort complete callback */
3459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 8778              		.loc 1 3462 3
 8779 0050 F868     		ldr	r0, [r7, #12]
 8780 0052 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 8781 0056 00E0     		b	.L437
 8782              	.L440:
3440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
ARM GAS  /tmp//ccY11c6d.s 			page 237


 8783              		.loc 1 3440 7
 8784 0058 00BF     		nop
 8785              	.L437:
3463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 8786              		.loc 1 3464 1
 8787 005a 1037     		adds	r7, r7, #16
 8788              	.LCFI303:
 8789              		.cfi_def_cfa_offset 8
 8790 005c BD46     		mov	sp, r7
 8791              	.LCFI304:
 8792              		.cfi_def_cfa_register 13
 8793              		@ sp needed
 8794 005e 80BD     		pop	{r7, pc}
 8795              		.cfi_endproc
 8796              	.LFE120:
 8798              		.section	.text.UART_DMATxOnlyAbortCallback,"ax",%progbits
 8799              		.align	1
 8800              		.syntax unified
 8801              		.thumb
 8802              		.thumb_func
 8804              	UART_DMATxOnlyAbortCallback:
 8805              	.LFB121:
3465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
3468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
3469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
3470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
3471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 8806              		.loc 1 3476 1
 8807              		.cfi_startproc
 8808              		@ args = 0, pretend = 0, frame = 16
 8809              		@ frame_needed = 1, uses_anonymous_args = 0
 8810 0000 80B5     		push	{r7, lr}
 8811              	.LCFI305:
 8812              		.cfi_def_cfa_offset 8
 8813              		.cfi_offset 7, -8
 8814              		.cfi_offset 14, -4
 8815 0002 84B0     		sub	sp, sp, #16
 8816              	.LCFI306:
 8817              		.cfi_def_cfa_offset 24
 8818 0004 00AF     		add	r7, sp, #0
 8819              	.LCFI307:
 8820              		.cfi_def_cfa_register 7
 8821 0006 7860     		str	r0, [r7, #4]
3477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8822              		.loc 1 3477 23
 8823 0008 7B68     		ldr	r3, [r7, #4]
 8824 000a 5B6A     		ldr	r3, [r3, #36]
 8825 000c FB60     		str	r3, [r7, #12]
3478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp//ccY11c6d.s 			page 238


3479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 8826              		.loc 1 3479 22
 8827 000e FB68     		ldr	r3, [r7, #12]
 8828 0010 0022     		movs	r2, #0
 8829 0012 DA84     		strh	r2, [r3, #38]	@ movhi
3480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState to Ready */
3482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 8830              		.loc 1 3482 17
 8831 0014 FB68     		ldr	r3, [r7, #12]
 8832 0016 2022     		movs	r2, #32
 8833 0018 83F84120 		strb	r2, [r3, #65]
3483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort Transmit Complete Callback */
3487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortTransmitCpltCallback(huart);
3488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort Transmit Complete Callback */
3490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
 8834              		.loc 1 3490 3
 8835 001c F868     		ldr	r0, [r7, #12]
 8836 001e FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
3491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 8837              		.loc 1 3492 1
 8838 0022 00BF     		nop
 8839 0024 1037     		adds	r7, r7, #16
 8840              	.LCFI308:
 8841              		.cfi_def_cfa_offset 8
 8842 0026 BD46     		mov	sp, r7
 8843              	.LCFI309:
 8844              		.cfi_def_cfa_register 13
 8845              		@ sp needed
 8846 0028 80BD     		pop	{r7, pc}
 8847              		.cfi_endproc
 8848              	.LFE121:
 8850              		.section	.text.UART_DMARxOnlyAbortCallback,"ax",%progbits
 8851              		.align	1
 8852              		.syntax unified
 8853              		.thumb
 8854              		.thumb_func
 8856              	UART_DMARxOnlyAbortCallback:
 8857              	.LFB122:
3493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
3496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
3497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
3498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
3499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 8858              		.loc 1 3504 1
ARM GAS  /tmp//ccY11c6d.s 			page 239


 8859              		.cfi_startproc
 8860              		@ args = 0, pretend = 0, frame = 16
 8861              		@ frame_needed = 1, uses_anonymous_args = 0
 8862 0000 80B5     		push	{r7, lr}
 8863              	.LCFI310:
 8864              		.cfi_def_cfa_offset 8
 8865              		.cfi_offset 7, -8
 8866              		.cfi_offset 14, -4
 8867 0002 84B0     		sub	sp, sp, #16
 8868              	.LCFI311:
 8869              		.cfi_def_cfa_offset 24
 8870 0004 00AF     		add	r7, sp, #0
 8871              	.LCFI312:
 8872              		.cfi_def_cfa_register 7
 8873 0006 7860     		str	r0, [r7, #4]
3505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8874              		.loc 1 3505 23
 8875 0008 7B68     		ldr	r3, [r7, #4]
 8876 000a 5B6A     		ldr	r3, [r3, #36]
 8877 000c FB60     		str	r3, [r7, #12]
3506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 8878              		.loc 1 3507 22
 8879 000e FB68     		ldr	r3, [r7, #12]
 8880 0010 0022     		movs	r2, #0
 8881 0012 DA85     		strh	r2, [r3, #46]	@ movhi
3508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
3510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 8882              		.loc 1 3510 18
 8883 0014 FB68     		ldr	r3, [r7, #12]
 8884 0016 2022     		movs	r2, #32
 8885 0018 83F84220 		strb	r2, [r3, #66]
3511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8886              		.loc 1 3511 24
 8887 001c FB68     		ldr	r3, [r7, #12]
 8888 001e 0022     		movs	r2, #0
 8889 0020 1A63     		str	r2, [r3, #48]
3512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort Receive Complete Callback */
3516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortReceiveCpltCallback(huart);
3517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort Receive Complete Callback */
3519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
 8890              		.loc 1 3519 3
 8891 0022 F868     		ldr	r0, [r7, #12]
 8892 0024 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
3520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 8893              		.loc 1 3521 1
 8894 0028 00BF     		nop
 8895 002a 1037     		adds	r7, r7, #16
 8896              	.LCFI313:
 8897              		.cfi_def_cfa_offset 8
 8898 002c BD46     		mov	sp, r7
ARM GAS  /tmp//ccY11c6d.s 			page 240


 8899              	.LCFI314:
 8900              		.cfi_def_cfa_register 13
 8901              		@ sp needed
 8902 002e 80BD     		pop	{r7, pc}
 8903              		.cfi_endproc
 8904              	.LFE122:
 8906              		.section	.text.UART_Transmit_IT,"ax",%progbits
 8907              		.align	1
 8908              		.syntax unified
 8909              		.thumb
 8910              		.thumb_func
 8912              	UART_Transmit_IT:
 8913              	.LFB123:
3522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
3525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
3530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 8914              		.loc 1 3530 1
 8915              		.cfi_startproc
 8916              		@ args = 0, pretend = 0, frame = 16
 8917              		@ frame_needed = 1, uses_anonymous_args = 0
 8918              		@ link register save eliminated.
 8919 0000 80B4     		push	{r7}
 8920              	.LCFI315:
 8921              		.cfi_def_cfa_offset 4
 8922              		.cfi_offset 7, -4
 8923 0002 85B0     		sub	sp, sp, #20
 8924              	.LCFI316:
 8925              		.cfi_def_cfa_offset 24
 8926 0004 00AF     		add	r7, sp, #0
 8927              	.LCFI317:
 8928              		.cfi_def_cfa_register 7
 8929 0006 7860     		str	r0, [r7, #4]
3531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   const uint16_t *tmp;
3532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8930              		.loc 1 3534 12
 8931 0008 7B68     		ldr	r3, [r7, #4]
 8932 000a 93F84130 		ldrb	r3, [r3, #65]
 8933 000e DBB2     		uxtb	r3, r3
 8934              		.loc 1 3534 6
 8935 0010 212B     		cmp	r3, #33
 8936 0012 3ED1     		bne	.L444
3535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8937              		.loc 1 3536 21
 8938 0014 7B68     		ldr	r3, [r7, #4]
 8939 0016 9B68     		ldr	r3, [r3, #8]
 8940              		.loc 1 3536 8
 8941 0018 B3F5805F 		cmp	r3, #4096
 8942 001c 14D1     		bne	.L445
ARM GAS  /tmp//ccY11c6d.s 			page 241


 8943              		.loc 1 3536 71 discriminator 1
 8944 001e 7B68     		ldr	r3, [r7, #4]
 8945 0020 1B69     		ldr	r3, [r3, #16]
 8946              		.loc 1 3536 56 discriminator 1
 8947 0022 002B     		cmp	r3, #0
 8948 0024 10D1     		bne	.L445
3537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       tmp = (const uint16_t *) huart->pTxBuffPtr;
 8949              		.loc 1 3538 11
 8950 0026 7B68     		ldr	r3, [r7, #4]
 8951 0028 1B6A     		ldr	r3, [r3, #32]
 8952 002a FB60     		str	r3, [r7, #12]
3539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8953              		.loc 1 3539 40
 8954 002c FB68     		ldr	r3, [r7, #12]
 8955 002e 1B88     		ldrh	r3, [r3]
 8956              		.loc 1 3539 29
 8957 0030 1A46     		mov	r2, r3
 8958              		.loc 1 3539 12
 8959 0032 7B68     		ldr	r3, [r7, #4]
 8960 0034 1B68     		ldr	r3, [r3]
 8961              		.loc 1 3539 29
 8962 0036 C2F30802 		ubfx	r2, r2, #0, #9
 8963              		.loc 1 3539 27
 8964 003a 5A60     		str	r2, [r3, #4]
3540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->pTxBuffPtr += 2U;
 8965              		.loc 1 3540 12
 8966 003c 7B68     		ldr	r3, [r7, #4]
 8967 003e 1B6A     		ldr	r3, [r3, #32]
 8968              		.loc 1 3540 25
 8969 0040 9A1C     		adds	r2, r3, #2
 8970 0042 7B68     		ldr	r3, [r7, #4]
 8971 0044 1A62     		str	r2, [r3, #32]
 8972 0046 08E0     		b	.L446
 8973              	.L445:
3541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
3543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8974              		.loc 1 3544 45
 8975 0048 7B68     		ldr	r3, [r7, #4]
 8976 004a 1B6A     		ldr	r3, [r3, #32]
 8977              		.loc 1 3544 57
 8978 004c 591C     		adds	r1, r3, #1
 8979 004e 7A68     		ldr	r2, [r7, #4]
 8980 0050 1162     		str	r1, [r2, #32]
 8981              		.loc 1 3544 39
 8982 0052 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 8983              		.loc 1 3544 12
 8984 0054 7B68     		ldr	r3, [r7, #4]
 8985 0056 1B68     		ldr	r3, [r3]
 8986              		.loc 1 3544 27
 8987 0058 5A60     		str	r2, [r3, #4]
 8988              	.L446:
3545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (--huart->TxXferCount == 0U)
ARM GAS  /tmp//ccY11c6d.s 			page 242


 8989              		.loc 1 3547 16
 8990 005a 7B68     		ldr	r3, [r7, #4]
 8991 005c DB8C     		ldrh	r3, [r3, #38]	@ movhi
 8992 005e 9BB2     		uxth	r3, r3
 8993              		.loc 1 3547 9
 8994 0060 013B     		subs	r3, r3, #1
 8995 0062 9BB2     		uxth	r3, r3
 8996              		.loc 1 3547 8
 8997 0064 7A68     		ldr	r2, [r7, #4]
 8998 0066 1946     		mov	r1, r3	@ movhi
 8999 0068 D184     		strh	r1, [r2, #38]	@ movhi
 9000 006a 002B     		cmp	r3, #0
 9001 006c 0FD1     		bne	.L447
3548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Transmit Data Register Empty Interrupt */
3550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 9002              		.loc 1 3550 7
 9003 006e 7B68     		ldr	r3, [r7, #4]
 9004 0070 1B68     		ldr	r3, [r3]
 9005 0072 DA68     		ldr	r2, [r3, #12]
 9006 0074 7B68     		ldr	r3, [r7, #4]
 9007 0076 1B68     		ldr	r3, [r3]
 9008 0078 22F08002 		bic	r2, r2, #128
 9009 007c DA60     		str	r2, [r3, #12]
3551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
3553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 9010              		.loc 1 3553 7
 9011 007e 7B68     		ldr	r3, [r7, #4]
 9012 0080 1B68     		ldr	r3, [r3]
 9013 0082 DA68     		ldr	r2, [r3, #12]
 9014 0084 7B68     		ldr	r3, [r7, #4]
 9015 0086 1B68     		ldr	r3, [r3]
 9016 0088 42F04002 		orr	r2, r2, #64
 9017 008c DA60     		str	r2, [r3, #12]
 9018              	.L447:
3554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 9019              		.loc 1 3555 12
 9020 008e 0023     		movs	r3, #0
 9021 0090 00E0     		b	.L448
 9022              	.L444:
3556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 9023              		.loc 1 3559 12
 9024 0092 0223     		movs	r3, #2
 9025              	.L448:
3560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 9026              		.loc 1 3561 1
 9027 0094 1846     		mov	r0, r3
 9028 0096 1437     		adds	r7, r7, #20
 9029              	.LCFI318:
 9030              		.cfi_def_cfa_offset 4
 9031 0098 BD46     		mov	sp, r7
ARM GAS  /tmp//ccY11c6d.s 			page 243


 9032              	.LCFI319:
 9033              		.cfi_def_cfa_register 13
 9034              		@ sp needed
 9035 009a 80BC     		pop	{r7}
 9036              	.LCFI320:
 9037              		.cfi_restore 7
 9038              		.cfi_def_cfa_offset 0
 9039 009c 7047     		bx	lr
 9040              		.cfi_endproc
 9041              	.LFE123:
 9043              		.section	.text.UART_EndTransmit_IT,"ax",%progbits
 9044              		.align	1
 9045              		.syntax unified
 9046              		.thumb
 9047              		.thumb_func
 9049              	UART_EndTransmit_IT:
 9050              	.LFB124:
3562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Wraps up transmission in non blocking mode.
3565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
3570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 9051              		.loc 1 3570 1
 9052              		.cfi_startproc
 9053              		@ args = 0, pretend = 0, frame = 8
 9054              		@ frame_needed = 1, uses_anonymous_args = 0
 9055 0000 80B5     		push	{r7, lr}
 9056              	.LCFI321:
 9057              		.cfi_def_cfa_offset 8
 9058              		.cfi_offset 7, -8
 9059              		.cfi_offset 14, -4
 9060 0002 82B0     		sub	sp, sp, #8
 9061              	.LCFI322:
 9062              		.cfi_def_cfa_offset 16
 9063 0004 00AF     		add	r7, sp, #0
 9064              	.LCFI323:
 9065              		.cfi_def_cfa_register 7
 9066 0006 7860     		str	r0, [r7, #4]
3571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
3572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 9067              		.loc 1 3572 3
 9068 0008 7B68     		ldr	r3, [r7, #4]
 9069 000a 1B68     		ldr	r3, [r3]
 9070 000c DA68     		ldr	r2, [r3, #12]
 9071 000e 7B68     		ldr	r3, [r7, #4]
 9072 0010 1B68     		ldr	r3, [r3]
 9073 0012 22F04002 		bic	r2, r2, #64
 9074 0016 DA60     		str	r2, [r3, #12]
3573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
3575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 9075              		.loc 1 3575 17
 9076 0018 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp//ccY11c6d.s 			page 244


 9077 001a 2022     		movs	r2, #32
 9078 001c 83F84120 		strb	r2, [r3, #65]
3576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered Tx complete callback*/
3579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxCpltCallback(huart);
3580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
3582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
 9079              		.loc 1 3582 3
 9080 0020 7868     		ldr	r0, [r7, #4]
 9081 0022 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
3583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 9082              		.loc 1 3585 10
 9083 0026 0023     		movs	r3, #0
3586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 9084              		.loc 1 3586 1
 9085 0028 1846     		mov	r0, r3
 9086 002a 0837     		adds	r7, r7, #8
 9087              	.LCFI324:
 9088              		.cfi_def_cfa_offset 8
 9089 002c BD46     		mov	sp, r7
 9090              	.LCFI325:
 9091              		.cfi_def_cfa_register 13
 9092              		@ sp needed
 9093 002e 80BD     		pop	{r7, pc}
 9094              		.cfi_endproc
 9095              	.LFE124:
 9097              		.section	.text.UART_Receive_IT,"ax",%progbits
 9098              		.align	1
 9099              		.syntax unified
 9100              		.thumb
 9101              		.thumb_func
 9103              	UART_Receive_IT:
 9104              	.LFB125:
3587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode
3590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
3595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 9105              		.loc 1 3595 1
 9106              		.cfi_startproc
 9107              		@ args = 0, pretend = 0, frame = 48
 9108              		@ frame_needed = 1, uses_anonymous_args = 0
 9109 0000 80B5     		push	{r7, lr}
 9110              	.LCFI326:
 9111              		.cfi_def_cfa_offset 8
 9112              		.cfi_offset 7, -8
 9113              		.cfi_offset 14, -4
 9114 0002 8CB0     		sub	sp, sp, #48
 9115              	.LCFI327:
ARM GAS  /tmp//ccY11c6d.s 			page 245


 9116              		.cfi_def_cfa_offset 56
 9117 0004 00AF     		add	r7, sp, #0
 9118              	.LCFI328:
 9119              		.cfi_def_cfa_register 7
 9120 0006 7860     		str	r0, [r7, #4]
3596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint8_t  *pdata8bits;
3597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *pdata16bits;
3598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
3600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 9121              		.loc 1 3600 12
 9122 0008 7B68     		ldr	r3, [r7, #4]
 9123 000a 93F84230 		ldrb	r3, [r3, #66]
 9124 000e DBB2     		uxtb	r3, r3
 9125              		.loc 1 3600 6
 9126 0010 222B     		cmp	r3, #34
 9127 0012 40F0AE80 		bne	.L452
3601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 9128              		.loc 1 3602 21
 9129 0016 7B68     		ldr	r3, [r7, #4]
 9130 0018 9B68     		ldr	r3, [r3, #8]
 9131              		.loc 1 3602 8
 9132 001a B3F5805F 		cmp	r3, #4096
 9133 001e 17D1     		bne	.L453
 9134              		.loc 1 3602 71 discriminator 1
 9135 0020 7B68     		ldr	r3, [r7, #4]
 9136 0022 1B69     		ldr	r3, [r3, #16]
 9137              		.loc 1 3602 56 discriminator 1
 9138 0024 002B     		cmp	r3, #0
 9139 0026 13D1     		bne	.L453
3603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 9140              		.loc 1 3604 19
 9141 0028 0023     		movs	r3, #0
 9142 002a FB62     		str	r3, [r7, #44]
3605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 9143              		.loc 1 3605 19
 9144 002c 7B68     		ldr	r3, [r7, #4]
 9145 002e 9B6A     		ldr	r3, [r3, #40]
 9146 0030 BB62     		str	r3, [r7, #40]
3606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 9147              		.loc 1 3606 38
 9148 0032 7B68     		ldr	r3, [r7, #4]
 9149 0034 1B68     		ldr	r3, [r3]
 9150              		.loc 1 3606 48
 9151 0036 5B68     		ldr	r3, [r3, #4]
 9152              		.loc 1 3606 22
 9153 0038 9BB2     		uxth	r3, r3
 9154 003a C3F30803 		ubfx	r3, r3, #0, #9
 9155 003e 9AB2     		uxth	r2, r3
 9156              		.loc 1 3606 20
 9157 0040 BB6A     		ldr	r3, [r7, #40]
 9158 0042 1A80     		strh	r2, [r3]	@ movhi
3607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->pRxBuffPtr += 2U;
 9159              		.loc 1 3607 12
 9160 0044 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp//ccY11c6d.s 			page 246


 9161 0046 9B6A     		ldr	r3, [r3, #40]
 9162              		.loc 1 3607 25
 9163 0048 9A1C     		adds	r2, r3, #2
 9164 004a 7B68     		ldr	r3, [r7, #4]
 9165 004c 9A62     		str	r2, [r3, #40]
 9166 004e 26E0     		b	.L454
 9167              	.L453:
3608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
3610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 9168              		.loc 1 3611 18
 9169 0050 7B68     		ldr	r3, [r7, #4]
 9170 0052 9B6A     		ldr	r3, [r3, #40]
 9171 0054 FB62     		str	r3, [r7, #44]
3612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits  = NULL;
 9172              		.loc 1 3612 20
 9173 0056 0023     		movs	r3, #0
 9174 0058 BB62     		str	r3, [r7, #40]
3613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLE
 9175              		.loc 1 3614 23
 9176 005a 7B68     		ldr	r3, [r7, #4]
 9177 005c 9B68     		ldr	r3, [r3, #8]
 9178              		.loc 1 3614 10
 9179 005e B3F5805F 		cmp	r3, #4096
 9180 0062 07D0     		beq	.L455
 9181              		.loc 1 3614 74 discriminator 1
 9182 0064 7B68     		ldr	r3, [r7, #4]
 9183 0066 9B68     		ldr	r3, [r3, #8]
 9184              		.loc 1 3614 58 discriminator 1
 9185 0068 002B     		cmp	r3, #0
 9186 006a 0AD1     		bne	.L456
 9187              		.loc 1 3614 124 discriminator 2
 9188 006c 7B68     		ldr	r3, [r7, #4]
 9189 006e 1B69     		ldr	r3, [r3, #16]
 9190              		.loc 1 3614 109 discriminator 2
 9191 0070 002B     		cmp	r3, #0
 9192 0072 06D1     		bne	.L456
 9193              	.L455:
3615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 9194              		.loc 1 3616 38
 9195 0074 7B68     		ldr	r3, [r7, #4]
 9196 0076 1B68     		ldr	r3, [r3]
 9197              		.loc 1 3616 48
 9198 0078 5B68     		ldr	r3, [r3, #4]
 9199              		.loc 1 3616 23
 9200 007a DAB2     		uxtb	r2, r3
 9201              		.loc 1 3616 21
 9202 007c FB6A     		ldr	r3, [r7, #44]
 9203 007e 1A70     		strb	r2, [r3]
 9204 0080 08E0     		b	.L457
 9205              	.L456:
3617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
3619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
ARM GAS  /tmp//ccY11c6d.s 			page 247


3620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 9206              		.loc 1 3620 38
 9207 0082 7B68     		ldr	r3, [r7, #4]
 9208 0084 1B68     		ldr	r3, [r3]
 9209              		.loc 1 3620 48
 9210 0086 5B68     		ldr	r3, [r3, #4]
 9211              		.loc 1 3620 23
 9212 0088 DBB2     		uxtb	r3, r3
 9213 008a 03F07F03 		and	r3, r3, #127
 9214 008e DAB2     		uxtb	r2, r3
 9215              		.loc 1 3620 21
 9216 0090 FB6A     		ldr	r3, [r7, #44]
 9217 0092 1A70     		strb	r2, [r3]
 9218              	.L457:
3621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->pRxBuffPtr += 1U;
 9219              		.loc 1 3622 12
 9220 0094 7B68     		ldr	r3, [r7, #4]
 9221 0096 9B6A     		ldr	r3, [r3, #40]
 9222              		.loc 1 3622 25
 9223 0098 5A1C     		adds	r2, r3, #1
 9224 009a 7B68     		ldr	r3, [r7, #4]
 9225 009c 9A62     		str	r2, [r3, #40]
 9226              	.L454:
3623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (--huart->RxXferCount == 0U)
 9227              		.loc 1 3625 16
 9228 009e 7B68     		ldr	r3, [r7, #4]
 9229 00a0 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 9230 00a2 9BB2     		uxth	r3, r3
 9231              		.loc 1 3625 9
 9232 00a4 013B     		subs	r3, r3, #1
 9233 00a6 9BB2     		uxth	r3, r3
 9234              		.loc 1 3625 8
 9235 00a8 7A68     		ldr	r2, [r7, #4]
 9236 00aa 1946     		mov	r1, r3	@ movhi
 9237 00ac D185     		strh	r1, [r2, #46]	@ movhi
 9238 00ae 002B     		cmp	r3, #0
 9239 00b0 5DD1     		bne	.L458
3626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Data Register not empty Interrupt */
3628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 9240              		.loc 1 3628 7
 9241 00b2 7B68     		ldr	r3, [r7, #4]
 9242 00b4 1B68     		ldr	r3, [r3]
 9243 00b6 DA68     		ldr	r2, [r3, #12]
 9244 00b8 7B68     		ldr	r3, [r7, #4]
 9245 00ba 1B68     		ldr	r3, [r3]
 9246 00bc 22F02002 		bic	r2, r2, #32
 9247 00c0 DA60     		str	r2, [r3, #12]
3629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt */
3631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 9248              		.loc 1 3631 7
 9249 00c2 7B68     		ldr	r3, [r7, #4]
 9250 00c4 1B68     		ldr	r3, [r3]
ARM GAS  /tmp//ccY11c6d.s 			page 248


 9251 00c6 DA68     		ldr	r2, [r3, #12]
 9252 00c8 7B68     		ldr	r3, [r7, #4]
 9253 00ca 1B68     		ldr	r3, [r3]
 9254 00cc 22F48072 		bic	r2, r2, #256
 9255 00d0 DA60     		str	r2, [r3, #12]
3632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 9256              		.loc 1 3634 7
 9257 00d2 7B68     		ldr	r3, [r7, #4]
 9258 00d4 1B68     		ldr	r3, [r3]
 9259 00d6 5A69     		ldr	r2, [r3, #20]
 9260 00d8 7B68     		ldr	r3, [r7, #4]
 9261 00da 1B68     		ldr	r3, [r3]
 9262 00dc 22F00102 		bic	r2, r2, #1
 9263 00e0 5A61     		str	r2, [r3, #20]
3635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 9264              		.loc 1 3637 22
 9265 00e2 7B68     		ldr	r3, [r7, #4]
 9266 00e4 2022     		movs	r2, #32
 9267 00e6 83F84220 		strb	r2, [r3, #66]
3638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Initialize type of RxEvent to Transfer Complete */
3640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxEventType = HAL_UART_RXEVENT_TC;
 9268              		.loc 1 3640 26
 9269 00ea 7B68     		ldr	r3, [r7, #4]
 9270 00ec 0022     		movs	r2, #0
 9271 00ee 5A63     		str	r2, [r3, #52]
3641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check current reception Mode :
3643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          If Reception till IDLE event has been selected : */
3644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 9272              		.loc 1 3644 16
 9273 00f0 7B68     		ldr	r3, [r7, #4]
 9274 00f2 1B6B     		ldr	r3, [r3, #48]
 9275              		.loc 1 3644 10
 9276 00f4 012B     		cmp	r3, #1
 9277 00f6 35D1     		bne	.L459
3645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Set reception type to Standard */
3647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 9278              		.loc 1 3647 30
 9279 00f8 7B68     		ldr	r3, [r7, #4]
 9280 00fa 0022     		movs	r2, #0
 9281 00fc 1A63     		str	r2, [r3, #48]
 9282              	.L462:
 9283              	.LBB616:
3648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable IDLE interrupt */
3650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 9284              		.loc 1 3650 9 discriminator 1
 9285 00fe 7B68     		ldr	r3, [r7, #4]
 9286 0100 1B68     		ldr	r3, [r3]
 9287 0102 0C33     		adds	r3, r3, #12
 9288 0104 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp//ccY11c6d.s 			page 249


 9289              	.LBB617:
 9290              	.LBB618:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 9291              		.loc 2 1072 4
 9292 0106 7B69     		ldr	r3, [r7, #20]
 9293              		.syntax unified
 9294              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 9295 0108 53E8003F 		ldrex r3, [r3]
 9296              	@ 0 "" 2
 9297              		.thumb
 9298              		.syntax unified
 9299 010c 3B61     		str	r3, [r7, #16]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 9300              		.loc 2 1073 10
 9301 010e 3B69     		ldr	r3, [r7, #16]
 9302              	.LBE618:
 9303              	.LBE617:
 9304              		.loc 1 3650 9 discriminator 1
 9305 0110 23F01003 		bic	r3, r3, #16
 9306 0114 7B62     		str	r3, [r7, #36]
 9307 0116 7B68     		ldr	r3, [r7, #4]
 9308 0118 1B68     		ldr	r3, [r3]
 9309 011a 0C33     		adds	r3, r3, #12
 9310 011c 7A6A     		ldr	r2, [r7, #36]
 9311 011e 3A62     		str	r2, [r7, #32]
 9312 0120 FB61     		str	r3, [r7, #28]
 9313              	.LBB619:
 9314              	.LBB620:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 9315              		.loc 2 1123 4
 9316 0122 F969     		ldr	r1, [r7, #28]
 9317 0124 3A6A     		ldr	r2, [r7, #32]
 9318              		.syntax unified
 9319              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 9320 0126 41E80023 		strex r3, r2, [r1]
 9321              	@ 0 "" 2
 9322              		.thumb
 9323              		.syntax unified
 9324 012a BB61     		str	r3, [r7, #24]
 9325              		.loc 2 1124 10
 9326 012c BB69     		ldr	r3, [r7, #24]
 9327              	.LBE620:
 9328              	.LBE619:
 9329              		.loc 1 3650 9 discriminator 1
 9330 012e 002B     		cmp	r3, #0
 9331 0130 E5D1     		bne	.L462
 9332              	.LBE616:
3651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Check if IDLE flag is set */
3653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 9333              		.loc 1 3653 13
 9334 0132 7B68     		ldr	r3, [r7, #4]
 9335 0134 1B68     		ldr	r3, [r3]
 9336 0136 1B68     		ldr	r3, [r3]
 9337 0138 03F01003 		and	r3, r3, #16
 9338              		.loc 1 3653 12
 9339 013c 102B     		cmp	r3, #16
ARM GAS  /tmp//ccY11c6d.s 			page 250


 9340 013e 0AD1     		bne	.L463
 9341              	.LBB621:
3654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
3655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Clear IDLE flag in ISR */
3656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           __HAL_UART_CLEAR_IDLEFLAG(huart);
 9342              		.loc 1 3656 11
 9343 0140 0023     		movs	r3, #0
 9344 0142 FB60     		str	r3, [r7, #12]
 9345 0144 7B68     		ldr	r3, [r7, #4]
 9346 0146 1B68     		ldr	r3, [r3]
 9347 0148 1B68     		ldr	r3, [r3]
 9348 014a FB60     		str	r3, [r7, #12]
 9349 014c 7B68     		ldr	r3, [r7, #4]
 9350 014e 1B68     		ldr	r3, [r3]
 9351 0150 5B68     		ldr	r3, [r3, #4]
 9352 0152 FB60     		str	r3, [r7, #12]
 9353 0154 FB68     		ldr	r3, [r7, #12]
 9354              	.L463:
 9355              	.LBE621:
3657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
3658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered Rx Event callback*/
3661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxEventCallback(huart, huart->RxXferSize);
3662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
3664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 9356              		.loc 1 3664 9
 9357 0156 7B68     		ldr	r3, [r7, #4]
 9358 0158 9B8D     		ldrh	r3, [r3, #44]
 9359 015a 1946     		mov	r1, r3
 9360 015c 7868     		ldr	r0, [r7, #4]
 9361 015e FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
 9362 0162 02E0     		b	.L464
 9363              	.L459:
3665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
3668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Standard reception API called */
3670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered Rx complete callback*/
3672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxCpltCallback(huart);
3673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak Rx complete callback*/
3675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UART_RxCpltCallback(huart);
 9364              		.loc 1 3675 9
 9365 0164 7868     		ldr	r0, [r7, #4]
 9366 0166 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 9367              	.L464:
3676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_OK;
 9368              		.loc 1 3679 14
 9369 016a 0023     		movs	r3, #0
 9370 016c 02E0     		b	.L465
ARM GAS  /tmp//ccY11c6d.s 			page 251


 9371              	.L458:
3680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 9372              		.loc 1 3681 12
 9373 016e 0023     		movs	r3, #0
 9374 0170 00E0     		b	.L465
 9375              	.L452:
3682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 9376              		.loc 1 3685 12
 9377 0172 0223     		movs	r3, #2
 9378              	.L465:
3686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 9379              		.loc 1 3687 1
 9380 0174 1846     		mov	r0, r3
 9381 0176 3037     		adds	r7, r7, #48
 9382              	.LCFI329:
 9383              		.cfi_def_cfa_offset 8
 9384 0178 BD46     		mov	sp, r7
 9385              	.LCFI330:
 9386              		.cfi_def_cfa_register 13
 9387              		@ sp needed
 9388 017a 80BD     		pop	{r7, pc}
 9389              		.cfi_endproc
 9390              	.LFE125:
 9392              		.section	.text.UART_SetConfig,"ax",%progbits
 9393              		.align	1
 9394              		.syntax unified
 9395              		.thumb
 9396              		.thumb_func
 9398              	UART_SetConfig:
 9399              	.LFB126:
3688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Configures the UART peripheral.
3691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart)
3696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 9400              		.loc 1 3696 1
 9401              		.cfi_startproc
 9402              		@ args = 0, pretend = 0, frame = 16
 9403              		@ frame_needed = 1, uses_anonymous_args = 0
 9404 0000 80B5     		push	{r7, lr}
 9405              	.LCFI331:
 9406              		.cfi_def_cfa_offset 8
 9407              		.cfi_offset 7, -8
 9408              		.cfi_offset 14, -4
 9409 0002 84B0     		sub	sp, sp, #16
 9410              	.LCFI332:
 9411              		.cfi_def_cfa_offset 24
 9412 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp//ccY11c6d.s 			page 252


 9413              	.LCFI333:
 9414              		.cfi_def_cfa_register 7
 9415 0006 7860     		str	r0, [r7, #4]
3697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg;
3698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t pclk;
3699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
3701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
3704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
3705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
3707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits
3708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      according to huart->Init.StopBits value */
3709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 9416              		.loc 1 3709 3
 9417 0008 7B68     		ldr	r3, [r7, #4]
 9418 000a 1B68     		ldr	r3, [r3]
 9419 000c 1B69     		ldr	r3, [r3, #16]
 9420 000e 23F44051 		bic	r1, r3, #12288
 9421 0012 7B68     		ldr	r3, [r7, #4]
 9422 0014 DA68     		ldr	r2, [r3, #12]
 9423 0016 7B68     		ldr	r3, [r7, #4]
 9424 0018 1B68     		ldr	r3, [r3]
 9425 001a 0A43     		orrs	r2, r2, r1
 9426 001c 1A61     		str	r2, [r3, #16]
3710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
3712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART Word Length, Parity and mode:
3713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set the M bits according to huart->Init.WordLength value
3714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set PCE and PS bits according to huart->Init.Parity value
3715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set TE and RE bits according to huart->Init.Mode value
3716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set OVER8 bit according to huart->Init.OverSampling value */
3717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
3719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
3720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1,
3721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | 
3722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              tmpreg);
3723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 9427              		.loc 1 3724 33
 9428 001e 7B68     		ldr	r3, [r7, #4]
 9429 0020 9A68     		ldr	r2, [r3, #8]
 9430              		.loc 1 3724 58
 9431 0022 7B68     		ldr	r3, [r7, #4]
 9432 0024 1B69     		ldr	r3, [r3, #16]
 9433              		.loc 1 3724 45
 9434 0026 1A43     		orrs	r2, r2, r3
 9435              		.loc 1 3724 79
 9436 0028 7B68     		ldr	r3, [r7, #4]
 9437 002a 5B69     		ldr	r3, [r3, #20]
 9438              		.loc 1 3724 10
 9439 002c 1343     		orrs	r3, r3, r2
 9440 002e BB60     		str	r3, [r7, #8]
3725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1,
ARM GAS  /tmp//ccY11c6d.s 			page 253


 9441              		.loc 1 3725 3
 9442 0030 7B68     		ldr	r3, [r7, #4]
 9443 0032 1B68     		ldr	r3, [r3]
 9444 0034 DB68     		ldr	r3, [r3, #12]
 9445 0036 23F4B053 		bic	r3, r3, #5632
 9446 003a 23F00C03 		bic	r3, r3, #12
 9447 003e 7A68     		ldr	r2, [r7, #4]
 9448 0040 1268     		ldr	r2, [r2]
 9449 0042 B968     		ldr	r1, [r7, #8]
 9450 0044 0B43     		orrs	r3, r3, r1
 9451 0046 D360     		str	r3, [r2, #12]
3726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE),
3727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              tmpreg);
3728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
3729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
3731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
3732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 9452              		.loc 1 3732 3
 9453 0048 7B68     		ldr	r3, [r7, #4]
 9454 004a 1B68     		ldr	r3, [r3]
 9455 004c 5B69     		ldr	r3, [r3, #20]
 9456 004e 23F44071 		bic	r1, r3, #768
 9457 0052 7B68     		ldr	r3, [r7, #4]
 9458 0054 9A69     		ldr	r2, [r3, #24]
 9459 0056 7B68     		ldr	r3, [r7, #4]
 9460 0058 1B68     		ldr	r3, [r3]
 9461 005a 0A43     		orrs	r2, r2, r1
 9462 005c 5A61     		str	r2, [r3, #20]
3733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->Instance == USART1)
 9463              		.loc 1 3735 11
 9464 005e 7B68     		ldr	r3, [r7, #4]
 9465 0060 1B68     		ldr	r3, [r3]
 9466              		.loc 1 3735 5
 9467 0062 2C4A     		ldr	r2, .L469
 9468 0064 9342     		cmp	r3, r2
 9469 0066 03D1     		bne	.L467
3736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     pclk = HAL_RCC_GetPCLK2Freq();
 9470              		.loc 1 3737 12
 9471 0068 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 9472 006c F860     		str	r0, [r7, #12]
 9473 006e 02E0     		b	.L468
 9474              	.L467:
3738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     pclk = HAL_RCC_GetPCLK1Freq();
 9475              		.loc 1 3741 12
 9476 0070 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 9477 0074 F860     		str	r0, [r7, #12]
 9478              	.L468:
3742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART BRR Configuration ---------------------*/
ARM GAS  /tmp//ccY11c6d.s 			page 254


3745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
3746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
3749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
3753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 9479              		.loc 1 3755 26
 9480 0076 FA68     		ldr	r2, [r7, #12]
 9481 0078 1346     		mov	r3, r2
 9482 007a 9B00     		lsls	r3, r3, #2
 9483 007c 1344     		add	r3, r3, r2
 9484 007e 9A00     		lsls	r2, r3, #2
 9485 0080 1A44     		add	r2, r2, r3
 9486 0082 7B68     		ldr	r3, [r7, #4]
 9487 0084 5B68     		ldr	r3, [r3, #4]
 9488 0086 9B00     		lsls	r3, r3, #2
 9489 0088 B2FBF3F3 		udiv	r3, r2, r3
 9490 008c 224A     		ldr	r2, .L469+4
 9491 008e A2FB0323 		umull	r2, r3, r2, r3
 9492 0092 5B09     		lsrs	r3, r3, #5
 9493 0094 1901     		lsls	r1, r3, #4
 9494 0096 FA68     		ldr	r2, [r7, #12]
 9495 0098 1346     		mov	r3, r2
 9496 009a 9B00     		lsls	r3, r3, #2
 9497 009c 1344     		add	r3, r3, r2
 9498 009e 9A00     		lsls	r2, r3, #2
 9499 00a0 1A44     		add	r2, r2, r3
 9500 00a2 7B68     		ldr	r3, [r7, #4]
 9501 00a4 5B68     		ldr	r3, [r3, #4]
 9502 00a6 9B00     		lsls	r3, r3, #2
 9503 00a8 B2FBF3F2 		udiv	r2, r2, r3
 9504 00ac 1A4B     		ldr	r3, .L469+4
 9505 00ae A3FB0203 		umull	r0, r3, r3, r2
 9506 00b2 5B09     		lsrs	r3, r3, #5
 9507 00b4 6420     		movs	r0, #100
 9508 00b6 00FB03F3 		mul	r3, r0, r3
 9509 00ba D31A     		subs	r3, r2, r3
 9510 00bc 1B01     		lsls	r3, r3, #4
 9511 00be 3233     		adds	r3, r3, #50
 9512 00c0 154A     		ldr	r2, .L469+4
 9513 00c2 A2FB0323 		umull	r2, r3, r2, r3
 9514 00c6 5B09     		lsrs	r3, r3, #5
 9515 00c8 03F0F003 		and	r3, r3, #240
 9516 00cc 1944     		add	r1, r1, r3
 9517 00ce FA68     		ldr	r2, [r7, #12]
 9518 00d0 1346     		mov	r3, r2
 9519 00d2 9B00     		lsls	r3, r3, #2
 9520 00d4 1344     		add	r3, r3, r2
 9521 00d6 9A00     		lsls	r2, r3, #2
 9522 00d8 1A44     		add	r2, r2, r3
 9523 00da 7B68     		ldr	r3, [r7, #4]
 9524 00dc 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp//ccY11c6d.s 			page 255


 9525 00de 9B00     		lsls	r3, r3, #2
 9526 00e0 B2FBF3F2 		udiv	r2, r2, r3
 9527 00e4 0C4B     		ldr	r3, .L469+4
 9528 00e6 A3FB0203 		umull	r0, r3, r3, r2
 9529 00ea 5B09     		lsrs	r3, r3, #5
 9530 00ec 6420     		movs	r0, #100
 9531 00ee 00FB03F3 		mul	r3, r0, r3
 9532 00f2 D31A     		subs	r3, r2, r3
 9533 00f4 1B01     		lsls	r3, r3, #4
 9534 00f6 3233     		adds	r3, r3, #50
 9535 00f8 074A     		ldr	r2, .L469+4
 9536 00fa A2FB0323 		umull	r2, r3, r2, r3
 9537 00fe 5B09     		lsrs	r3, r3, #5
 9538 0100 03F00F02 		and	r2, r3, #15
 9539              		.loc 1 3755 8
 9540 0104 7B68     		ldr	r3, [r7, #4]
 9541 0106 1B68     		ldr	r3, [r3]
 9542              		.loc 1 3755 26
 9543 0108 0A44     		add	r2, r2, r1
 9544              		.loc 1 3755 24
 9545 010a 9A60     		str	r2, [r3, #8]
3756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
3757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 9546              		.loc 1 3757 1
 9547 010c 00BF     		nop
 9548 010e 1037     		adds	r7, r7, #16
 9549              	.LCFI334:
 9550              		.cfi_def_cfa_offset 8
 9551 0110 BD46     		mov	sp, r7
 9552              	.LCFI335:
 9553              		.cfi_def_cfa_register 13
 9554              		@ sp needed
 9555 0112 80BD     		pop	{r7, pc}
 9556              	.L470:
 9557              		.align	2
 9558              	.L469:
 9559 0114 00380140 		.word	1073821696
 9560 0118 1F85EB51 		.word	1374389535
 9561              		.cfi_endproc
 9562              	.LFE126:
 9564              		.text
 9565              	.Letext0:
 9566              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 9567              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 9568              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 9569              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 9570              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 9571              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 9572              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 9573              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 9574              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp//ccY11c6d.s 			page 256


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f1xx_hal_uart.c
    /tmp//ccY11c6d.s:19     .text.HAL_UART_Init:00000000 $t
    /tmp//ccY11c6d.s:25     .text.HAL_UART_Init:00000000 HAL_UART_Init
    /tmp//ccY11c6d.s:660    .text.HAL_UART_MspInit:00000000 HAL_UART_MspInit
    /tmp//ccY11c6d.s:9398   .text.UART_SetConfig:00000000 UART_SetConfig
    /tmp//ccY11c6d.s:138    .text.HAL_HalfDuplex_Init:00000000 $t
    /tmp//ccY11c6d.s:144    .text.HAL_HalfDuplex_Init:00000000 HAL_HalfDuplex_Init
    /tmp//ccY11c6d.s:265    .text.HAL_LIN_Init:00000000 $t
    /tmp//ccY11c6d.s:271    .text.HAL_LIN_Init:00000000 HAL_LIN_Init
    /tmp//ccY11c6d.s:410    .text.HAL_MultiProcessor_Init:00000000 $t
    /tmp//ccY11c6d.s:416    .text.HAL_MultiProcessor_Init:00000000 HAL_MultiProcessor_Init
    /tmp//ccY11c6d.s:566    .text.HAL_UART_DeInit:00000000 $t
    /tmp//ccY11c6d.s:572    .text.HAL_UART_DeInit:00000000 HAL_UART_DeInit
    /tmp//ccY11c6d.s:702    .text.HAL_UART_MspDeInit:00000000 HAL_UART_MspDeInit
    /tmp//ccY11c6d.s:654    .text.HAL_UART_MspInit:00000000 $t
    /tmp//ccY11c6d.s:696    .text.HAL_UART_MspDeInit:00000000 $t
    /tmp//ccY11c6d.s:738    .text.HAL_UART_Transmit:00000000 $t
    /tmp//ccY11c6d.s:744    .text.HAL_UART_Transmit:00000000 HAL_UART_Transmit
    /tmp//ccY11c6d.s:7743   .text.UART_WaitOnFlagUntilTimeout:00000000 UART_WaitOnFlagUntilTimeout
    /tmp//ccY11c6d.s:955    .text.HAL_UART_Receive:00000000 $t
    /tmp//ccY11c6d.s:961    .text.HAL_UART_Receive:00000000 HAL_UART_Receive
    /tmp//ccY11c6d.s:1192   .text.HAL_UART_Transmit_IT:00000000 $t
    /tmp//ccY11c6d.s:1198   .text.HAL_UART_Transmit_IT:00000000 HAL_UART_Transmit_IT
    /tmp//ccY11c6d.s:1292   .text.HAL_UART_Receive_IT:00000000 $t
    /tmp//ccY11c6d.s:1298   .text.HAL_UART_Receive_IT:00000000 HAL_UART_Receive_IT
    /tmp//ccY11c6d.s:7885   .text.UART_Start_Receive_IT:00000000 UART_Start_Receive_IT
    /tmp//ccY11c6d.s:1369   .text.HAL_UART_Transmit_DMA:00000000 $t
    /tmp//ccY11c6d.s:1375   .text.HAL_UART_Transmit_DMA:00000000 HAL_UART_Transmit_DMA
    /tmp//ccY11c6d.s:1555   .text.HAL_UART_Transmit_DMA:000000d4 $d
    /tmp//ccY11c6d.s:7059   .text.UART_DMATransmitCplt:00000000 UART_DMATransmitCplt
    /tmp//ccY11c6d.s:7223   .text.UART_DMATxHalfCplt:00000000 UART_DMATxHalfCplt
    /tmp//ccY11c6d.s:7627   .text.UART_DMAError:00000000 UART_DMAError
    /tmp//ccY11c6d.s:1562   .text.HAL_UART_Receive_DMA:00000000 $t
    /tmp//ccY11c6d.s:1568   .text.HAL_UART_Receive_DMA:00000000 HAL_UART_Receive_DMA
    /tmp//ccY11c6d.s:7983   .text.UART_Start_Receive_DMA:00000000 UART_Start_Receive_DMA
    /tmp//ccY11c6d.s:1639   .text.HAL_UART_DMAPause:00000000 $t
    /tmp//ccY11c6d.s:1645   .text.HAL_UART_DMAPause:00000000 HAL_UART_DMAPause
    /tmp//ccY11c6d.s:1938   .text.HAL_UART_DMAResume:00000000 $t
    /tmp//ccY11c6d.s:1944   .text.HAL_UART_DMAResume:00000000 HAL_UART_DMAResume
    /tmp//ccY11c6d.s:2222   .text.HAL_UART_DMAStop:00000000 $t
    /tmp//ccY11c6d.s:2228   .text.HAL_UART_DMAStop:00000000 HAL_UART_DMAStop
    /tmp//ccY11c6d.s:8261   .text.UART_EndTxTransfer:00000000 UART_EndTxTransfer
    /tmp//ccY11c6d.s:8357   .text.UART_EndRxTransfer:00000000 UART_EndRxTransfer
    /tmp//ccY11c6d.s:2445   .text.HAL_UARTEx_ReceiveToIdle:00000000 $t
    /tmp//ccY11c6d.s:2451   .text.HAL_UARTEx_ReceiveToIdle:00000000 HAL_UARTEx_ReceiveToIdle
    /tmp//ccY11c6d.s:2763   .text.HAL_UARTEx_ReceiveToIdle_IT:00000000 $t
    /tmp//ccY11c6d.s:2769   .text.HAL_UARTEx_ReceiveToIdle_IT:00000000 HAL_UARTEx_ReceiveToIdle_IT
    /tmp//ccY11c6d.s:2928   .text.HAL_UARTEx_ReceiveToIdle_DMA:00000000 $t
    /tmp//ccY11c6d.s:2934   .text.HAL_UARTEx_ReceiveToIdle_DMA:00000000 HAL_UARTEx_ReceiveToIdle_DMA
    /tmp//ccY11c6d.s:3089   .text.HAL_UARTEx_GetRxEventType:00000000 $t
    /tmp//ccY11c6d.s:3095   .text.HAL_UARTEx_GetRxEventType:00000000 HAL_UARTEx_GetRxEventType
    /tmp//ccY11c6d.s:3134   .text.HAL_UART_Abort:00000000 $t
    /tmp//ccY11c6d.s:3140   .text.HAL_UART_Abort:00000000 HAL_UART_Abort
    /tmp//ccY11c6d.s:3553   .text.HAL_UART_AbortTransmit:00000000 $t
    /tmp//ccY11c6d.s:3559   .text.HAL_UART_AbortTransmit:00000000 HAL_UART_AbortTransmit
    /tmp//ccY11c6d.s:3750   .text.HAL_UART_AbortReceive:00000000 $t
ARM GAS  /tmp//ccY11c6d.s 			page 257


    /tmp//ccY11c6d.s:3756   .text.HAL_UART_AbortReceive:00000000 HAL_UART_AbortReceive
    /tmp//ccY11c6d.s:4060   .text.HAL_UART_Abort_IT:00000000 $t
    /tmp//ccY11c6d.s:4066   .text.HAL_UART_Abort_IT:00000000 HAL_UART_Abort_IT
    /tmp//ccY11c6d.s:6218   .text.HAL_UART_AbortCpltCallback:00000000 HAL_UART_AbortCpltCallback
    /tmp//ccY11c6d.s:4527   .text.HAL_UART_Abort_IT:00000220 $d
    /tmp//ccY11c6d.s:8618   .text.UART_DMATxAbortCallback:00000000 UART_DMATxAbortCallback
    /tmp//ccY11c6d.s:8711   .text.UART_DMARxAbortCallback:00000000 UART_DMARxAbortCallback
    /tmp//ccY11c6d.s:4533   .text.HAL_UART_AbortTransmit_IT:00000000 $t
    /tmp//ccY11c6d.s:4539   .text.HAL_UART_AbortTransmit_IT:00000000 HAL_UART_AbortTransmit_IT
    /tmp//ccY11c6d.s:6260   .text.HAL_UART_AbortTransmitCpltCallback:00000000 HAL_UART_AbortTransmitCpltCallback
    /tmp//ccY11c6d.s:4742   .text.HAL_UART_AbortTransmit_IT:000000e4 $d
    /tmp//ccY11c6d.s:8804   .text.UART_DMATxOnlyAbortCallback:00000000 UART_DMATxOnlyAbortCallback
    /tmp//ccY11c6d.s:4747   .text.HAL_UART_AbortReceive_IT:00000000 $t
    /tmp//ccY11c6d.s:4753   .text.HAL_UART_AbortReceive_IT:00000000 HAL_UART_AbortReceive_IT
    /tmp//ccY11c6d.s:6302   .text.HAL_UART_AbortReceiveCpltCallback:00000000 HAL_UART_AbortReceiveCpltCallback
    /tmp//ccY11c6d.s:5073   .text.HAL_UART_AbortReceive_IT:00000160 $d
    /tmp//ccY11c6d.s:8856   .text.UART_DMARxOnlyAbortCallback:00000000 UART_DMARxOnlyAbortCallback
    /tmp//ccY11c6d.s:5078   .text.HAL_UART_IRQHandler:00000000 $t
    /tmp//ccY11c6d.s:5084   .text.HAL_UART_IRQHandler:00000000 HAL_UART_IRQHandler
    /tmp//ccY11c6d.s:9103   .text.UART_Receive_IT:00000000 UART_Receive_IT
    /tmp//ccY11c6d.s:6176   .text.HAL_UART_ErrorCallback:00000000 HAL_UART_ErrorCallback
    /tmp//ccY11c6d.s:6344   .text.HAL_UARTEx_RxEventCallback:00000000 HAL_UARTEx_RxEventCallback
    /tmp//ccY11c6d.s:5739   .text.HAL_UART_IRQHandler:000003e0 $d
    /tmp//ccY11c6d.s:8566   .text.UART_DMAAbortOnError:00000000 UART_DMAAbortOnError
    /tmp//ccY11c6d.s:5744   .text.HAL_UART_IRQHandler:000003e4 $t
    /tmp//ccY11c6d.s:8912   .text.UART_Transmit_IT:00000000 UART_Transmit_IT
    /tmp//ccY11c6d.s:9049   .text.UART_EndTransmit_IT:00000000 UART_EndTransmit_IT
    /tmp//ccY11c6d.s:6002   .text.HAL_UART_TxCpltCallback:00000000 $t
    /tmp//ccY11c6d.s:6008   .text.HAL_UART_TxCpltCallback:00000000 HAL_UART_TxCpltCallback
    /tmp//ccY11c6d.s:6044   .text.HAL_UART_TxHalfCpltCallback:00000000 $t
    /tmp//ccY11c6d.s:6050   .text.HAL_UART_TxHalfCpltCallback:00000000 HAL_UART_TxHalfCpltCallback
    /tmp//ccY11c6d.s:6086   .text.HAL_UART_RxCpltCallback:00000000 $t
    /tmp//ccY11c6d.s:6092   .text.HAL_UART_RxCpltCallback:00000000 HAL_UART_RxCpltCallback
    /tmp//ccY11c6d.s:6128   .text.HAL_UART_RxHalfCpltCallback:00000000 $t
    /tmp//ccY11c6d.s:6134   .text.HAL_UART_RxHalfCpltCallback:00000000 HAL_UART_RxHalfCpltCallback
    /tmp//ccY11c6d.s:6170   .text.HAL_UART_ErrorCallback:00000000 $t
    /tmp//ccY11c6d.s:6212   .text.HAL_UART_AbortCpltCallback:00000000 $t
    /tmp//ccY11c6d.s:6254   .text.HAL_UART_AbortTransmitCpltCallback:00000000 $t
    /tmp//ccY11c6d.s:6296   .text.HAL_UART_AbortReceiveCpltCallback:00000000 $t
    /tmp//ccY11c6d.s:6338   .text.HAL_UARTEx_RxEventCallback:00000000 $t
    /tmp//ccY11c6d.s:6382   .text.HAL_LIN_SendBreak:00000000 $t
    /tmp//ccY11c6d.s:6388   .text.HAL_LIN_SendBreak:00000000 HAL_LIN_SendBreak
    /tmp//ccY11c6d.s:6504   .text.HAL_MultiProcessor_EnterMuteMode:00000000 $t
    /tmp//ccY11c6d.s:6510   .text.HAL_MultiProcessor_EnterMuteMode:00000000 HAL_MultiProcessor_EnterMuteMode
    /tmp//ccY11c6d.s:6630   .text.HAL_MultiProcessor_ExitMuteMode:00000000 $t
    /tmp//ccY11c6d.s:6636   .text.HAL_MultiProcessor_ExitMuteMode:00000000 HAL_MultiProcessor_ExitMuteMode
    /tmp//ccY11c6d.s:6756   .text.HAL_HalfDuplex_EnableTransmitter:00000000 $t
    /tmp//ccY11c6d.s:6762   .text.HAL_HalfDuplex_EnableTransmitter:00000000 HAL_HalfDuplex_EnableTransmitter
    /tmp//ccY11c6d.s:6849   .text.HAL_HalfDuplex_EnableReceiver:00000000 $t
    /tmp//ccY11c6d.s:6855   .text.HAL_HalfDuplex_EnableReceiver:00000000 HAL_HalfDuplex_EnableReceiver
    /tmp//ccY11c6d.s:6942   .text.HAL_UART_GetState:00000000 $t
    /tmp//ccY11c6d.s:6948   .text.HAL_UART_GetState:00000000 HAL_UART_GetState
    /tmp//ccY11c6d.s:7009   .text.HAL_UART_GetError:00000000 $t
    /tmp//ccY11c6d.s:7015   .text.HAL_UART_GetError:00000000 HAL_UART_GetError
    /tmp//ccY11c6d.s:7054   .text.UART_DMATransmitCplt:00000000 $t
    /tmp//ccY11c6d.s:7218   .text.UART_DMATxHalfCplt:00000000 $t
    /tmp//ccY11c6d.s:7262   .text.UART_DMAReceiveCplt:00000000 $t
ARM GAS  /tmp//ccY11c6d.s 			page 258


    /tmp//ccY11c6d.s:7267   .text.UART_DMAReceiveCplt:00000000 UART_DMAReceiveCplt
    /tmp//ccY11c6d.s:7555   .text.UART_DMARxHalfCplt:00000000 $t
    /tmp//ccY11c6d.s:7560   .text.UART_DMARxHalfCplt:00000000 UART_DMARxHalfCplt
    /tmp//ccY11c6d.s:7622   .text.UART_DMAError:00000000 $t
    /tmp//ccY11c6d.s:7738   .text.UART_WaitOnFlagUntilTimeout:00000000 $t
    /tmp//ccY11c6d.s:7879   .text.UART_Start_Receive_IT:00000000 $t
    /tmp//ccY11c6d.s:7977   .text.UART_Start_Receive_DMA:00000000 $t
    /tmp//ccY11c6d.s:8249   .text.UART_Start_Receive_DMA:00000128 $d
    /tmp//ccY11c6d.s:8256   .text.UART_EndTxTransfer:00000000 $t
    /tmp//ccY11c6d.s:8352   .text.UART_EndRxTransfer:00000000 $t
    /tmp//ccY11c6d.s:8561   .text.UART_DMAAbortOnError:00000000 $t
    /tmp//ccY11c6d.s:8613   .text.UART_DMATxAbortCallback:00000000 $t
    /tmp//ccY11c6d.s:8706   .text.UART_DMARxAbortCallback:00000000 $t
    /tmp//ccY11c6d.s:8799   .text.UART_DMATxOnlyAbortCallback:00000000 $t
    /tmp//ccY11c6d.s:8851   .text.UART_DMARxOnlyAbortCallback:00000000 $t
    /tmp//ccY11c6d.s:8907   .text.UART_Transmit_IT:00000000 $t
    /tmp//ccY11c6d.s:9044   .text.UART_EndTransmit_IT:00000000 $t
    /tmp//ccY11c6d.s:9098   .text.UART_Receive_IT:00000000 $t
    /tmp//ccY11c6d.s:9393   .text.UART_SetConfig:00000000 $t
    /tmp//ccY11c6d.s:9559   .text.UART_SetConfig:00000114 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_GetError
HAL_DMA_Abort_IT
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetPCLK1Freq
