ARM GAS  /tmp//cckCB28b.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"mem.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/mem.c"
  18              		.global	node_struct_size
  19              		.section	.rodata.node_struct_size,"a"
  20              		.align	2
  23              	node_struct_size:
  24 0000 08000000 		.word	8
  25              		.section	.bss.heap_mem,"aw",%nobits
  26              		.align	2
  29              	heap_mem:
  30 0000 00000000 		.space	16384
  30      00000000 
  30      00000000 
  30      00000000 
  30      00000000 
  31              		.section	.data.heap,"aw"
  32              		.align	2
  35              	heap:
  36 0000 00000000 		.space	8
  36      00000000 
  37 0008 00000000 		.word	0
  38 000c 00400000 		.word	16384
  39              		.section	.text.heap_init,"ax",%progbits
  40              		.align	1
  41              		.global	heap_init
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  46              	heap_init:
  47              	.LFB0:
   1:Core/Src/mem.c **** #include "mem.h"
   2:Core/Src/mem.c **** #include "config.h"
   3:Core/Src/mem.c **** 
   4:Core/Src/mem.c **** 
   5:Core/Src/mem.c **** //the size of the heap node struct
   6:Core/Src/mem.c **** const size_t node_struct_size = (sizeof(heap_node) + alignment_byte) & ~alignment_byte;
   7:Core/Src/mem.c **** //alloc mem for the heap ifself
   8:Core/Src/mem.c **** static uint8_t heap_mem[configHeapSize];
   9:Core/Src/mem.c **** //init the heap struct
  10:Core/Src/mem.c **** static heap_t heap = {.tail = NULL, .heap_size = configHeapSize};
  11:Core/Src/mem.c **** 
  12:Core/Src/mem.c **** void heap_init(void){
ARM GAS  /tmp//cckCB28b.s 			page 2


  48              		.loc 1 12 21
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 16
  51              		@ frame_needed = 1, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  53 0000 80B4     		push	{r7}
  54              	.LCFI0:
  55              		.cfi_def_cfa_offset 4
  56              		.cfi_offset 7, -4
  57 0002 85B0     		sub	sp, sp, #20
  58              	.LCFI1:
  59              		.cfi_def_cfa_offset 24
  60 0004 00AF     		add	r7, sp, #0
  61              	.LCFI2:
  62              		.cfi_def_cfa_register 7
  13:Core/Src/mem.c ****     heap_node* first_node;
  14:Core/Src/mem.c ****     uint32_t heap_start;
  15:Core/Src/mem.c ****     uint32_t heap_end;
  16:Core/Src/mem.c ****     heap_start = (uint32_t)heap_mem;
  63              		.loc 1 16 16
  64 0006 224B     		ldr	r3, .L4
  65 0008 FB60     		str	r3, [r7, #12]
  17:Core/Src/mem.c ****     //make sure the start addr is 8-byte aligned
  18:Core/Src/mem.c ****     if((heap_start & alignment_byte) != 0){
  66              		.loc 1 18 20
  67 000a FB68     		ldr	r3, [r7, #12]
  68 000c 03F00703 		and	r3, r3, #7
  69              		.loc 1 18 7
  70 0010 002B     		cmp	r3, #0
  71 0012 0ED0     		beq	.L2
  19:Core/Src/mem.c ****         heap_start += alignment_byte;
  72              		.loc 1 19 20
  73 0014 FB68     		ldr	r3, [r7, #12]
  74 0016 0733     		adds	r3, r3, #7
  75 0018 FB60     		str	r3, [r7, #12]
  20:Core/Src/mem.c ****         heap_start &= ~alignment_byte;
  76              		.loc 1 20 20
  77 001a FB68     		ldr	r3, [r7, #12]
  78 001c 23F00703 		bic	r3, r3, #7
  79 0020 FB60     		str	r3, [r7, #12]
  21:Core/Src/mem.c ****         heap.heap_size -= (size_t)(heap_start - (uint32_t)heap_mem);
  80              		.loc 1 21 13
  81 0022 1C4B     		ldr	r3, .L4+4
  82 0024 DA68     		ldr	r2, [r3, #12]
  83              		.loc 1 21 24
  84 0026 FB68     		ldr	r3, [r7, #12]
  85 0028 D31A     		subs	r3, r2, r3
  86 002a 194A     		ldr	r2, .L4
  87 002c 1344     		add	r3, r3, r2
  88 002e 194A     		ldr	r2, .L4+4
  89 0030 D360     		str	r3, [r2, #12]
  90              	.L2:
  22:Core/Src/mem.c ****     }
  23:Core/Src/mem.c ****     //set the tail node
  24:Core/Src/mem.c ****     heap_end = heap_start + heap.heap_size - node_struct_size;
  91              		.loc 1 24 33
  92 0032 184B     		ldr	r3, .L4+4
ARM GAS  /tmp//cckCB28b.s 			page 3


  93 0034 DA68     		ldr	r2, [r3, #12]
  94              		.loc 1 24 27
  95 0036 FB68     		ldr	r3, [r7, #12]
  96 0038 1344     		add	r3, r3, r2
  97              		.loc 1 24 44
  98 003a 0822     		movs	r2, #8
  99              		.loc 1 24 14
 100 003c 9B1A     		subs	r3, r3, r2
 101 003e BB60     		str	r3, [r7, #8]
  25:Core/Src/mem.c ****     //make sure the heap_end is 8-byte aligned
  26:Core/Src/mem.c ****     if((heap_end & alignment_byte) != 0){
 102              		.loc 1 26 18
 103 0040 BB68     		ldr	r3, [r7, #8]
 104 0042 03F00703 		and	r3, r3, #7
 105              		.loc 1 26 7
 106 0046 002B     		cmp	r3, #0
 107 0048 0BD0     		beq	.L3
  27:Core/Src/mem.c ****         heap_end += alignment_byte;
 108              		.loc 1 27 18
 109 004a BB68     		ldr	r3, [r7, #8]
 110 004c 0733     		adds	r3, r3, #7
 111 004e BB60     		str	r3, [r7, #8]
  28:Core/Src/mem.c ****         heap_end &= alignment_byte;
 112              		.loc 1 28 18
 113 0050 BB68     		ldr	r3, [r7, #8]
 114 0052 03F00703 		and	r3, r3, #7
 115 0056 BB60     		str	r3, [r7, #8]
  29:Core/Src/mem.c ****         heap.heap_size = (size_t)(heap_end - heap_start);
 116              		.loc 1 29 44
 117 0058 BA68     		ldr	r2, [r7, #8]
 118 005a FB68     		ldr	r3, [r7, #12]
 119 005c D31A     		subs	r3, r2, r3
 120              		.loc 1 29 24
 121 005e 0D4A     		ldr	r2, .L4+4
 122 0060 D360     		str	r3, [r2, #12]
 123              	.L3:
  30:Core/Src/mem.c ****     }
  31:Core/Src/mem.c ****     //set the first heap mem node
  32:Core/Src/mem.c ****     first_node = (heap_node*)heap_start;
 124              		.loc 1 32 16
 125 0062 FB68     		ldr	r3, [r7, #12]
 126 0064 7B60     		str	r3, [r7, #4]
  33:Core/Src/mem.c ****     first_node->node_size = heap.heap_size;
 127              		.loc 1 33 33
 128 0066 0B4B     		ldr	r3, .L4+4
 129 0068 DA68     		ldr	r2, [r3, #12]
 130              		.loc 1 33 27
 131 006a 7B68     		ldr	r3, [r7, #4]
 132 006c 5A60     		str	r2, [r3, #4]
  34:Core/Src/mem.c ****     first_node->next = (heap_node*)heap_end;
 133              		.loc 1 34 24
 134 006e BA68     		ldr	r2, [r7, #8]
 135              		.loc 1 34 22
 136 0070 7B68     		ldr	r3, [r7, #4]
 137 0072 1A60     		str	r2, [r3]
  35:Core/Src/mem.c ****     //adjust the heap struct
  36:Core/Src/mem.c ****     heap.head.node_size = 0;
ARM GAS  /tmp//cckCB28b.s 			page 4


 138              		.loc 1 36 25
 139 0074 074B     		ldr	r3, .L4+4
 140 0076 0022     		movs	r2, #0
 141 0078 5A60     		str	r2, [r3, #4]
  37:Core/Src/mem.c ****     heap.head.next = first_node;
 142              		.loc 1 37 20
 143 007a 064A     		ldr	r2, .L4+4
 144 007c 7B68     		ldr	r3, [r7, #4]
 145 007e 1360     		str	r3, [r2]
  38:Core/Src/mem.c ****     heap.tail = (heap_node*)heap_end;
 146              		.loc 1 38 17
 147 0080 BB68     		ldr	r3, [r7, #8]
 148              		.loc 1 38 15
 149 0082 044A     		ldr	r2, .L4+4
 150 0084 9360     		str	r3, [r2, #8]
  39:Core/Src/mem.c **** }
 151              		.loc 1 39 1
 152 0086 00BF     		nop
 153 0088 1437     		adds	r7, r7, #20
 154              	.LCFI3:
 155              		.cfi_def_cfa_offset 4
 156 008a BD46     		mov	sp, r7
 157              	.LCFI4:
 158              		.cfi_def_cfa_register 13
 159              		@ sp needed
 160 008c 80BC     		pop	{r7}
 161              	.LCFI5:
 162              		.cfi_restore 7
 163              		.cfi_def_cfa_offset 0
 164 008e 7047     		bx	lr
 165              	.L5:
 166              		.align	2
 167              	.L4:
 168 0090 00000000 		.word	heap_mem
 169 0094 00000000 		.word	heap
 170              		.cfi_endproc
 171              	.LFE0:
 173              		.section	.text.halloc,"ax",%progbits
 174              		.align	1
 175              		.global	halloc
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 180              	halloc:
 181              	.LFB1:
  40:Core/Src/mem.c **** 
  41:Core/Src/mem.c **** void* halloc(size_t size){
 182              		.loc 1 41 26
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 32
 185              		@ frame_needed = 1, uses_anonymous_args = 0
 186 0000 80B5     		push	{r7, lr}
 187              	.LCFI6:
 188              		.cfi_def_cfa_offset 8
 189              		.cfi_offset 7, -8
 190              		.cfi_offset 14, -4
 191 0002 88B0     		sub	sp, sp, #32
ARM GAS  /tmp//cckCB28b.s 			page 5


 192              	.LCFI7:
 193              		.cfi_def_cfa_offset 40
 194 0004 00AF     		add	r7, sp, #0
 195              	.LCFI8:
 196              		.cfi_def_cfa_register 7
 197 0006 7860     		str	r0, [r7, #4]
  42:Core/Src/mem.c ****     heap_node* pre_node;
  43:Core/Src/mem.c ****     heap_node* cur_node;
  44:Core/Src/mem.c ****     heap_node* new_node;
  45:Core/Src/mem.c ****     heap_node* best_fit = NULL;
 198              		.loc 1 45 16
 199 0008 0023     		movs	r3, #0
 200 000a 7B61     		str	r3, [r7, #20]
  46:Core/Src/mem.c ****     heap_node* best_fit_pre_node;
  47:Core/Src/mem.c ****     size_t alignment_required;
  48:Core/Src/mem.c **** 
  49:Core/Src/mem.c ****     size += node_struct_size;
 201              		.loc 1 49 10
 202 000c 0822     		movs	r2, #8
 203 000e 7B68     		ldr	r3, [r7, #4]
 204 0010 1344     		add	r3, r3, r2
 205 0012 7B60     		str	r3, [r7, #4]
  50:Core/Src/mem.c ****     //make sure the mem size is 8-byte aligned
  51:Core/Src/mem.c ****     if((size & alignment_byte) != 0){
 206              		.loc 1 51 14
 207 0014 7B68     		ldr	r3, [r7, #4]
 208 0016 03F00703 		and	r3, r3, #7
 209              		.loc 1 51 7
 210 001a 002B     		cmp	r3, #0
 211 001c 09D0     		beq	.L7
  52:Core/Src/mem.c ****         alignment_required = (alignment_byte + 1) - (size & alignment_byte);
 212              		.loc 1 52 59
 213 001e 7B68     		ldr	r3, [r7, #4]
 214 0020 03F00703 		and	r3, r3, #7
 215              		.loc 1 52 28
 216 0024 C3F10803 		rsb	r3, r3, #8
 217 0028 FB60     		str	r3, [r7, #12]
  53:Core/Src/mem.c ****         size += alignment_required;
 218              		.loc 1 53 14
 219 002a 7A68     		ldr	r2, [r7, #4]
 220 002c FB68     		ldr	r3, [r7, #12]
 221 002e 1344     		add	r3, r3, r2
 222 0030 7B60     		str	r3, [r7, #4]
 223              	.L7:
  54:Core/Src/mem.c ****     }
  55:Core/Src/mem.c ****     //make sure the heap is initialized
  56:Core/Src/mem.c ****     if(heap.tail == NULL){
 224              		.loc 1 56 12
 225 0032 304B     		ldr	r3, .L16
 226 0034 9B68     		ldr	r3, [r3, #8]
 227              		.loc 1 56 7
 228 0036 002B     		cmp	r3, #0
 229 0038 01D1     		bne	.L8
  57:Core/Src/mem.c ****         heap_init();
 230              		.loc 1 57 9
 231 003a FFF7FEFF 		bl	heap_init
 232              	.L8:
ARM GAS  /tmp//cckCB28b.s 			page 6


  58:Core/Src/mem.c ****     }
  59:Core/Src/mem.c ****     //find the best fit node
  60:Core/Src/mem.c ****     pre_node = &heap.head;
 233              		.loc 1 60 14
 234 003e 2D4B     		ldr	r3, .L16
 235 0040 FB61     		str	r3, [r7, #28]
  61:Core/Src/mem.c ****     cur_node = heap.head.next;
 236              		.loc 1 61 14
 237 0042 2C4B     		ldr	r3, .L16
 238 0044 1B68     		ldr	r3, [r3]
 239 0046 BB61     		str	r3, [r7, #24]
  62:Core/Src/mem.c ****     while(cur_node != heap.tail){
 240              		.loc 1 62 10
 241 0048 16E0     		b	.L9
 242              	.L12:
  63:Core/Src/mem.c ****         if(cur_node->node_size >= size){
 243              		.loc 1 63 20
 244 004a BB69     		ldr	r3, [r7, #24]
 245 004c 5B68     		ldr	r3, [r3, #4]
 246              		.loc 1 63 11
 247 004e 7A68     		ldr	r2, [r7, #4]
 248 0050 9A42     		cmp	r2, r3
 249 0052 0CD8     		bhi	.L10
  64:Core/Src/mem.c ****             if(best_fit == NULL || cur_node->node_size < best_fit->node_size){
 250              		.loc 1 64 15
 251 0054 7B69     		ldr	r3, [r7, #20]
 252 0056 002B     		cmp	r3, #0
 253 0058 05D0     		beq	.L11
 254              		.loc 1 64 44 discriminator 1
 255 005a BB69     		ldr	r3, [r7, #24]
 256 005c 5A68     		ldr	r2, [r3, #4]
 257              		.loc 1 64 66 discriminator 1
 258 005e 7B69     		ldr	r3, [r7, #20]
 259 0060 5B68     		ldr	r3, [r3, #4]
 260              		.loc 1 64 33 discriminator 1
 261 0062 9A42     		cmp	r2, r3
 262 0064 03D2     		bcs	.L10
 263              	.L11:
  65:Core/Src/mem.c ****                 best_fit_pre_node = pre_node;
 264              		.loc 1 65 35
 265 0066 FB69     		ldr	r3, [r7, #28]
 266 0068 3B61     		str	r3, [r7, #16]
  66:Core/Src/mem.c ****                 best_fit = cur_node;
 267              		.loc 1 66 26
 268 006a BB69     		ldr	r3, [r7, #24]
 269 006c 7B61     		str	r3, [r7, #20]
 270              	.L10:
  67:Core/Src/mem.c ****             }
  68:Core/Src/mem.c ****         }
  69:Core/Src/mem.c ****         pre_node = cur_node;
 271              		.loc 1 69 18
 272 006e BB69     		ldr	r3, [r7, #24]
 273 0070 FB61     		str	r3, [r7, #28]
  70:Core/Src/mem.c ****         cur_node = cur_node->next;
 274              		.loc 1 70 18
 275 0072 BB69     		ldr	r3, [r7, #24]
 276 0074 1B68     		ldr	r3, [r3]
ARM GAS  /tmp//cckCB28b.s 			page 7


 277 0076 BB61     		str	r3, [r7, #24]
 278              	.L9:
  62:Core/Src/mem.c ****         if(cur_node->node_size >= size){
 279              		.loc 1 62 27
 280 0078 1E4B     		ldr	r3, .L16
 281 007a 9B68     		ldr	r3, [r3, #8]
  62:Core/Src/mem.c ****         if(cur_node->node_size >= size){
 282              		.loc 1 62 20
 283 007c BA69     		ldr	r2, [r7, #24]
 284 007e 9A42     		cmp	r2, r3
 285 0080 E3D1     		bne	.L12
  71:Core/Src/mem.c ****     }
  72:Core/Src/mem.c ****     if(best_fit == NULL)
 286              		.loc 1 72 7
 287 0082 7B69     		ldr	r3, [r7, #20]
 288 0084 002B     		cmp	r3, #0
 289 0086 01D1     		bne	.L13
  73:Core/Src/mem.c ****         return NULL;
 290              		.loc 1 73 16
 291 0088 0023     		movs	r3, #0
 292 008a 2EE0     		b	.L14
 293              	.L13:
  74:Core/Src/mem.c ****     //remove the node from the list
  75:Core/Src/mem.c ****     best_fit_pre_node->next = best_fit->next;
 294              		.loc 1 75 39
 295 008c 7B69     		ldr	r3, [r7, #20]
 296 008e 1A68     		ldr	r2, [r3]
 297              		.loc 1 75 29
 298 0090 3B69     		ldr	r3, [r7, #16]
 299 0092 1A60     		str	r2, [r3]
  76:Core/Src/mem.c ****     best_fit->next = NULL;
 300              		.loc 1 76 20
 301 0094 7B69     		ldr	r3, [r7, #20]
 302 0096 0022     		movs	r2, #0
 303 0098 1A60     		str	r2, [r3]
  77:Core/Src/mem.c ****     //if the node we found have enough mem for a heap node
  78:Core/Src/mem.c ****     //after the allocation, make a new node and put it in the list;
  79:Core/Src/mem.c **** 
  80:Core/Src/mem.c ****     if(best_fit->node_size - size >= MIN_NODE_SIZE){
 304              		.loc 1 80 16
 305 009a 7B69     		ldr	r3, [r7, #20]
 306 009c 5A68     		ldr	r2, [r3, #4]
 307              		.loc 1 80 28
 308 009e 7B68     		ldr	r3, [r7, #4]
 309 00a0 D21A     		subs	r2, r2, r3
 310              		.loc 1 80 38
 311 00a2 0823     		movs	r3, #8
 312 00a4 5B00     		lsls	r3, r3, #1
 313              		.loc 1 80 7
 314 00a6 9A42     		cmp	r2, r3
 315 00a8 14D3     		bcc	.L15
  81:Core/Src/mem.c ****         new_node = (heap_node*)(best_fit + size);
 316              		.loc 1 81 42
 317 00aa 7B68     		ldr	r3, [r7, #4]
 318 00ac DB00     		lsls	r3, r3, #3
 319              		.loc 1 81 18
 320 00ae 7A69     		ldr	r2, [r7, #20]
ARM GAS  /tmp//cckCB28b.s 			page 8


 321 00b0 1344     		add	r3, r3, r2
 322 00b2 BB60     		str	r3, [r7, #8]
  82:Core/Src/mem.c ****         new_node->node_size = best_fit->node_size - size;
 323              		.loc 1 82 39
 324 00b4 7B69     		ldr	r3, [r7, #20]
 325 00b6 5A68     		ldr	r2, [r3, #4]
 326              		.loc 1 82 51
 327 00b8 7B68     		ldr	r3, [r7, #4]
 328 00ba D21A     		subs	r2, r2, r3
 329              		.loc 1 82 29
 330 00bc BB68     		ldr	r3, [r7, #8]
 331 00be 5A60     		str	r2, [r3, #4]
  83:Core/Src/mem.c ****         best_fit->node_size = size;
 332              		.loc 1 83 29
 333 00c0 7B69     		ldr	r3, [r7, #20]
 334 00c2 7A68     		ldr	r2, [r7, #4]
 335 00c4 5A60     		str	r2, [r3, #4]
  84:Core/Src/mem.c ****         new_node->next = best_fit_pre_node->next;
 336              		.loc 1 84 43
 337 00c6 3B69     		ldr	r3, [r7, #16]
 338 00c8 1A68     		ldr	r2, [r3]
 339              		.loc 1 84 24
 340 00ca BB68     		ldr	r3, [r7, #8]
 341 00cc 1A60     		str	r2, [r3]
  85:Core/Src/mem.c ****         best_fit_pre_node->next = new_node;
 342              		.loc 1 85 33
 343 00ce 3B69     		ldr	r3, [r7, #16]
 344 00d0 BA68     		ldr	r2, [r7, #8]
 345 00d2 1A60     		str	r2, [r3]
 346              	.L15:
  86:Core/Src/mem.c ****     }
  87:Core/Src/mem.c **** 
  88:Core/Src/mem.c ****     heap.heap_size -= best_fit->node_size;
 347              		.loc 1 88 9
 348 00d4 074B     		ldr	r3, .L16
 349 00d6 DA68     		ldr	r2, [r3, #12]
 350              		.loc 1 88 31
 351 00d8 7B69     		ldr	r3, [r7, #20]
 352 00da 5B68     		ldr	r3, [r3, #4]
 353              		.loc 1 88 20
 354 00dc D31A     		subs	r3, r2, r3
 355 00de 054A     		ldr	r2, .L16
 356 00e0 D360     		str	r3, [r2, #12]
  89:Core/Src/mem.c ****     return (void*)(best_fit + node_struct_size);
 357              		.loc 1 89 29
 358 00e2 0823     		movs	r3, #8
 359 00e4 DB00     		lsls	r3, r3, #3
 360              		.loc 1 89 12
 361 00e6 7A69     		ldr	r2, [r7, #20]
 362 00e8 1344     		add	r3, r3, r2
 363              	.L14:
  90:Core/Src/mem.c **** }
 364              		.loc 1 90 1
 365 00ea 1846     		mov	r0, r3
 366 00ec 2037     		adds	r7, r7, #32
 367              	.LCFI9:
 368              		.cfi_def_cfa_offset 8
ARM GAS  /tmp//cckCB28b.s 			page 9


 369 00ee BD46     		mov	sp, r7
 370              	.LCFI10:
 371              		.cfi_def_cfa_register 13
 372              		@ sp needed
 373 00f0 80BD     		pop	{r7, pc}
 374              	.L17:
 375 00f2 00BF     		.align	2
 376              	.L16:
 377 00f4 00000000 		.word	heap
 378              		.cfi_endproc
 379              	.LFE1:
 381              		.section	.text.heap_insert_list,"ax",%progbits
 382              		.align	1
 383              		.syntax unified
 384              		.thumb
 385              		.thumb_func
 387              	heap_insert_list:
 388              	.LFB2:
  91:Core/Src/mem.c **** 
  92:Core/Src/mem.c **** static void heap_insert_list(heap_node* inserted_node){
 389              		.loc 1 92 55
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 16
 392              		@ frame_needed = 1, uses_anonymous_args = 0
 393              		@ link register save eliminated.
 394 0000 80B4     		push	{r7}
 395              	.LCFI11:
 396              		.cfi_def_cfa_offset 4
 397              		.cfi_offset 7, -4
 398 0002 85B0     		sub	sp, sp, #20
 399              	.LCFI12:
 400              		.cfi_def_cfa_offset 24
 401 0004 00AF     		add	r7, sp, #0
 402              	.LCFI13:
 403              		.cfi_def_cfa_register 7
 404 0006 7860     		str	r0, [r7, #4]
  93:Core/Src/mem.c ****     heap_node* iter_node;
  94:Core/Src/mem.c **** 
  95:Core/Src/mem.c ****     iter_node = heap.head.next;
 405              		.loc 1 95 15
 406 0008 214B     		ldr	r3, .L24
 407 000a 1B68     		ldr	r3, [r3]
 408 000c FB60     		str	r3, [r7, #12]
  96:Core/Src/mem.c ****     while(iter_node < inserted_node){
 409              		.loc 1 96 10
 410 000e 02E0     		b	.L19
 411              	.L20:
  97:Core/Src/mem.c ****         iter_node = iter_node->next;
 412              		.loc 1 97 19
 413 0010 FB68     		ldr	r3, [r7, #12]
 414 0012 1B68     		ldr	r3, [r3]
 415 0014 FB60     		str	r3, [r7, #12]
 416              	.L19:
  96:Core/Src/mem.c ****     while(iter_node < inserted_node){
 417              		.loc 1 96 21
 418 0016 FA68     		ldr	r2, [r7, #12]
 419 0018 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp//cckCB28b.s 			page 10


 420 001a 9A42     		cmp	r2, r3
 421 001c F8D3     		bcc	.L20
  98:Core/Src/mem.c ****     }
  99:Core/Src/mem.c **** 
 100:Core/Src/mem.c ****     inserted_node->next = iter_node->next;
 422              		.loc 1 100 36
 423 001e FB68     		ldr	r3, [r7, #12]
 424 0020 1A68     		ldr	r2, [r3]
 425              		.loc 1 100 25
 426 0022 7B68     		ldr	r3, [r7, #4]
 427 0024 1A60     		str	r2, [r3]
 101:Core/Src/mem.c ****     iter_node->next = inserted_node;
 428              		.loc 1 101 21
 429 0026 FB68     		ldr	r3, [r7, #12]
 430 0028 7A68     		ldr	r2, [r7, #4]
 431 002a 1A60     		str	r2, [r3]
 102:Core/Src/mem.c ****     if(((uint8_t*)inserted_node + inserted_node->node_size == (uint8_t*)inserted_node->next)){
 432              		.loc 1 102 48
 433 002c 7B68     		ldr	r3, [r7, #4]
 434 002e 5B68     		ldr	r3, [r3, #4]
 435              		.loc 1 102 33
 436 0030 7A68     		ldr	r2, [r7, #4]
 437 0032 1A44     		add	r2, r2, r3
 438              		.loc 1 102 86
 439 0034 7B68     		ldr	r3, [r7, #4]
 440 0036 1B68     		ldr	r3, [r3]
 441              		.loc 1 102 7
 442 0038 9A42     		cmp	r2, r3
 443 003a 12D1     		bne	.L21
 103:Core/Src/mem.c ****         if(inserted_node->next != heap.tail){
 444              		.loc 1 103 25
 445 003c 7B68     		ldr	r3, [r7, #4]
 446 003e 1A68     		ldr	r2, [r3]
 447              		.loc 1 103 39
 448 0040 134B     		ldr	r3, .L24
 449 0042 9B68     		ldr	r3, [r3, #8]
 450              		.loc 1 103 11
 451 0044 9A42     		cmp	r2, r3
 452 0046 0CD0     		beq	.L21
 104:Core/Src/mem.c ****             inserted_node->next->node_size += inserted_node->node_size;
 453              		.loc 1 104 26
 454 0048 7B68     		ldr	r3, [r7, #4]
 455 004a 1B68     		ldr	r3, [r3]
 456              		.loc 1 104 32
 457 004c 5968     		ldr	r1, [r3, #4]
 458              		.loc 1 104 60
 459 004e 7B68     		ldr	r3, [r7, #4]
 460 0050 5A68     		ldr	r2, [r3, #4]
 461              		.loc 1 104 26
 462 0052 7B68     		ldr	r3, [r7, #4]
 463 0054 1B68     		ldr	r3, [r3]
 464              		.loc 1 104 44
 465 0056 0A44     		add	r2, r2, r1
 466 0058 5A60     		str	r2, [r3, #4]
 105:Core/Src/mem.c ****             iter_node->next = inserted_node->next;
 467              		.loc 1 105 44
 468 005a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp//cckCB28b.s 			page 11


 469 005c 1A68     		ldr	r2, [r3]
 470              		.loc 1 105 29
 471 005e FB68     		ldr	r3, [r7, #12]
 472 0060 1A60     		str	r2, [r3]
 473              	.L21:
 106:Core/Src/mem.c ****         }
 107:Core/Src/mem.c ****     }
 108:Core/Src/mem.c ****     if((uint8_t*)iter_node + iter_node->node_size == (uint8_t*)inserted_node){
 474              		.loc 1 108 39
 475 0062 FB68     		ldr	r3, [r7, #12]
 476 0064 5B68     		ldr	r3, [r3, #4]
 477              		.loc 1 108 28
 478 0066 FA68     		ldr	r2, [r7, #12]
 479 0068 1344     		add	r3, r3, r2
 480              		.loc 1 108 7
 481 006a 7A68     		ldr	r2, [r7, #4]
 482 006c 9A42     		cmp	r2, r3
 483 006e 0AD1     		bne	.L23
 109:Core/Src/mem.c ****        iter_node->node_size += inserted_node->node_size;
 484              		.loc 1 109 17
 485 0070 FB68     		ldr	r3, [r7, #12]
 486 0072 5A68     		ldr	r2, [r3, #4]
 487              		.loc 1 109 45
 488 0074 7B68     		ldr	r3, [r7, #4]
 489 0076 5B68     		ldr	r3, [r3, #4]
 490              		.loc 1 109 29
 491 0078 1A44     		add	r2, r2, r3
 492 007a FB68     		ldr	r3, [r7, #12]
 493 007c 5A60     		str	r2, [r3, #4]
 110:Core/Src/mem.c ****        iter_node->next = inserted_node->next;
 494              		.loc 1 110 39
 495 007e 7B68     		ldr	r3, [r7, #4]
 496 0080 1A68     		ldr	r2, [r3]
 497              		.loc 1 110 24
 498 0082 FB68     		ldr	r3, [r7, #12]
 499 0084 1A60     		str	r2, [r3]
 500              	.L23:
 111:Core/Src/mem.c ****     }
 112:Core/Src/mem.c **** }
 501              		.loc 1 112 1
 502 0086 00BF     		nop
 503 0088 1437     		adds	r7, r7, #20
 504              	.LCFI14:
 505              		.cfi_def_cfa_offset 4
 506 008a BD46     		mov	sp, r7
 507              	.LCFI15:
 508              		.cfi_def_cfa_register 13
 509              		@ sp needed
 510 008c 80BC     		pop	{r7}
 511              	.LCFI16:
 512              		.cfi_restore 7
 513              		.cfi_def_cfa_offset 0
 514 008e 7047     		bx	lr
 515              	.L25:
 516              		.align	2
 517              	.L24:
 518 0090 00000000 		.word	heap
ARM GAS  /tmp//cckCB28b.s 			page 12


 519              		.cfi_endproc
 520              	.LFE2:
 522              		.section	.text.hfree,"ax",%progbits
 523              		.align	1
 524              		.global	hfree
 525              		.syntax unified
 526              		.thumb
 527              		.thumb_func
 529              	hfree:
 530              	.LFB3:
 113:Core/Src/mem.c **** 
 114:Core/Src/mem.c **** void hfree(void* addr){
 531              		.loc 1 114 23
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 16
 534              		@ frame_needed = 1, uses_anonymous_args = 0
 535 0000 80B5     		push	{r7, lr}
 536              	.LCFI17:
 537              		.cfi_def_cfa_offset 8
 538              		.cfi_offset 7, -8
 539              		.cfi_offset 14, -4
 540 0002 84B0     		sub	sp, sp, #16
 541              	.LCFI18:
 542              		.cfi_def_cfa_offset 24
 543 0004 00AF     		add	r7, sp, #0
 544              	.LCFI19:
 545              		.cfi_def_cfa_register 7
 546 0006 7860     		str	r0, [r7, #4]
 115:Core/Src/mem.c ****   heap_node* addr_node;
 116:Core/Src/mem.c ****   addr_node = (heap_node*)(addr - node_struct_size);
 547              		.loc 1 116 33
 548 0008 0823     		movs	r3, #8
 549 000a 5B42     		rsbs	r3, r3, #0
 550              		.loc 1 116 13
 551 000c 7A68     		ldr	r2, [r7, #4]
 552 000e 1344     		add	r3, r3, r2
 553 0010 FB60     		str	r3, [r7, #12]
 117:Core/Src/mem.c ****   heap.heap_size += addr_node->node_size;
 554              		.loc 1 117 7
 555 0012 074B     		ldr	r3, .L27
 556 0014 DA68     		ldr	r2, [r3, #12]
 557              		.loc 1 117 30
 558 0016 FB68     		ldr	r3, [r7, #12]
 559 0018 5B68     		ldr	r3, [r3, #4]
 560              		.loc 1 117 18
 561 001a 1344     		add	r3, r3, r2
 562 001c 044A     		ldr	r2, .L27
 563 001e D360     		str	r3, [r2, #12]
 118:Core/Src/mem.c ****   heap_insert_list(addr_node);
 564              		.loc 1 118 3
 565 0020 F868     		ldr	r0, [r7, #12]
 566 0022 FFF7FEFF 		bl	heap_insert_list
 119:Core/Src/mem.c **** }
 567              		.loc 1 119 1
 568 0026 00BF     		nop
 569 0028 1037     		adds	r7, r7, #16
 570              	.LCFI20:
ARM GAS  /tmp//cckCB28b.s 			page 13


 571              		.cfi_def_cfa_offset 8
 572 002a BD46     		mov	sp, r7
 573              	.LCFI21:
 574              		.cfi_def_cfa_register 13
 575              		@ sp needed
 576 002c 80BD     		pop	{r7, pc}
 577              	.L28:
 578 002e 00BF     		.align	2
 579              	.L27:
 580 0030 00000000 		.word	heap
 581              		.cfi_endproc
 582              	.LFE3:
 584              		.text
 585              	.Letext0:
 586              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 587              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 588              		.file 4 "/usr/lib/gcc/arm-none-eabi/14.2.0/include/stddef.h"
 589              		.file 5 "Core/Inc/mem.h"
ARM GAS  /tmp//cckCB28b.s 			page 14


DEFINED SYMBOLS
                            *ABS*:00000000 mem.c
    /tmp//cckCB28b.s:23     .rodata.node_struct_size:00000000 node_struct_size
    /tmp//cckCB28b.s:20     .rodata.node_struct_size:00000000 $d
    /tmp//cckCB28b.s:26     .bss.heap_mem:00000000 $d
    /tmp//cckCB28b.s:29     .bss.heap_mem:00000000 heap_mem
    /tmp//cckCB28b.s:32     .data.heap:00000000 $d
    /tmp//cckCB28b.s:35     .data.heap:00000000 heap
    /tmp//cckCB28b.s:40     .text.heap_init:00000000 $t
    /tmp//cckCB28b.s:46     .text.heap_init:00000000 heap_init
    /tmp//cckCB28b.s:168    .text.heap_init:00000090 $d
    /tmp//cckCB28b.s:174    .text.halloc:00000000 $t
    /tmp//cckCB28b.s:180    .text.halloc:00000000 halloc
    /tmp//cckCB28b.s:377    .text.halloc:000000f4 $d
    /tmp//cckCB28b.s:382    .text.heap_insert_list:00000000 $t
    /tmp//cckCB28b.s:387    .text.heap_insert_list:00000000 heap_insert_list
    /tmp//cckCB28b.s:518    .text.heap_insert_list:00000090 $d
    /tmp//cckCB28b.s:523    .text.hfree:00000000 $t
    /tmp//cckCB28b.s:529    .text.hfree:00000000 hfree
    /tmp//cckCB28b.s:580    .text.hfree:00000030 $d

NO UNDEFINED SYMBOLS
